
Nitramon_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c734  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e8  0800c8d8  0800c8d8  0001c8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9c0  0800d9c0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d9c0  0800d9c0  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d9c0  0800d9c0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9c0  0800d9c0  0001d9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9c4  0800d9c4  0001d9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          0000d7a4  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d994  2000d994  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014101  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002612  00000000  00000000  00034321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  00036938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a8  00000000  00000000  000373e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a79  00000000  00000000  00037d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe52  00000000  00000000  00059801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5d67  00000000  00000000  00069653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  0012f3ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003de8  00000000  00000000  0012f47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000018a  00000000  00000000  00133264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c8bc 	.word	0x0800c8bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800c8bc 	.word	0x0800c8bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <General_GPIO_Init>:
#include "stm32f303xe.h"
#include "Peripheral_Initial.h"
#include "main.h"

void General_GPIO_Init()
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= 0x0200000;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <General_GPIO_Init+0x3c>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <General_GPIO_Init+0x3c>)
 8000cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce2:	6153      	str	r3, [r2, #20]
	GPIOE->MODER |= 0x15500000;  // LED- PE10-14, output mode
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <General_GPIO_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <General_GPIO_Init+0x40>)
 8000cea:	f043 53aa 	orr.w	r3, r3, #356515840	; 0x15400000
 8000cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cf2:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR |= 0x3FF00000; // high speed PE10-14
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <General_GPIO_Init+0x40>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <General_GPIO_Init+0x40>)
 8000cfa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8000cfe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000d02:	6093      	str	r3, [r2, #8]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48001000 	.word	0x48001000

08000d18 <CV_Dual_DAC_Init>:

void CV_Dual_DAC_Init(float volt1, float volt2, int16_t psc, int32_t arr)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d22:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	80fb      	strh	r3, [r7, #6]
	/*------------------------------- Configure timer 4 -------------------------------*/
	RCC->APB1ENR |= (1 << 2);							// Enable TIM4 clock
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <CV_Dual_DAC_Init+0xe4>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <CV_Dual_DAC_Init+0xe4>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	61d3      	str	r3, [r2, #28]
	TIM4->CR2 |= 0x20;									// Update event is selected as trigger output TRGO event
 8000d38:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <CV_Dual_DAC_Init+0xe8>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a30      	ldr	r2, [pc, #192]	; (8000e00 <CV_Dual_DAC_Init+0xe8>)
 8000d3e:	f043 0320 	orr.w	r3, r3, #32
 8000d42:	6053      	str	r3, [r2, #4]
	TIM4->PSC = psc;									// Prescaler value
 8000d44:	4a2e      	ldr	r2, [pc, #184]	; (8000e00 <CV_Dual_DAC_Init+0xe8>)
 8000d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4a:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->ARR = arr;									// Auto reload register
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <CV_Dual_DAC_Init+0xe8>)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CR1 |= 0x0004;								// clk_division=0, auto-reload preload disable, upcounter, one-pulse mode disable, counter overflow interrupt, UEV disable
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <CV_Dual_DAC_Init+0xe8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a2a      	ldr	r2, [pc, #168]	; (8000e00 <CV_Dual_DAC_Init+0xe8>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6013      	str	r3, [r2, #0]
	TIM4->DIER = 0x0001;								// Update interrupt enable
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <CV_Dual_DAC_Init+0xe8>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	60da      	str	r2, [r3, #12]
								// Enable Timer2 NVIC interrupt
	/*---------------------------- DAC1 CH1 configuration -----------------------------*/
	RCC->APB1ENR |= (1 << 29);							// Enable DAC1 interface clock
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <CV_Dual_DAC_Init+0xe4>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a24      	ldr	r2, [pc, #144]	; (8000dfc <CV_Dual_DAC_Init+0xe4>)
 8000d6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d6e:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= (1 << 17); 							// Enable GPIOA clock
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <CV_Dual_DAC_Init+0xe4>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <CV_Dual_DAC_Init+0xe4>)
 8000d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7a:	6153      	str	r3, [r2, #20]
	GPIOA->MODER |= 0b11 << (4 * 2);					// Set PA4 as analog
 8000d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d86:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d8a:	6013      	str	r3, [r2, #0]
	DAC1->CR |= 0x2D; //0x3B;							// DAC1 CH1 wave generation disable, CH1 buffered, CH1 enable
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <CV_Dual_DAC_Init+0xec>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <CV_Dual_DAC_Init+0xec>)
 8000d92:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000d96:	6013      	str	r3, [r2, #0]
	DAC1->DHR12RD = (uint16_t)(volt1);		// Load desired value in 12 bit right aligned data holding register
 8000d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000da0:	ee17 3a90 	vmov	r3, s15
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <CV_Dual_DAC_Init+0xec>)
 8000da8:	621a      	str	r2, [r3, #32]

	GPIOA->MODER |= 0b11 << (5 * 2);					// Set PA5 as analog
 8000daa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000db4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000db8:	6013      	str	r3, [r2, #0]
	DAC1->CR |= (0x2D << 16); //(0x3B << 16);			// DAC1 CH2 wave generation disable, CH2 buffered, CH2 enable
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <CV_Dual_DAC_Init+0xec>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <CV_Dual_DAC_Init+0xec>)
 8000dc0:	f443 1334 	orr.w	r3, r3, #2949120	; 0x2d0000
 8000dc4:	6013      	str	r3, [r2, #0]
	DAC1->DHR12RD |= (uint16_t)(volt2) << 16;	// Load desired value in 12 bit right aligned data holding register
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <CV_Dual_DAC_Init+0xec>)
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd2:	ee17 2a90 	vmov	r2, s15
 8000dd6:	b292      	uxth	r2, r2
 8000dd8:	0412      	lsls	r2, r2, #16
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <CV_Dual_DAC_Init+0xec>)
 8000dde:	430b      	orrs	r3, r1
 8000de0:	6213      	str	r3, [r2, #32]
	TIM4->CR1 |= 0x01;									// counter enable
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <CV_Dual_DAC_Init+0xe8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <CV_Dual_DAC_Init+0xe8>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6013      	str	r3, [r2, #0]
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40000800 	.word	0x40000800
 8000e04:	40007400 	.word	0x40007400

08000e08 <CV_Single_ADC_Init>:

void CV_Single_ADC_Init(ADC_Channel channel, Sample_Time sample_t, int16_t psc, int32_t arr, int32_t *adc_dma)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	460b      	mov	r3, r1
 8000e16:	71bb      	strb	r3, [r7, #6]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	80bb      	strh	r3, [r7, #4]
	/*------------------------------- Configure timer 2 -------------------------------*/
	RCC->APB1ENR |= 0x01;//0x00000001;				// Enable TIM2 clock
 8000e1c:	4b69      	ldr	r3, [pc, #420]	; (8000fc4 <CV_Single_ADC_Init+0x1bc>)
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	4a68      	ldr	r2, [pc, #416]	; (8000fc4 <CV_Single_ADC_Init+0x1bc>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	61d3      	str	r3, [r2, #28]
	TIM2->CR2 |= 0x20;								// Update event is selected as trigger output ( For ADC external trigger )
 8000e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	f043 0320 	orr.w	r3, r3, #32
 8000e36:	6053      	str	r3, [r2, #4]
	TIM2->PSC = psc;								// Prescaler value
 8000e38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e40:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = arr;								// Auto reload register
 8000e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= 0x0004;							// clk_division=0, auto-reload preload disable, upcounter, one-pulse mode disable, counter overflow interrupt, UEV disable, counter disable
 8000e4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6013      	str	r3, [r2, #0]
	/*------------------------------- Configure ADC1 ----------------------------------*/
	RCC->AHBENR |= 0x10000000; 						// Enable ADC12 clock
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <CV_Single_ADC_Init+0x1bc>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a59      	ldr	r2, [pc, #356]	; (8000fc4 <CV_Single_ADC_Init+0x1bc>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6153      	str	r3, [r2, #20]
	RCC->CFGR2 |= 0x100;							// Set ADC12 prescaler to PLL clock divided by 1
 8000e66:	4b57      	ldr	r3, [pc, #348]	; (8000fc4 <CV_Single_ADC_Init+0x1bc>)
 8000e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6a:	4a56      	ldr	r2, [pc, #344]	; (8000fc4 <CV_Single_ADC_Init+0x1bc>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHBENR |= 0x20000;							// Enable GPIOA clock
 8000e72:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <CV_Single_ADC_Init+0x1bc>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a53      	ldr	r2, [pc, #332]	; (8000fc4 <CV_Single_ADC_Init+0x1bc>)
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	6153      	str	r3, [r2, #20]
	GPIOA->MODER |= 0b11 << (channel-1)*2;			// Enable analog mode on GPIOA pin
 8000e7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	79fa      	ldrb	r2, [r7, #7]
 8000e86:	3a01      	subs	r2, #1
 8000e88:	0052      	lsls	r2, r2, #1
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e90:	4611      	mov	r1, r2
 8000e92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e96:	430b      	orrs	r3, r1
 8000e98:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b11 << (channel-1)*2;		// GPIOA high speed
 8000e9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	0052      	lsls	r2, r2, #1
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eac:	4611      	mov	r1, r2
 8000eae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	6093      	str	r3, [r2, #8]

	ADC1->CR &= ~0x20000000;
 8000eb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ec0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000ec4:	6093      	str	r3, [r2, #8]
	HAL_Delay(2);
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f002 fc22 	bl	8003710 <HAL_Delay>
	ADC1->CR |= 0x10000000;							// Launch ADC calibration in single ended mode
 8000ecc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6093      	str	r3, [r2, #8]
	HAL_Delay(10);									// Wait for ADC voltage regulator to get enabled
 8000edc:	200a      	movs	r0, #10
 8000ede:	f002 fc17 	bl	8003710 <HAL_Delay>
	ADC1->CR |= 0x80000000;							// Start ADC calibration
 8000ee2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef0:	6093      	str	r3, [r2, #8]
	while(ADC1->CR & 0x80000000);					// wait for ADC calibration to be finished*/
 8000ef2:	bf00      	nop
 8000ef4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	dbfa      	blt.n	8000ef4 <CV_Single_ADC_Init+0xec>
	ADC1->CFGR |= 0x1000;							// Overrun data overwritten, right data alignment, 12 bit, DMA disabled
 8000efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f0c:	60d3      	str	r3, [r2, #12]
	ADC1->CR |= 0x01;								// Enable ADC1
 8000f0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6093      	str	r3, [r2, #8]
	ADC1->SQR1 = (channel << 6);					// Set number of conversions to 1 and channel number
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	019a      	lsls	r2, r3, #6
 8000f22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f26:	631a      	str	r2, [r3, #48]	; 0x30
	if(channel <= 9)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b09      	cmp	r3, #9
 8000f2c:	d80e      	bhi.n	8000f4c <CV_Single_ADC_Init+0x144>
		ADC1->SMPR1 |= (sample_t << (3*channel));	// Set sampling time
 8000f2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f32:	6959      	ldr	r1, [r3, #20]
 8000f34:	79b8      	ldrb	r0, [r7, #6]
 8000f36:	79fa      	ldrb	r2, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	fa00 f303 	lsl.w	r3, r0, r3
 8000f42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f46:	430b      	orrs	r3, r1
 8000f48:	6153      	str	r3, [r2, #20]
 8000f4a:	e00f      	b.n	8000f6c <CV_Single_ADC_Init+0x164>
	else
		ADC1->SMPR2 |= (sample_t << (channel-10)*3);
 8000f4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f50:	6999      	ldr	r1, [r3, #24]
 8000f52:	79b8      	ldrb	r0, [r7, #6]
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f1a3 020a 	sub.w	r2, r3, #10
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	fa00 f303 	lsl.w	r3, r0, r3
 8000f64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6193      	str	r3, [r2, #24]
	ADC1->CR &= ~(1 << 2);							// stop adc conversion
 8000f6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f76:	f023 0304 	bic.w	r3, r3, #4
 8000f7a:	6093      	str	r3, [r2, #8]
	ADC1->CFGR |= 0xEC0;							// Enable external trigger on rising & falling Edge of TIM2_TRGO event
 8000f7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f86:	f443 636c 	orr.w	r3, r3, #3776	; 0xec0
 8000f8a:	60d3      	str	r3, [r2, #12]
    ADC1->SQR1 |= 0x40;
 8000f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
    //ADC1->CALFACT = 80;
	ADC1->IER |= (1 << 2);							// End of regular conversion interrupt enable
 8000f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6053      	str	r3, [r2, #4]
	ADC1->CR |= (1 << 2);							// start adc conversion
 8000fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6093      	str	r3, [r2, #8]
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <IS_Dual_ADC_Init>:
	UART4->BRR = 3750;
	UART4->CR1 |= 0x01;
}

void IS_Dual_ADC_Init(ADC_Channel channel1, ADC_Channel channel2, Sample_Time sample_t, int16_t psc, int32_t arr, uint32_t *adc_dma)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71bb      	strb	r3, [r7, #6]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	717b      	strb	r3, [r7, #5]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	807b      	strh	r3, [r7, #2]
	/*------------------------------- Configure ADC1 ----------------------------------*/


	//RCC->CFGR2 |= 0x100;							// Set ADC12 prescaler to PLL clock divided by 1

	RCC->AHBENR |= 0x20000;							// Enable GPIOA clock
 8000fe6:	4b76      	ldr	r3, [pc, #472]	; (80011c0 <IS_Dual_ADC_Init+0x1f8>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a75      	ldr	r2, [pc, #468]	; (80011c0 <IS_Dual_ADC_Init+0x1f8>)
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	6153      	str	r3, [r2, #20]
	RCC->CFGR2 |= 0x100;							// Set ADC12 prescaler to PLL clock divided by 1
 8000ff2:	4b73      	ldr	r3, [pc, #460]	; (80011c0 <IS_Dual_ADC_Init+0x1f8>)
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	4a72      	ldr	r2, [pc, #456]	; (80011c0 <IS_Dual_ADC_Init+0x1f8>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
	GPIOA->OSPEEDR |= 0b11 << (channel1-1)*2;		// GPIOA channel1 high speed
	GPIOA->MODER |= 0b11 << (channel2-1+4)*2;			// Enable analog mode on GPIOA channel2 pin
	GPIOA->OSPEEDR |= 0b11 << (channel2-1+4)*2;		// GPIOA channel2 high speed
*/

	GPIOA->MODER |= 0x30;  //PA2
 8000ffe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001008:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800100c:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR |= 0x30;
 800100e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001018:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800101c:	6093      	str	r3, [r2, #8]
    //GPIOA->MODER |= 0x03;  //PA0
    //GPIOA->OSPEEDR |= 0x03;
    GPIOA->MODER |= 0x3000;  //PA6
 800101e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001028:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800102c:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR |= 0x3000;
 800102e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001038:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800103c:	6093      	str	r3, [r2, #8]
   //GPIOA->MODER |= 0xC000; // PA7
    //GPIOA->OSPEEDR |= 0xC000;
	RCC->AHBENR |= 0x10000000; 						// Enable ADC12 clock
 800103e:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <IS_Dual_ADC_Init+0x1f8>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a5f      	ldr	r2, [pc, #380]	; (80011c0 <IS_Dual_ADC_Init+0x1f8>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6153      	str	r3, [r2, #20]
	ADC1->CR &= ~0x20000000;
 800104a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001054:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001058:	6093      	str	r3, [r2, #8]
	HAL_Delay(2);
 800105a:	2002      	movs	r0, #2
 800105c:	f002 fb58 	bl	8003710 <HAL_Delay>
	ADC1->CR |= 0x10000000;							// Launch ADC calibration in single ended mode
 8001060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6093      	str	r3, [r2, #8]
	HAL_Delay(10);									// Wait for ADC voltage regulator to get enabled
 8001070:	200a      	movs	r0, #10
 8001072:	f002 fb4d 	bl	8003710 <HAL_Delay>
	ADC1->CR |= 0x80000000;			//				// Start ADC calibration
 8001076:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	6093      	str	r3, [r2, #8]
	while(ADC1->CR & 0x80000000);		//			// wait for ADC calibration to be finished
 8001086:	bf00      	nop
 8001088:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	dbfa      	blt.n	8001088 <IS_Dual_ADC_Init+0xc0>
	ADC1->CR |= 0x01;								// Enable ADC1
 8001092:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6093      	str	r3, [r2, #8]
	while((ADC1->ISR & 0x01) == 0);//
 80010a2:	bf00      	nop
 80010a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f8      	beq.n	80010a4 <IS_Dual_ADC_Init+0xdc>
	//ADC1->SQR1 = (channel1 << 6);					// Set number of conversions to 1 and channel number
	ADC1->CR &= ~(1 << 2);		//					// stop adc conversion
 80010b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	6093      	str	r3, [r2, #8]
	ADC1->SQR1 = (channel1 << 6);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	019a      	lsls	r2, r3, #6
 80010c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010ca:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->CFGR |= 	0X1EC0;		//0x16C0;				// Overrun data overwritten, Enable external trigger on rising Edge of TIM2_TRGO event
 80010cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010d6:	f443 53f6 	orr.w	r3, r3, #7872	; 0x1ec0
 80010da:	60d3      	str	r3, [r2, #12]

	ADC2->CR &= ~0x20000000;
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 80010e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80010e6:	6093      	str	r3, [r2, #8]
	HAL_Delay(2);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f002 fb11 	bl	8003710 <HAL_Delay>
	ADC2->CR |= 0x10000000;							// Launch ADC calibration in single ended mode
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6093      	str	r3, [r2, #8]
	HAL_Delay(10);									// Wait for ADC voltage regulator to get enabled
 80010fa:	200a      	movs	r0, #10
 80010fc:	f002 fb08 	bl	8003710 <HAL_Delay>
	ADC2->CR |= 0x80000000;	//						// Start ADC calibration
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 8001106:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800110a:	6093      	str	r3, [r2, #8]
	while(ADC2->CR & 0x80000000);	//				// wait for ADC calibration to be finished
 800110c:	bf00      	nop
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dbfb      	blt.n	800110e <IS_Dual_ADC_Init+0x146>
	ADC2->CR |= 0x01;								// Enable ADC2
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6093      	str	r3, [r2, #8]
	while((ADC2->ISR & 0x01) == 0); //
 8001122:	bf00      	nop
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f9      	beq.n	8001124 <IS_Dual_ADC_Init+0x15c>
	ADC2->SQR1 = (channel2 << 6);					// Set number of conversions to 1 and channel number
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	019a      	lsls	r2, r3, #6
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
////////// Important //////////////////
	ADC12_COMMON->CCR |= 0x30406; //0x3406; //0x10006;			// Regular simultaneous mode
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <IS_Dual_ADC_Init+0x200>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <IS_Dual_ADC_Init+0x200>)
 800113e:	f443 3341 	orr.w	r3, r3, #197632	; 0x30400
 8001142:	f043 0306 	orr.w	r3, r3, #6
 8001146:	6093      	str	r3, [r2, #8]

	//ADC2->CR |= 0x01;								// Enable ADC2
	/*------------------------------- Configure timer 2 -------------------------------*/
	RCC->APB1ENR |= 0x01;//0x00000001;				// Enable TIM2 clock
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <IS_Dual_ADC_Init+0x1f8>)
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <IS_Dual_ADC_Init+0x1f8>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	61d3      	str	r3, [r2, #28]
		TIM2->CR2 |= 0x20;								// Update event is selected as trigger output ( For ADC external trigger )
 8001154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6053      	str	r3, [r2, #4]
		TIM2->PSC = psc;								// Prescaler value
 8001164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001168:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800116c:	6293      	str	r3, [r2, #40]	; 0x28
		TIM2->ARR = arr;								// Auto reload register
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM2->CR1 |= 0x0004;							// clk_division=0, auto-reload preload disable, upcounter, one-pulse mode disable, counter overflow interrupt, UEV disable, counter disable
 8001176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6013      	str	r3, [r2, #0]

	ADC1->IER |= 0x04;							// End of regular conversion interrupt enable
 8001186:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6053      	str	r3, [r2, #4]
	//ADC1->CR |= 0x01;								// Enable ADC1
	ADC1->CR |=   0x04;   //(1 << 2);							// start adc1 conversion
 8001196:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6093      	str	r3, [r2, #8]
	ADC2->CR |= (1 << 2);							// start adc2 conversion
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <IS_Dual_ADC_Init+0x1fc>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(ADC1_IRQn);
 80011b2:	2012      	movs	r0, #18
 80011b4:	f7ff fd70 	bl	8000c98 <__NVIC_EnableIRQ>

}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	50000100 	.word	0x50000100
 80011c8:	50000300 	.word	0x50000300

080011cc <IS_Dual_DAC_Init>:

/*-------------------------------------------------------------------------------------*
   * 				Dual DAC Configuration
   */
void IS_Dual_DAC_Init(int16_t psc, int32_t arr, uint16_t *ch1_array, uint16_t *ch2_array)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	4603      	mov	r3, r0
 80011da:	81fb      	strh	r3, [r7, #14]
	/*------------------------------- Configure timer 4 -------------------------------*/
	RCC->APB1ENR |= (1 << 2);							// Enable TIM4 clock
 80011dc:	4b49      	ldr	r3, [pc, #292]	; (8001304 <IS_Dual_DAC_Init+0x138>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <IS_Dual_DAC_Init+0x138>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	61d3      	str	r3, [r2, #28]
	TIM4->CR2 |= 0x20;									// Update event is selected as trigger output TRGO event
 80011e8:	4b47      	ldr	r3, [pc, #284]	; (8001308 <IS_Dual_DAC_Init+0x13c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4a46      	ldr	r2, [pc, #280]	; (8001308 <IS_Dual_DAC_Init+0x13c>)
 80011ee:	f043 0320 	orr.w	r3, r3, #32
 80011f2:	6053      	str	r3, [r2, #4]
	TIM4->PSC = psc;									// Prescaler value
 80011f4:	4a44      	ldr	r2, [pc, #272]	; (8001308 <IS_Dual_DAC_Init+0x13c>)
 80011f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fa:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->ARR = arr;									// Auto reload register
 80011fc:	4a42      	ldr	r2, [pc, #264]	; (8001308 <IS_Dual_DAC_Init+0x13c>)
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CR1 |= 0x0004;								// clk_division=0, auto-reload preload disable, upcounter, one-pulse mode disable, counter overflow interrupt, UEV disable
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <IS_Dual_DAC_Init+0x13c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a40      	ldr	r2, [pc, #256]	; (8001308 <IS_Dual_DAC_Init+0x13c>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6013      	str	r3, [r2, #0]

	/*---------------------------- DAC1 CH1 configuration -----------------------------*/
	RCC->APB1ENR |= (1 << 29);							// Enable DAC1 interface clock
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <IS_Dual_DAC_Init+0x138>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a3c      	ldr	r2, [pc, #240]	; (8001304 <IS_Dual_DAC_Init+0x138>)
 8001214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001218:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= (1 << 17); 							// Enable GPIOA clock
 800121a:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <IS_Dual_DAC_Init+0x138>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	4a39      	ldr	r2, [pc, #228]	; (8001304 <IS_Dual_DAC_Init+0x138>)
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	6153      	str	r3, [r2, #20]
	GPIOA->MODER |= 0b11 << (4 * 2);					// Set PA4 as analog
 8001226:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001230:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001234:	6013      	str	r3, [r2, #0]
	DAC1->CR |= 0x2D; //0x3B;							// DAC1 CH1 wave generation disable, CH1 buffered, CH1 enable
 8001236:	4b35      	ldr	r3, [pc, #212]	; (800130c <IS_Dual_DAC_Init+0x140>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a34      	ldr	r2, [pc, #208]	; (800130c <IS_Dual_DAC_Init+0x140>)
 800123c:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8001240:	6013      	str	r3, [r2, #0]

	//DAC1->DHR12RD = (uint16_t)((ch1_array[0]/3.3)*4095);		// Load desired value in 12 bit right aligned data holding register
	/*---------------------------------- Configure DMA --------------------------------*/
	DAC1->CR |= 0x1000;									// Enable DMA
 8001242:	4b32      	ldr	r3, [pc, #200]	; (800130c <IS_Dual_DAC_Init+0x140>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <IS_Dual_DAC_Init+0x140>)
 8001248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800124c:	6013      	str	r3, [r2, #0]
	SYSCFG->CFGR1 |= (1 << 13);							// DAC1 CH1 DMA requests mapped on DMA1 channel 3
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <IS_Dual_DAC_Init+0x144>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <IS_Dual_DAC_Init+0x144>)
 8001254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001258:	6013      	str	r3, [r2, #0]
	RCC->AHBENR |= 0x01;								// Enable DMA1 clock
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <IS_Dual_DAC_Init+0x138>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a29      	ldr	r2, [pc, #164]	; (8001304 <IS_Dual_DAC_Init+0x138>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6153      	str	r3, [r2, #20]
	DMA1_Channel3->CPAR = (uint32_t)(&DAC1->DHR12R1);
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <IS_Dual_DAC_Init+0x148>)
 8001268:	4a2b      	ldr	r2, [pc, #172]	; (8001318 <IS_Dual_DAC_Init+0x14c>)
 800126a:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)ch1_array;
 800126c:	4a29      	ldr	r2, [pc, #164]	; (8001314 <IS_Dual_DAC_Init+0x148>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60d3      	str	r3, [r2, #12]
	DMA1_Channel3->CNDTR = 32;
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <IS_Dual_DAC_Init+0x148>)
 8001274:	2220      	movs	r2, #32
 8001276:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CCR |= 0x25B0;
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <IS_Dual_DAC_Init+0x148>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <IS_Dual_DAC_Init+0x148>)
 800127e:	f443 5316 	orr.w	r3, r3, #9600	; 0x2580
 8001282:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001286:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= 0x01;
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <IS_Dual_DAC_Init+0x148>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a21      	ldr	r2, [pc, #132]	; (8001314 <IS_Dual_DAC_Init+0x148>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]

	/*---------------------------- DAC1 CH2 configuration -----------------------------*/
	GPIOA->MODER |= 0b11 << (5 * 2);					// Set PA5 as analog
 8001294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800129e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80012a2:	6013      	str	r3, [r2, #0]
	DAC1->CR |= (0x2D << 16); //(0x3B << 16);			// DAC1 CH2 wave generation disable, CH2 buffered, CH2 enable
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <IS_Dual_DAC_Init+0x140>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <IS_Dual_DAC_Init+0x140>)
 80012aa:	f443 1334 	orr.w	r3, r3, #2949120	; 0x2d0000
 80012ae:	6013      	str	r3, [r2, #0]
//	DAC1->DHR12RD |= (uint16_t)((volt2/3.3)*4095) << 16;	// Load desired value in 12 bit right aligned data holding register
//	DAC1->DHR12R2 = ch2_array[0];

	/*---------------------------------- Configure DMA --------------------------------*/
	DAC1->CR |= 0x10000000;									// Enable DMA
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <IS_Dual_DAC_Init+0x140>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <IS_Dual_DAC_Init+0x140>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ba:	6013      	str	r3, [r2, #0]
	SYSCFG->CFGR1 |= (1 << 14);							// DAC_CH2 DMA requests mapped on DMA1 channel 4
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <IS_Dual_DAC_Init+0x144>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a13      	ldr	r2, [pc, #76]	; (8001310 <IS_Dual_DAC_Init+0x144>)
 80012c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c6:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CPAR = (uint32_t)(&DAC1->DHR12R2);
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <IS_Dual_DAC_Init+0x150>)
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <IS_Dual_DAC_Init+0x154>)
 80012cc:	609a      	str	r2, [r3, #8]
	DMA1_Channel4->CMAR = (uint32_t)ch2_array;
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <IS_Dual_DAC_Init+0x150>)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	60d3      	str	r3, [r2, #12]
	DMA1_Channel4->CNDTR = 101;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <IS_Dual_DAC_Init+0x150>)
 80012d6:	2265      	movs	r2, #101	; 0x65
 80012d8:	605a      	str	r2, [r3, #4]
	DMA1_Channel4->CCR |= 0x25B0;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <IS_Dual_DAC_Init+0x150>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <IS_Dual_DAC_Init+0x150>)
 80012e0:	f443 5316 	orr.w	r3, r3, #9600	; 0x2580
 80012e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80012e8:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= 0x01;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <IS_Dual_DAC_Init+0x150>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <IS_Dual_DAC_Init+0x150>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6013      	str	r3, [r2, #0]
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	40000800 	.word	0x40000800
 800130c:	40007400 	.word	0x40007400
 8001310:	40010000 	.word	0x40010000
 8001314:	40020030 	.word	0x40020030
 8001318:	40007408 	.word	0x40007408
 800131c:	40020044 	.word	0x40020044
 8001320:	40007414 	.word	0x40007414

08001324 <DPV_Timer3_DAC_Init>:

void DPV_Timer3_DAC_Init(float volt1, float volt2, int16_t psc, int32_t arr)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	ed87 0a03 	vstr	s0, [r7, #12]
 800132e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	80fb      	strh	r3, [r7, #6]
	/*------------------------------- Configure timer 4 -------------------------------*/
			RCC->APB1ENR |= (1 << 2);							// Enable TIM4 clock
 8001338:	4b33      	ldr	r3, [pc, #204]	; (8001408 <DPV_Timer3_DAC_Init+0xe4>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4a32      	ldr	r2, [pc, #200]	; (8001408 <DPV_Timer3_DAC_Init+0xe4>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	61d3      	str	r3, [r2, #28]
			TIM4->CR2 |= 0x20;									// Update event is selected as trigger output TRGO event
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <DPV_Timer3_DAC_Init+0xe8>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a30      	ldr	r2, [pc, #192]	; (800140c <DPV_Timer3_DAC_Init+0xe8>)
 800134a:	f043 0320 	orr.w	r3, r3, #32
 800134e:	6053      	str	r3, [r2, #4]
			TIM4->PSC = psc;									// Prescaler value
 8001350:	4a2e      	ldr	r2, [pc, #184]	; (800140c <DPV_Timer3_DAC_Init+0xe8>)
 8001352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001356:	6293      	str	r3, [r2, #40]	; 0x28
			TIM4->ARR = arr;									// Auto reload register
 8001358:	4a2c      	ldr	r2, [pc, #176]	; (800140c <DPV_Timer3_DAC_Init+0xe8>)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM4->CR1 |= 0x0004;  								// clk_division=0, auto-reload preload disable, upcounter, one-pulse mode disable, counter overflow interrupt, UEV disable
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <DPV_Timer3_DAC_Init+0xe8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a2a      	ldr	r2, [pc, #168]	; (800140c <DPV_Timer3_DAC_Init+0xe8>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6013      	str	r3, [r2, #0]
			TIM4->DIER = 0x0001;								// Update interrupt enable
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <DPV_Timer3_DAC_Init+0xe8>)
 800136c:	2201      	movs	r2, #1
 800136e:	60da      	str	r2, [r3, #12]

			/*---------------------------- DAC1 CH1 configuration -----------------------------*/
			RCC->APB1ENR |= (1 << 29);							// Enable DAC1 interface clock
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <DPV_Timer3_DAC_Init+0xe4>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	4a24      	ldr	r2, [pc, #144]	; (8001408 <DPV_Timer3_DAC_Init+0xe4>)
 8001376:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800137a:	61d3      	str	r3, [r2, #28]
			RCC->AHBENR |= (1 << 17); 							// Enable GPIOA clock
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <DPV_Timer3_DAC_Init+0xe4>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <DPV_Timer3_DAC_Init+0xe4>)
 8001382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001386:	6153      	str	r3, [r2, #20]
			GPIOA->MODER |= 0b11 << (4 * 2);					// Set PA4 as analog
 8001388:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001392:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001396:	6013      	str	r3, [r2, #0]
			DAC1->CR |= 0x2D; //0x3B;							// DAC1 CH1 wave generation disable, CH1 buffered, CH1 enable
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <DPV_Timer3_DAC_Init+0xec>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <DPV_Timer3_DAC_Init+0xec>)
 800139e:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 80013a2:	6013      	str	r3, [r2, #0]
			DAC1->DHR12RD = (uint16_t)(volt1);		// Load desired value in 12 bit right aligned data holding register
 80013a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <DPV_Timer3_DAC_Init+0xec>)
 80013b4:	621a      	str	r2, [r3, #32]

			GPIOA->MODER |= 0b11 << (5 * 2);					// Set PA5 as analog
 80013b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013c0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80013c4:	6013      	str	r3, [r2, #0]
			DAC1->CR |= (0x2D << 16); //(0x3B << 16);			// DAC1 CH2 wave generation disable, CH2 buffered, CH2 enable
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <DPV_Timer3_DAC_Init+0xec>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <DPV_Timer3_DAC_Init+0xec>)
 80013cc:	f443 1334 	orr.w	r3, r3, #2949120	; 0x2d0000
 80013d0:	6013      	str	r3, [r2, #0]
			DAC1->DHR12RD |= (uint16_t)(volt2) << 16;	// Load desired value in 12 bit right aligned data holding register
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <DPV_Timer3_DAC_Init+0xec>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013de:	ee17 2a90 	vmov	r2, s15
 80013e2:	b292      	uxth	r2, r2
 80013e4:	0412      	lsls	r2, r2, #16
 80013e6:	4611      	mov	r1, r2
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <DPV_Timer3_DAC_Init+0xec>)
 80013ea:	430b      	orrs	r3, r1
 80013ec:	6213      	str	r3, [r2, #32]
			TIM4->CR1 |= 0x01;
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <DPV_Timer3_DAC_Init+0xe8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <DPV_Timer3_DAC_Init+0xe8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6013      	str	r3, [r2, #0]


}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	40000800 	.word	0x40000800
 8001410:	40007400 	.word	0x40007400

08001414 <__NVIC_EnableIRQ>:
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <LED_On_GPIO_SetLow>:
  //GPIOD->ODR |= GPIO_Pin;  // Set High
  GPIOx->BSRR = GPIO_Pin; // Set High
}

void LED_On_GPIO_SetLow(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
  GPIOx->BSRR = GPIO_Pin<<16u; // Set Low
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
  //GPIOx->ODR &=~ GPIO_Pin; //  Set Low
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LED_GPIO_Toggle>:

void LED_GPIO_Toggle(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	807b      	strh	r3, [r7, #2]
  GPIOx->ODR ^= GPIO_Pin;  // Toggle PD12,13,14,15
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	405a      	eors	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	615a      	str	r2, [r3, #20]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <CV_Flag_Var_Init>:

void CV_Flag_Var_Init()
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  CVFlag.Start=1;
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <CV_Flag_Var_Init+0xc8>)
 800149e:	2201      	movs	r2, #1
 80014a0:	705a      	strb	r2, [r3, #1]
  CVFlag.RestTime=0;
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <CV_Flag_Var_Init+0xc8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
  CVFlag.Busy = 0;
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <CV_Flag_Var_Init+0xc8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	709a      	strb	r2, [r3, #2]
  CVFlag.Scan = 0;
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <CV_Flag_Var_Init+0xc8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	70da      	strb	r2, [r3, #3]

  CVPar.Estep =CVT.estep*1000 ;  //10
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <CV_Flag_Var_Init+0xcc>)
 80014b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001568 <CV_Flag_Var_Init+0xd0>
 80014be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <CV_Flag_Var_Init+0xd4>)
 80014c4:	edc3 7a02 	vstr	s15, [r3, #8]
  CVPar.ScanRate=CVT.scanrate*1000;  //100 for DVP
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <CV_Flag_Var_Init+0xcc>)
 80014ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ce:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001568 <CV_Flag_Var_Init+0xd0>
 80014d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <CV_Flag_Var_Init+0xd4>)
 80014d8:	edc3 7a03 	vstr	s15, [r3, #12]
  CVPar.Estart = CVT.estart;
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <CV_Flag_Var_Init+0xcc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a22      	ldr	r2, [pc, #136]	; (800156c <CV_Flag_Var_Init+0xd4>)
 80014e2:	6013      	str	r3, [r2, #0]
  CVPar.Estop = CVT.estop;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <CV_Flag_Var_Init+0xcc>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4a20      	ldr	r2, [pc, #128]	; (800156c <CV_Flag_Var_Init+0xd4>)
 80014ea:	6053      	str	r3, [r2, #4]
  CVPar.ScanRate=100;  //100 for DVP
  CVPar.Estart = -0.4;
  CVPar.Estop = 0.7;*/


  CVPar.SWVFreq = SWVT.frequency;
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <CV_Flag_Var_Init+0xd8>)
 80014ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80014f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f6:	ee17 3a90 	vmov	r3, s15
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <CV_Flag_Var_Init+0xd4>)
 80014fe:	821a      	strh	r2, [r3, #16]
  CVPar.SWVAmp = SWVT.amplitude*1000; // in mv 200
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <CV_Flag_Var_Init+0xd8>)
 8001502:	edd3 7a01 	vldr	s15, [r3, #4]
 8001506:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001568 <CV_Flag_Var_Init+0xd0>
 800150a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <CV_Flag_Var_Init+0xd4>)
 8001510:	edc3 7a05 	vstr	s15, [r3, #20]

 /* CVPar.SWVFreq = 10;
  CVPar.SWVAmp = 200; // in mv 200*/

  SWVFlag.Start = 1;
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <CV_Flag_Var_Init+0xdc>)
 8001516:	2201      	movs	r2, #1
 8001518:	705a      	strb	r2, [r3, #1]
  SWVFlag.RestTime = 0;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <CV_Flag_Var_Init+0xdc>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]

  CVPar.DVPPulseON= DPVT.Tpulse*1000;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <CV_Flag_Var_Init+0xe0>)
 8001522:	edd3 7a01 	vldr	s15, [r3, #4]
 8001526:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001568 <CV_Flag_Var_Init+0xd0>
 800152a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <CV_Flag_Var_Init+0xd4>)
 8001530:	edc3 7a06 	vstr	s15, [r3, #24]
  CVPar.DPVAmp=DPVT.amplitude*1000 ;
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <CV_Flag_Var_Init+0xe0>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001568 <CV_Flag_Var_Init+0xd0>
 800153e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <CV_Flag_Var_Init+0xd4>)
 8001544:	edc3 7a07 	vstr	s15, [r3, #28]
  DPVFlag.Start=1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <CV_Flag_Var_Init+0xe4>)
 800154a:	2201      	movs	r2, #1
 800154c:	705a      	strb	r2, [r3, #1]
  DPVFlag.RestTime = 0;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <CV_Flag_Var_Init+0xe4>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20002ae4 	.word	0x20002ae4
 8001564:	20003140 	.word	0x20003140
 8001568:	447a0000 	.word	0x447a0000
 800156c:	200039bc 	.word	0x200039bc
 8001570:	200048a8 	.word	0x200048a8
 8001574:	20000b5c 	.word	0x20000b5c
 8001578:	200048b4 	.word	0x200048b4
 800157c:	20003928 	.word	0x20003928

08001580 <CV_Var_Calculations>:

void CV_Var_Calculations(float Ebegin,float Eend,float Estp, float ScnRt)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	ed87 0a05 	vstr	s0, [r7, #20]
 800158a:	edc7 0a04 	vstr	s1, [r7, #16]
 800158e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001592:	edc7 1a02 	vstr	s3, [r7, #8]
 Estp/=1000;
 8001596:	ed97 7a03 	vldr	s14, [r7, #12]
 800159a:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80017d8 <CV_Var_Calculations+0x258>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	edc7 7a03 	vstr	s15, [r7, #12]
 ScnRt/=1000;
 80015a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80015aa:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80017d8 <CV_Var_Calculations+0x258>
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	edc7 7a02 	vstr	s15, [r7, #8]
 float DigitalEstep;
 uint8_t Temp;
 DigitalEstep = (Estp*4095)/(3.3);
 80015b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ba:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80017dc <CV_Var_Calculations+0x25c>
 80015be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c2:	ee17 0a90 	vmov	r0, s15
 80015c6:	f7fe ffc7 	bl	8000558 <__aeabi_f2d>
 80015ca:	a37b      	add	r3, pc, #492	; (adr r3, 80017b8 <CV_Var_Calculations+0x238>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f944 	bl	800085c <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fb0c 	bl	8000bf8 <__aeabi_d2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
 Temp = (uint8_t) (DigitalEstep);
 80015e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80015f0:	793b      	ldrb	r3, [r7, #4]
 80015f2:	77fb      	strb	r3, [r7, #31]
 if((DigitalEstep-Temp)>0.5) Temp +=1;
 80015f4:	7ffb      	ldrb	r3, [r7, #31]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001606:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800160a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	dd02      	ble.n	800161a <CV_Var_Calculations+0x9a>
 8001614:	7ffb      	ldrb	r3, [r7, #31]
 8001616:	3301      	adds	r3, #1
 8001618:	77fb      	strb	r3, [r7, #31]

 CVVar.DigitalEstep = Temp;
 800161a:	7ffb      	ldrb	r3, [r7, #31]
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <CV_Var_Calculations+0x260>)
 8001620:	819a      	strh	r2, [r3, #12]
 CVPar.Estart = Ebegin + 1.5;
 8001622:	edd7 7a05 	vldr	s15, [r7, #20]
 8001626:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800162a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800162e:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <CV_Var_Calculations+0x264>)
 8001630:	edc3 7a00 	vstr	s15, [r3]
 CVPar.Estop = Eend + 1.5;
 8001634:	edd7 7a04 	vldr	s15, [r7, #16]
 8001638:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800163c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001640:	4b68      	ldr	r3, [pc, #416]	; (80017e4 <CV_Var_Calculations+0x264>)
 8001642:	edc3 7a01 	vstr	s15, [r3, #4]
 CVVar.DigitalEstart = (CVPar.Estart/3.3)*4095;
 8001646:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <CV_Var_Calculations+0x264>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff84 	bl	8000558 <__aeabi_f2d>
 8001650:	a359      	add	r3, pc, #356	; (adr r3, 80017b8 <CV_Var_Calculations+0x238>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7ff f901 	bl	800085c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	a357      	add	r3, pc, #348	; (adr r3, 80017c0 <CV_Var_Calculations+0x240>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffce 	bl	8000608 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff fa78 	bl	8000b68 <__aeabi_d2iz>
 8001678:	4603      	mov	r3, r0
 800167a:	b21a      	sxth	r2, r3
 800167c:	4b58      	ldr	r3, [pc, #352]	; (80017e0 <CV_Var_Calculations+0x260>)
 800167e:	859a      	strh	r2, [r3, #44]	; 0x2c
 CVVar.DigitalEstop = (CVPar.Estop/3.3)*4095;
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <CV_Var_Calculations+0x264>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff67 	bl	8000558 <__aeabi_f2d>
 800168a:	a34b      	add	r3, pc, #300	; (adr r3, 80017b8 <CV_Var_Calculations+0x238>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7ff f8e4 	bl	800085c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	a348      	add	r3, pc, #288	; (adr r3, 80017c0 <CV_Var_Calculations+0x240>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe ffb1 	bl	8000608 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fa5b 	bl	8000b68 <__aeabi_d2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <CV_Var_Calculations+0x260>)
 80016b8:	85da      	strh	r2, [r3, #46]	; 0x2e

 CVVar.NumPoints = ((CVVar.DigitalEstop - CVVar.DigitalEstart)/(CVVar.DigitalEstep))+1;
 80016ba:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <CV_Var_Calculations+0x260>)
 80016bc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <CV_Var_Calculations+0x260>)
 80016c4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <CV_Var_Calculations+0x260>)
 80016cc:	8992      	ldrh	r2, [r2, #12]
 80016ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80016d2:	3301      	adds	r3, #1
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b42      	ldr	r3, [pc, #264]	; (80017e0 <CV_Var_Calculations+0x260>)
 80016d8:	601a      	str	r2, [r3, #0]
 CVVar.TotalPoints = 2*CVVar.NumPoints;
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <CV_Var_Calculations+0x260>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4a3f      	ldr	r2, [pc, #252]	; (80017e0 <CV_Var_Calculations+0x260>)
 80016e2:	6053      	str	r3, [r2, #4]
 CVVar.TimefromEstartToEstop = (float) ((Eend - Ebegin)/(ScnRt));
 80016e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80016e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <CV_Var_Calculations+0x260>)
 80016fa:	edc3 7a02 	vstr	s15, [r3, #8]
 CVVar.TimePerPoint = CVVar.TimefromEstartToEstop/CVVar.NumPoints;
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <CV_Var_Calculations+0x260>)
 8001700:	edd3 6a02 	vldr	s13, [r3, #8]
 8001704:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <CV_Var_Calculations+0x260>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <CV_Var_Calculations+0x260>)
 8001716:	edc3 7a04 	vstr	s15, [r3, #16]
 CVVar.Tim4Value =  (CVVar.TimePerPoint *(CV_TIM_Clk/CV_TIM4_PS)) - 1;
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <CV_Var_Calculations+0x260>)
 800171c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001720:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80017e8 <CV_Var_Calculations+0x268>
 8001724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800172c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001734:	ee17 3a90 	vmov	r3, s15
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <CV_Var_Calculations+0x260>)
 800173c:	829a      	strh	r2, [r3, #20]
 CVVar.TimeFor100Samples = (CVVar.TimePerPoint*95.0/100)/CV_ADC_Avg_Sample;
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <CV_Var_Calculations+0x260>)
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff08 	bl	8000558 <__aeabi_f2d>
 8001748:	a31f      	add	r3, pc, #124	; (adr r3, 80017c8 <CV_Var_Calculations+0x248>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe ff5b 	bl	8000608 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <CV_Var_Calculations+0x26c>)
 8001760:	f7ff f87c 	bl	800085c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	a318      	add	r3, pc, #96	; (adr r3, 80017d0 <CV_Var_Calculations+0x250>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7ff f873 	bl	800085c <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa3b 	bl	8000bf8 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <CV_Var_Calculations+0x260>)
 8001786:	6193      	str	r3, [r2, #24]
 CVVar.ADCTim2Value =  ((CVVar.TimeFor100Samples*CV_TIM_Clk)-1);
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <CV_Var_Calculations+0x260>)
 800178a:	edd3 7a06 	vldr	s15, [r3, #24]
 800178e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80017f0 <CV_Var_Calculations+0x270>
 8001792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800179a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800179e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a2:	ee17 2a90 	vmov	r2, s15
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <CV_Var_Calculations+0x260>)
 80017a8:	61da      	str	r2, [r3, #28]
}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	f3af 8000 	nop.w
 80017b8:	66666666 	.word	0x66666666
 80017bc:	400a6666 	.word	0x400a6666
 80017c0:	00000000 	.word	0x00000000
 80017c4:	40affe00 	.word	0x40affe00
 80017c8:	00000000 	.word	0x00000000
 80017cc:	4057c000 	.word	0x4057c000
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40795000 	.word	0x40795000
 80017d8:	447a0000 	.word	0x447a0000
 80017dc:	457ff000 	.word	0x457ff000
 80017e0:	20004214 	.word	0x20004214
 80017e4:	200039bc 	.word	0x200039bc
 80017e8:	47c35000 	.word	0x47c35000
 80017ec:	40590000 	.word	0x40590000
 80017f0:	4c895440 	.word	0x4c895440

080017f4 <CV_Start>:
void CV_Start()
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af02      	add	r7, sp, #8
  if(CVFlag.Start)
 80017fa:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <CV_Start+0xdc>)
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d04f      	beq.n	80018a2 <CV_Start+0xae>
  {
	CV_Var_Calculations(CVPar.Estart,CVPar.Estop,CVPar.Estep,CVPar.ScanRate);
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <CV_Start+0xe0>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <CV_Start+0xe0>)
 800180a:	ed93 7a01 	vldr	s14, [r3, #4]
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <CV_Start+0xe0>)
 8001810:	edd3 6a02 	vldr	s13, [r3, #8]
 8001814:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <CV_Start+0xe0>)
 8001816:	ed93 6a03 	vldr	s12, [r3, #12]
 800181a:	eef0 1a46 	vmov.f32	s3, s12
 800181e:	eeb0 1a66 	vmov.f32	s2, s13
 8001822:	eef0 0a47 	vmov.f32	s1, s14
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	f7ff fea9 	bl	8001580 <CV_Var_Calculations>
	CVFlag.Start=0;
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <CV_Start+0xdc>)
 8001830:	2200      	movs	r2, #0
 8001832:	705a      	strb	r2, [r3, #1]
	CVFlag.Increment=1;
 8001834:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <CV_Start+0xdc>)
 8001836:	2201      	movs	r2, #1
 8001838:	711a      	strb	r2, [r3, #4]
	CV_Dual_DAC_Init(CVVar.DigitalEstart-CVVar.DigitalEstep,1865, CV_TIM4_PS-1, CVVar.Tim4Value);
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <CV_Start+0xe4>)
 800183c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001840:	461a      	mov	r2, r3
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <CV_Start+0xe4>)
 8001844:	899b      	ldrh	r3, [r3, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <CV_Start+0xe4>)
 8001852:	8a9b      	ldrh	r3, [r3, #20]
 8001854:	4619      	mov	r1, r3
 8001856:	f240 20cf 	movw	r0, #719	; 0x2cf
 800185a:	eddf 0a20 	vldr	s1, [pc, #128]	; 80018dc <CV_Start+0xe8>
 800185e:	eeb0 0a67 	vmov.f32	s0, s15
 8001862:	f7ff fa59 	bl	8000d18 <CV_Dual_DAC_Init>
	CV_Single_ADC_Init(ADC_CHANNEL__1, ADC_1_CLOCK_CYCLE_5, 0, CVVar.ADCTim2Value , CVVar.ADC_Read);
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <CV_Start+0xe4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	461a      	mov	r2, r3
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <CV_Start+0xec>)
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	4613      	mov	r3, r2
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2001      	movs	r0, #1
 8001878:	f7ff fac6 	bl	8000e08 <CV_Single_ADC_Init>
	NVIC_EnableIRQ(TIM4_IRQn);
 800187c:	201e      	movs	r0, #30
 800187e:	f7ff fdc9 	bl	8001414 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ADC1_IRQn);
 8001882:	2012      	movs	r0, #18
 8001884:	f7ff fdc6 	bl	8001414 <__NVIC_EnableIRQ>
	HAL_Delay(5000);                        // Starting Rest Time in msec.
 8001888:	f241 3088 	movw	r0, #5000	; 0x1388
 800188c:	f001 ff40 	bl	8003710 <HAL_Delay>
	CVFlag.Scan = 1;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <CV_Start+0xdc>)
 8001892:	2201      	movs	r2, #1
 8001894:	70da      	strb	r2, [r3, #3]
	TIM4->CR1 |= 0x01;						// Enable TIM4
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <CV_Start+0xf0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <CV_Start+0xf0>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6013      	str	r3, [r2, #0]
  }
  if(CVFlag.RestTime)
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <CV_Start+0xdc>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00e      	beq.n	80018c8 <CV_Start+0xd4>
  {
	HAL_Delay(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f001 ff30 	bl	8003710 <HAL_Delay>
	CVFlag.Scan = 1;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <CV_Start+0xdc>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	70da      	strb	r2, [r3, #3]
	CVFlag.RestTime = 0;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <CV_Start+0xdc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
	TIM4->CR1 |= 0x01;						// Enable TIM4
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <CV_Start+0xf0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <CV_Start+0xf0>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]
  }
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20002ae4 	.word	0x20002ae4
 80018d4:	200039bc 	.word	0x200039bc
 80018d8:	20004214 	.word	0x20004214
 80018dc:	44e92000 	.word	0x44e92000
 80018e0:	20004244 	.word	0x20004244
 80018e4:	40000800 	.word	0x40000800

080018e8 <SWV_Var_Calculations>:

void SWV_Var_Calculations(float Ebegin,float Eend,float Estp, uint16_t Freq, float Amp)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80018f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80018f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80018fa:	4603      	mov	r3, r0
 80018fc:	edc7 1a01 	vstr	s3, [r7, #4]
 8001900:	817b      	strh	r3, [r7, #10]
 Amp /= 1000; // in v
 8001902:	ed97 7a01 	vldr	s14, [r7, #4]
 8001906:	eddf 6ac6 	vldr	s13, [pc, #792]	; 8001c20 <SWV_Var_Calculations+0x338>
 800190a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190e:	edc7 7a01 	vstr	s15, [r7, #4]
 CVVar.SWV_DAC_LowerLimit = (uint16_t) 1865-(4095*Amp/(3.3*2));
 8001912:	edd7 7a01 	vldr	s15, [r7, #4]
 8001916:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001c24 <SWV_Var_Calculations+0x33c>
 800191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191e:	ee17 0a90 	vmov	r0, s15
 8001922:	f7fe fe19 	bl	8000558 <__aeabi_f2d>
 8001926:	a3b2      	add	r3, pc, #712	; (adr r3, 8001bf0 <SWV_Var_Calculations+0x308>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe ff96 	bl	800085c <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	a1b0      	add	r1, pc, #704	; (adr r1, 8001bf8 <SWV_Var_Calculations+0x310>)
 8001936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800193a:	f7fe fcad 	bl	8000298 <__aeabi_dsub>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f937 	bl	8000bb8 <__aeabi_d2uiz>
 800194a:	4603      	mov	r3, r0
 800194c:	b29a      	uxth	r2, r3
 800194e:	4bb6      	ldr	r3, [pc, #728]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001950:	f8a3 2686 	strh.w	r2, [r3, #1670]	; 0x686
 CVVar.SWC_DAC_UpperLimit = (uint16_t) 1865+(4095*Amp/(3.3*2));
 8001954:	edd7 7a01 	vldr	s15, [r7, #4]
 8001958:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001c24 <SWV_Var_Calculations+0x33c>
 800195c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001960:	ee17 0a90 	vmov	r0, s15
 8001964:	f7fe fdf8 	bl	8000558 <__aeabi_f2d>
 8001968:	a3a1      	add	r3, pc, #644	; (adr r3, 8001bf0 <SWV_Var_Calculations+0x308>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe ff75 	bl	800085c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	a39f      	add	r3, pc, #636	; (adr r3, 8001bf8 <SWV_Var_Calculations+0x310>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fc8c 	bl	800029c <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f914 	bl	8000bb8 <__aeabi_d2uiz>
 8001990:	4603      	mov	r3, r0
 8001992:	b29a      	uxth	r2, r3
 8001994:	4ba4      	ldr	r3, [pc, #656]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001996:	f8a3 2688 	strh.w	r2, [r3, #1672]	; 0x688
 Estp/=1000;
 800199a:	ed97 7a03 	vldr	s14, [r7, #12]
 800199e:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8001c20 <SWV_Var_Calculations+0x338>
 80019a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a6:	edc7 7a03 	vstr	s15, [r7, #12]
 float DigitalEstep;
 uint8_t Temp;
 DigitalEstep = (Estp*4095)/(3.3);
 80019aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ae:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001c24 <SWV_Var_Calculations+0x33c>
 80019b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b6:	ee17 0a90 	vmov	r0, s15
 80019ba:	f7fe fdcd 	bl	8000558 <__aeabi_f2d>
 80019be:	a390      	add	r3, pc, #576	; (adr r3, 8001c00 <SWV_Var_Calculations+0x318>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe ff4a 	bl	800085c <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f912 	bl	8000bf8 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
 Temp = (uint8_t) (DigitalEstep);
 80019d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e0:	edc7 7a00 	vstr	s15, [r7]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 if((DigitalEstep-Temp)>0.5) Temp +=1;
 80019ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	dd04      	ble.n	8001a16 <SWV_Var_Calculations+0x12e>
 8001a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a10:	3301      	adds	r3, #1
 8001a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

 CVVar.DigitalEstep = Temp;
 8001a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b82      	ldr	r3, [pc, #520]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001a1e:	819a      	strh	r2, [r3, #12]
 CVPar.Estart = Ebegin + 1.5;
 8001a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a24:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001a28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a2c:	4b7f      	ldr	r3, [pc, #508]	; (8001c2c <SWV_Var_Calculations+0x344>)
 8001a2e:	edc3 7a00 	vstr	s15, [r3]
 CVPar.Estop = Eend + 1.5;
 8001a32:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a36:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001a3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a3e:	4b7b      	ldr	r3, [pc, #492]	; (8001c2c <SWV_Var_Calculations+0x344>)
 8001a40:	edc3 7a01 	vstr	s15, [r3, #4]
 CVVar.DigitalEstart = CVPar.Estart/3.3*4095;
 8001a44:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <SWV_Var_Calculations+0x344>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd85 	bl	8000558 <__aeabi_f2d>
 8001a4e:	a36c      	add	r3, pc, #432	; (adr r3, 8001c00 <SWV_Var_Calculations+0x318>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe ff02 	bl	800085c <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	a369      	add	r3, pc, #420	; (adr r3, 8001c08 <SWV_Var_Calculations+0x320>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fdcf 	bl	8000608 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f879 	bl	8000b68 <__aeabi_d2iz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	4b6b      	ldr	r3, [pc, #428]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001a7c:	859a      	strh	r2, [r3, #44]	; 0x2c
 CVVar.DigitalEstop = CVPar.Estop/3.3*4095;
 8001a7e:	4b6b      	ldr	r3, [pc, #428]	; (8001c2c <SWV_Var_Calculations+0x344>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd68 	bl	8000558 <__aeabi_f2d>
 8001a88:	a35d      	add	r3, pc, #372	; (adr r3, 8001c00 <SWV_Var_Calculations+0x318>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fee5 	bl	800085c <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	a35b      	add	r3, pc, #364	; (adr r3, 8001c08 <SWV_Var_Calculations+0x320>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fdb2 	bl	8000608 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f85c 	bl	8000b68 <__aeabi_d2iz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001ab6:	85da      	strh	r2, [r3, #46]	; 0x2e

 CVVar.NumPoints = ((CVVar.DigitalEstop - CVVar.DigitalEstart)/(CVVar.DigitalEstep))+1;
 8001ab8:	4b5b      	ldr	r3, [pc, #364]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001aba:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001ac2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4a57      	ldr	r2, [pc, #348]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001aca:	8992      	ldrh	r2, [r2, #12]
 8001acc:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b54      	ldr	r3, [pc, #336]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001ad6:	601a      	str	r2, [r3, #0]
 CVVar.TotalPoints = 2*CVVar.NumPoints;
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001ae0:	6053      	str	r3, [r2, #4]
 float t_5pr=0; float t_half_SWV=0; uint16_t TempFreq=0;
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
 8001aee:	2300      	movs	r3, #0
 8001af0:	83fb      	strh	r3, [r7, #30]
 TempFreq= Freq*2;
 8001af2:	897b      	ldrh	r3, [r7, #10]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	83fb      	strh	r3, [r7, #30]
 t_half_SWV = (float) 1/TempFreq;
 8001af8:	8bfb      	ldrh	r3, [r7, #30]
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0a:	edc7 7a08 	vstr	s15, [r7, #32]
 CVVar.Tim4Value =  (CV_TIM_Clk / (Freq*2*(CV_TIM4_PS)))-1;
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	4a45      	ldr	r2, [pc, #276]	; (8001c30 <SWV_Var_Calculations+0x348>)
 8001b1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001b26:	829a      	strh	r2, [r3, #20]

 t_5pr =  (0.05*t_half_SWV);
 8001b28:	6a38      	ldr	r0, [r7, #32]
 8001b2a:	f7fe fd15 	bl	8000558 <__aeabi_f2d>
 8001b2e:	a338      	add	r3, pc, #224	; (adr r3, 8001c10 <SWV_Var_Calculations+0x328>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fd68 	bl	8000608 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f85a 	bl	8000bf8 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 CVVar.TimePerPoint = (float) (t_5pr/(CV_ADC_Avg_Sample-5));
 8001b48:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b4c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001c34 <SWV_Var_Calculations+0x34c>
 8001b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001b56:	edc3 7a04 	vstr	s15, [r3, #16]
 float f_adc_ARR = CV_TIM_Clk * CVVar.TimePerPoint * (95.0/100);
 8001b5a:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001b5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b60:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001c38 <SWV_Var_Calculations+0x350>
 8001b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b68:	ee17 0a90 	vmov	r0, s15
 8001b6c:	f7fe fcf4 	bl	8000558 <__aeabi_f2d>
 8001b70:	a329      	add	r3, pc, #164	; (adr r3, 8001c18 <SWV_Var_Calculations+0x330>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe fd47 	bl	8000608 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7ff f839 	bl	8000bf8 <__aeabi_d2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	61bb      	str	r3, [r7, #24]
 CVVar.ADCTim2Value = (uint32_t)f_adc_ARR;
 8001b8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b92:	ee17 2a90 	vmov	r2, s15
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001b98:	61da      	str	r2, [r3, #28]
 if(f_adc_ARR - CVVar.ADCTim2Value > 0.5) CVVar.ADCTim2Value++;
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	dd04      	ble.n	8001bc6 <SWV_Var_Calculations+0x2de>
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001bc4:	61d3      	str	r3, [r2, #28]
 CVVar.SWV_ADCSamples = (uint16_t)(t_half_SWV/CVVar.TimePerPoint);
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001bc8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bcc:	edd7 6a08 	vldr	s13, [r7, #32]
 8001bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd8:	ee17 3a90 	vmov	r3, s15
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <SWV_Var_Calculations+0x340>)
 8001be0:	f8a3 2684 	strh.w	r2, [r3, #1668]	; 0x684
}
 8001be4:	bf00      	nop
 8001be6:	3730      	adds	r7, #48	; 0x30
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	f3af 8000 	nop.w
 8001bf0:	66666666 	.word	0x66666666
 8001bf4:	401a6666 	.word	0x401a6666
 8001bf8:	00000000 	.word	0x00000000
 8001bfc:	409d2400 	.word	0x409d2400
 8001c00:	66666666 	.word	0x66666666
 8001c04:	400a6666 	.word	0x400a6666
 8001c08:	00000000 	.word	0x00000000
 8001c0c:	40affe00 	.word	0x40affe00
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	3fa99999 	.word	0x3fa99999
 8001c18:	66666666 	.word	0x66666666
 8001c1c:	3fee6666 	.word	0x3fee6666
 8001c20:	447a0000 	.word	0x447a0000
 8001c24:	457ff000 	.word	0x457ff000
 8001c28:	20004214 	.word	0x20004214
 8001c2c:	200039bc 	.word	0x200039bc
 8001c30:	044aa200 	.word	0x044aa200
 8001c34:	43c80000 	.word	0x43c80000
 8001c38:	4c895440 	.word	0x4c895440

08001c3c <SWV_Start>:
void SWV_Start()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af02      	add	r7, sp, #8
  if(SWVFlag.Start)
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <SWV_Start+0xec>)
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d057      	beq.n	8001cfa <SWV_Start+0xbe>
  {
	SWV_Var_Calculations(CVPar.Estart,CVPar.Estop,CVPar.Estep,CVPar.SWVFreq,CVPar.SWVAmp); //CVPar.SWVFreq
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <SWV_Start+0xf0>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <SWV_Start+0xf0>)
 8001c52:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <SWV_Start+0xf0>)
 8001c58:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <SWV_Start+0xf0>)
 8001c5e:	8a1b      	ldrh	r3, [r3, #16]
 8001c60:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <SWV_Start+0xf0>)
 8001c62:	ed92 6a05 	vldr	s12, [r2, #20]
 8001c66:	eef0 1a46 	vmov.f32	s3, s12
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	eeb0 1a66 	vmov.f32	s2, s13
 8001c70:	eef0 0a47 	vmov.f32	s1, s14
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	f7ff fe36 	bl	80018e8 <SWV_Var_Calculations>
	SWVFlag.Start=0;
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <SWV_Start+0xec>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	705a      	strb	r2, [r3, #1]
	CV_Dual_DAC_Init(CVVar.DigitalEstart-CVVar.DigitalEstep,CVVar.DigitalEstart, CV_TIM4_PS-1, CVVar.Tim4Value);
 8001c82:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <SWV_Start+0xf4>)
 8001c84:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <SWV_Start+0xf4>)
 8001c8c:	899b      	ldrh	r3, [r3, #12]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <SWV_Start+0xf4>)
 8001c9a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001c9e:	ee07 3a10 	vmov	s14, r3
 8001ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ca6:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <SWV_Start+0xf4>)
 8001ca8:	8a9b      	ldrh	r3, [r3, #20]
 8001caa:	4619      	mov	r1, r3
 8001cac:	f240 20cf 	movw	r0, #719	; 0x2cf
 8001cb0:	eef0 0a47 	vmov.f32	s1, s14
 8001cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb8:	f7ff f82e 	bl	8000d18 <CV_Dual_DAC_Init>
	CV_Single_ADC_Init(ADC_CHANNEL__1, ADC_1_CLOCK_CYCLE_5, 0, CVVar.ADCTim2Value-1, CVVar.ADC_Read);
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <SWV_Start+0xf4>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <SWV_Start+0xf8>)
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff f89a 	bl	8000e08 <CV_Single_ADC_Init>
	NVIC_EnableIRQ(TIM4_IRQn);
 8001cd4:	201e      	movs	r0, #30
 8001cd6:	f7ff fb9d 	bl	8001414 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ADC1_IRQn);
 8001cda:	2012      	movs	r0, #18
 8001cdc:	f7ff fb9a 	bl	8001414 <__NVIC_EnableIRQ>
	HAL_Delay(5000);                        // Starting Rest Time in msec.
 8001ce0:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ce4:	f001 fd14 	bl	8003710 <HAL_Delay>
	SWVFlag.Scan = 1;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <SWV_Start+0xec>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	70da      	strb	r2, [r3, #3]
	TIM4->CR1 |= 0x01;						// Enable TIM4
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <SWV_Start+0xfc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <SWV_Start+0xfc>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6013      	str	r3, [r2, #0]
  }
  if(SWVFlag.RestTime)
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <SWV_Start+0xec>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00e      	beq.n	8001d20 <SWV_Start+0xe4>
  {
	HAL_Delay(1);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f001 fd04 	bl	8003710 <HAL_Delay>
	SWVFlag.Scan = 1;
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <SWV_Start+0xec>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	70da      	strb	r2, [r3, #3]
	SWVFlag.RestTime = 0;
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <SWV_Start+0xec>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
	TIM4->CR1 |= 0x01;						// Enable TIM4
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <SWV_Start+0xfc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <SWV_Start+0xfc>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]
  }
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000b5c 	.word	0x20000b5c
 8001d2c:	200039bc 	.word	0x200039bc
 8001d30:	20004214 	.word	0x20004214
 8001d34:	20004244 	.word	0x20004244
 8001d38:	40000800 	.word	0x40000800

08001d3c <EIS_FIR_filter>:
		 TIM4->CR1 |=0x01;
	 }
}*/

void EIS_FIR_filter(float *real, float *imaginary, int length_data)
{
 8001d3c:	b5b0      	push	{r4, r5, r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]

int count=0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=1;i<length_data;i++)
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d50:	e07f      	b.n	8001e52 <EIS_FIR_filter+0x116>
	{
		real_filtered_data[0]= 0.5*real[0];
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	4b9e      	ldr	r3, [pc, #632]	; (8001fdc <EIS_FIR_filter+0x2a0>)
 8001d62:	edc3 7a00 	vstr	s15, [r3]
		real_filtered_data[i] = 0.5*real[i] + 0.5*real[i-1];
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbf1 	bl	8000558 <__aeabi_f2d>
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <EIS_FIR_filter+0x2a4>)
 8001d7c:	f7fe fc44 	bl	8000608 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4413      	add	r3, r2
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbdd 	bl	8000558 <__aeabi_f2d>
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b8f      	ldr	r3, [pc, #572]	; (8001fe0 <EIS_FIR_filter+0x2a4>)
 8001da4:	f7fe fc30 	bl	8000608 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4620      	mov	r0, r4
 8001dae:	4629      	mov	r1, r5
 8001db0:	f7fe fa74 	bl	800029c <__adddf3>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe ff1c 	bl	8000bf8 <__aeabi_d2f>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4986      	ldr	r1, [pc, #536]	; (8001fdc <EIS_FIR_filter+0x2a0>)
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	601a      	str	r2, [r3, #0]

		imaginary_filtered_data[0]= 0.5*imaginary[0];
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dda:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <EIS_FIR_filter+0x2a8>)
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
		imaginary_filtered_data[i] = 0.5*imaginary[i] + 0.5*imaginary[i-1];
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	4413      	add	r3, r2
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbb4 	bl	8000558 <__aeabi_f2d>
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <EIS_FIR_filter+0x2a4>)
 8001df6:	f7fe fc07 	bl	8000608 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4614      	mov	r4, r2
 8001e00:	461d      	mov	r5, r3
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fba0 	bl	8000558 <__aeabi_f2d>
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <EIS_FIR_filter+0x2a4>)
 8001e1e:	f7fe fbf3 	bl	8000608 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fa37 	bl	800029c <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fedf 	bl	8000bf8 <__aeabi_d2f>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4969      	ldr	r1, [pc, #420]	; (8001fe4 <EIS_FIR_filter+0x2a8>)
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	601a      	str	r2, [r3, #0]
		count=count+1;
 8001e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e48:	3301      	adds	r3, #1
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=1;i<length_data;i++)
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	3301      	adds	r3, #1
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
 8001e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	f6ff af7b 	blt.w	8001d52 <EIS_FIR_filter+0x16>
	}
	for(int j=0;j<length_data;j=j+1)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e60:	e019      	b.n	8001e96 <EIS_FIR_filter+0x15a>
		{
			real_reverse_filtered_data[j] = real_filtered_data[count];
 8001e62:	4a5e      	ldr	r2, [pc, #376]	; (8001fdc <EIS_FIR_filter+0x2a0>)
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	495e      	ldr	r1, [pc, #376]	; (8001fe8 <EIS_FIR_filter+0x2ac>)
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	601a      	str	r2, [r3, #0]
			imaginary_reverse_filtered_data[j] = imaginary_filtered_data[count];
 8001e76:	4a5b      	ldr	r2, [pc, #364]	; (8001fe4 <EIS_FIR_filter+0x2a8>)
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	495a      	ldr	r1, [pc, #360]	; (8001fec <EIS_FIR_filter+0x2b0>)
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	601a      	str	r2, [r3, #0]
			count=count-1;
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
	for(int j=0;j<length_data;j=j+1)
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	3301      	adds	r3, #1
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dbe1      	blt.n	8001e62 <EIS_FIR_filter+0x126>

		}
	count=0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=1;i<length_data;i++)
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea6:	e06f      	b.n	8001f88 <EIS_FIR_filter+0x24c>
		{
			real_filtered_data[0]= real_reverse_filtered_data[0];
 8001ea8:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <EIS_FIR_filter+0x2ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a4b      	ldr	r2, [pc, #300]	; (8001fdc <EIS_FIR_filter+0x2a0>)
 8001eae:	6013      	str	r3, [r2, #0]
			real_filtered_data[i] = 0.5*real_reverse_filtered_data[i] + 0.5*real_reverse_filtered_data[i-1];
 8001eb0:	4a4d      	ldr	r2, [pc, #308]	; (8001fe8 <EIS_FIR_filter+0x2ac>)
 8001eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb4c 	bl	8000558 <__aeabi_f2d>
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <EIS_FIR_filter+0x2a4>)
 8001ec6:	f7fe fb9f 	bl	8000608 <__aeabi_dmul>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4614      	mov	r4, r2
 8001ed0:	461d      	mov	r5, r3
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	4a44      	ldr	r2, [pc, #272]	; (8001fe8 <EIS_FIR_filter+0x2ac>)
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb3a 	bl	8000558 <__aeabi_f2d>
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <EIS_FIR_filter+0x2a4>)
 8001eea:	f7fe fb8d 	bl	8000608 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	f7fe f9d1 	bl	800029c <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7fe fe79 	bl	8000bf8 <__aeabi_d2f>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4934      	ldr	r1, [pc, #208]	; (8001fdc <EIS_FIR_filter+0x2a0>)
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	601a      	str	r2, [r3, #0]

			imaginary_filtered_data[0]= imaginary_reverse_filtered_data[0];
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <EIS_FIR_filter+0x2b0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a33      	ldr	r2, [pc, #204]	; (8001fe4 <EIS_FIR_filter+0x2a8>)
 8001f18:	6013      	str	r3, [r2, #0]
			imaginary_filtered_data[i] = 0.5*imaginary_reverse_filtered_data[i] + 0.5*imaginary_reverse_filtered_data[i-1];
 8001f1a:	4a34      	ldr	r2, [pc, #208]	; (8001fec <EIS_FIR_filter+0x2b0>)
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fb17 	bl	8000558 <__aeabi_f2d>
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <EIS_FIR_filter+0x2a4>)
 8001f30:	f7fe fb6a 	bl	8000608 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4614      	mov	r4, r2
 8001f3a:	461d      	mov	r5, r3
 8001f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <EIS_FIR_filter+0x2b0>)
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fb05 	bl	8000558 <__aeabi_f2d>
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <EIS_FIR_filter+0x2a4>)
 8001f54:	f7fe fb58 	bl	8000608 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	f7fe f99c 	bl	800029c <__adddf3>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fe44 	bl	8000bf8 <__aeabi_d2f>
 8001f70:	4602      	mov	r2, r0
 8001f72:	491c      	ldr	r1, [pc, #112]	; (8001fe4 <EIS_FIR_filter+0x2a8>)
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	601a      	str	r2, [r3, #0]

			count=count+1;
 8001f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7e:	3301      	adds	r3, #1
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=1;i<length_data;i++)
 8001f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f84:	3301      	adds	r3, #1
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	db8b      	blt.n	8001ea8 <EIS_FIR_filter+0x16c>
		}
	for(int i=0;i<length_data;i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	e019      	b.n	8001fca <EIS_FIR_filter+0x28e>
			{
				real_reverse_filtered_data[i] = real_filtered_data[count];
 8001f96:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <EIS_FIR_filter+0x2a0>)
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4911      	ldr	r1, [pc, #68]	; (8001fe8 <EIS_FIR_filter+0x2ac>)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	601a      	str	r2, [r3, #0]
				imaginary_reverse_filtered_data[i] = imaginary_filtered_data[count];
 8001faa:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <EIS_FIR_filter+0x2a8>)
 8001fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	490d      	ldr	r1, [pc, #52]	; (8001fec <EIS_FIR_filter+0x2b0>)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	601a      	str	r2, [r3, #0]
				count=count-1;
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0;i<length_data;i++)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	dbe1      	blt.n	8001f96 <EIS_FIR_filter+0x25a>

			}
	count=0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=1;i<length_data;i++)
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	e07f      	b.n	80020dc <EIS_FIR_filter+0x3a0>
 8001fdc:	200049a0 	.word	0x200049a0
 8001fe0:	3fe00000 	.word	0x3fe00000
 8001fe4:	20003158 	.word	0x20003158
 8001fe8:	20003a44 	.word	0x20003a44
 8001fec:	20001374 	.word	0x20001374
		{
			real_filtered_data[0]= 0.5*real_reverse_filtered_data[0];
 8001ff0:	4b9c      	ldr	r3, [pc, #624]	; (8002264 <EIS_FIR_filter+0x528>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffe:	4b9a      	ldr	r3, [pc, #616]	; (8002268 <EIS_FIR_filter+0x52c>)
 8002000:	edc3 7a00 	vstr	s15, [r3]
			real_filtered_data[i] = 0.5*real_reverse_filtered_data[i] + 0.5*real_reverse_filtered_data[i-1];
 8002004:	4a97      	ldr	r2, [pc, #604]	; (8002264 <EIS_FIR_filter+0x528>)
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe faa2 	bl	8000558 <__aeabi_f2d>
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	4b94      	ldr	r3, [pc, #592]	; (800226c <EIS_FIR_filter+0x530>)
 800201a:	f7fe faf5 	bl	8000608 <__aeabi_dmul>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	3b01      	subs	r3, #1
 800202a:	4a8e      	ldr	r2, [pc, #568]	; (8002264 <EIS_FIR_filter+0x528>)
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fa90 	bl	8000558 <__aeabi_f2d>
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	4b8b      	ldr	r3, [pc, #556]	; (800226c <EIS_FIR_filter+0x530>)
 800203e:	f7fe fae3 	bl	8000608 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4620      	mov	r0, r4
 8002048:	4629      	mov	r1, r5
 800204a:	f7fe f927 	bl	800029c <__adddf3>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fdcf 	bl	8000bf8 <__aeabi_d2f>
 800205a:	4602      	mov	r2, r0
 800205c:	4982      	ldr	r1, [pc, #520]	; (8002268 <EIS_FIR_filter+0x52c>)
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	601a      	str	r2, [r3, #0]

			imaginary_filtered_data[0]= imaginary_reverse_filtered_data[0];
 8002066:	4b82      	ldr	r3, [pc, #520]	; (8002270 <EIS_FIR_filter+0x534>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a82      	ldr	r2, [pc, #520]	; (8002274 <EIS_FIR_filter+0x538>)
 800206c:	6013      	str	r3, [r2, #0]
			imaginary_filtered_data[i] = 0.5*imaginary_reverse_filtered_data[i] + 0.5*imaginary_reverse_filtered_data[i-1];
 800206e:	4a80      	ldr	r2, [pc, #512]	; (8002270 <EIS_FIR_filter+0x534>)
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa6d 	bl	8000558 <__aeabi_f2d>
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b7a      	ldr	r3, [pc, #488]	; (800226c <EIS_FIR_filter+0x530>)
 8002084:	f7fe fac0 	bl	8000608 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4614      	mov	r4, r2
 800208e:	461d      	mov	r5, r3
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	3b01      	subs	r3, #1
 8002094:	4a76      	ldr	r2, [pc, #472]	; (8002270 <EIS_FIR_filter+0x534>)
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa5b 	bl	8000558 <__aeabi_f2d>
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	4b71      	ldr	r3, [pc, #452]	; (800226c <EIS_FIR_filter+0x530>)
 80020a8:	f7fe faae 	bl	8000608 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4620      	mov	r0, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	f7fe f8f2 	bl	800029c <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f7fe fd9a 	bl	8000bf8 <__aeabi_d2f>
 80020c4:	4602      	mov	r2, r0
 80020c6:	496b      	ldr	r1, [pc, #428]	; (8002274 <EIS_FIR_filter+0x538>)
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	601a      	str	r2, [r3, #0]

			count=count+1;
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	3301      	adds	r3, #1
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=1;i<length_data;i++)
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	3301      	adds	r3, #1
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	6a3a      	ldr	r2, [r7, #32]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	db85      	blt.n	8001ff0 <EIS_FIR_filter+0x2b4>
		}
	for(int i=0;i<length_data;i++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	e019      	b.n	800211e <EIS_FIR_filter+0x3e2>
				{
					real_reverse_filtered_data[i] = real_filtered_data[count];
 80020ea:	4a5f      	ldr	r2, [pc, #380]	; (8002268 <EIS_FIR_filter+0x52c>)
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	495b      	ldr	r1, [pc, #364]	; (8002264 <EIS_FIR_filter+0x528>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	601a      	str	r2, [r3, #0]
					imaginary_reverse_filtered_data[i] = imaginary_filtered_data[count];
 80020fe:	4a5d      	ldr	r2, [pc, #372]	; (8002274 <EIS_FIR_filter+0x538>)
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4959      	ldr	r1, [pc, #356]	; (8002270 <EIS_FIR_filter+0x534>)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	601a      	str	r2, [r3, #0]
					count=count-1;
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002114:	3b01      	subs	r3, #1
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0;i<length_data;i++)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3301      	adds	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	dbe1      	blt.n	80020ea <EIS_FIR_filter+0x3ae>

				}
	count=0;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=1;i<length_data;i++)
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	e06f      	b.n	8002210 <EIS_FIR_filter+0x4d4>
		{
			real_filtered_data[0]= real_reverse_filtered_data[0];
 8002130:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <EIS_FIR_filter+0x528>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4c      	ldr	r2, [pc, #304]	; (8002268 <EIS_FIR_filter+0x52c>)
 8002136:	6013      	str	r3, [r2, #0]
			real_filtered_data[i] = 0.5*real_reverse_filtered_data[i] + 0.5*real_reverse_filtered_data[i-1];
 8002138:	4a4a      	ldr	r2, [pc, #296]	; (8002264 <EIS_FIR_filter+0x528>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa08 	bl	8000558 <__aeabi_f2d>
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	4b47      	ldr	r3, [pc, #284]	; (800226c <EIS_FIR_filter+0x530>)
 800214e:	f7fe fa5b 	bl	8000608 <__aeabi_dmul>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4614      	mov	r4, r2
 8002158:	461d      	mov	r5, r3
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	3b01      	subs	r3, #1
 800215e:	4a41      	ldr	r2, [pc, #260]	; (8002264 <EIS_FIR_filter+0x528>)
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f9f6 	bl	8000558 <__aeabi_f2d>
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b3e      	ldr	r3, [pc, #248]	; (800226c <EIS_FIR_filter+0x530>)
 8002172:	f7fe fa49 	bl	8000608 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4620      	mov	r0, r4
 800217c:	4629      	mov	r1, r5
 800217e:	f7fe f88d 	bl	800029c <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fd35 	bl	8000bf8 <__aeabi_d2f>
 800218e:	4602      	mov	r2, r0
 8002190:	4935      	ldr	r1, [pc, #212]	; (8002268 <EIS_FIR_filter+0x52c>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	601a      	str	r2, [r3, #0]

			imaginary_filtered_data[0]= imaginary_reverse_filtered_data[0];
 800219a:	4b35      	ldr	r3, [pc, #212]	; (8002270 <EIS_FIR_filter+0x534>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a35      	ldr	r2, [pc, #212]	; (8002274 <EIS_FIR_filter+0x538>)
 80021a0:	6013      	str	r3, [r2, #0]
			imaginary_filtered_data[i] = 0.5*imaginary_reverse_filtered_data[i] + 0.5*imaginary_reverse_filtered_data[i-1];
 80021a2:	4a33      	ldr	r2, [pc, #204]	; (8002270 <EIS_FIR_filter+0x534>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d3 	bl	8000558 <__aeabi_f2d>
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <EIS_FIR_filter+0x530>)
 80021b8:	f7fe fa26 	bl	8000608 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4614      	mov	r4, r2
 80021c2:	461d      	mov	r5, r3
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	4a29      	ldr	r2, [pc, #164]	; (8002270 <EIS_FIR_filter+0x534>)
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9c1 	bl	8000558 <__aeabi_f2d>
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <EIS_FIR_filter+0x530>)
 80021dc:	f7fe fa14 	bl	8000608 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4620      	mov	r0, r4
 80021e6:	4629      	mov	r1, r5
 80021e8:	f7fe f858 	bl	800029c <__adddf3>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fd00 	bl	8000bf8 <__aeabi_d2f>
 80021f8:	4602      	mov	r2, r0
 80021fa:	491e      	ldr	r1, [pc, #120]	; (8002274 <EIS_FIR_filter+0x538>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	601a      	str	r2, [r3, #0]

			count=count+1;
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002206:	3301      	adds	r3, #1
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=1;i<length_data;i++)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	3301      	adds	r3, #1
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	db8b      	blt.n	8002130 <EIS_FIR_filter+0x3f4>
		}
	for(int i=0;i<length_data;i++)
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e019      	b.n	8002252 <EIS_FIR_filter+0x516>
			{
				real_reverse_filtered_data[i] = real_filtered_data[count];
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <EIS_FIR_filter+0x52c>)
 8002220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <EIS_FIR_filter+0x528>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	601a      	str	r2, [r3, #0]
				imaginary_reverse_filtered_data[i] = imaginary_filtered_data[count];
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <EIS_FIR_filter+0x538>)
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <EIS_FIR_filter+0x534>)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	601a      	str	r2, [r3, #0]
				count=count-1;
 8002246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002248:	3b01      	subs	r3, #1
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0;i<length_data;i++)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3301      	adds	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	dbe1      	blt.n	800221e <EIS_FIR_filter+0x4e2>
			}
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	3738      	adds	r7, #56	; 0x38
 8002260:	46bd      	mov	sp, r7
 8002262:	bdb0      	pop	{r4, r5, r7, pc}
 8002264:	20003a44 	.word	0x20003a44
 8002268:	200049a0 	.word	0x200049a0
 800226c:	3fe00000 	.word	0x3fe00000
 8002270:	20001374 	.word	0x20001374
 8002274:	20003158 	.word	0x20003158

08002278 <Sin_Gen>:
#define High_DAC_RANGE 1.815
#define DAC_STEP  0.02 */


void Sin_Gen()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	ed2d 8b02 	vpush	{d8}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
	// generate Look Up Table
  	for (int i=0; i< DAC_SineSample; i++)
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	e061      	b.n	800234c <Sin_Gen+0xd4>
  	{
  		input_voltage=(IST.eac/1000);
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <Sin_Gen+0xf8>)
 800228a:	ed93 7a01 	vldr	s14, [r3, #4]
 800228e:	eddf 6a39 	vldr	s13, [pc, #228]	; 8002374 <Sin_Gen+0xfc>
 8002292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <Sin_Gen+0x100>)
 8002298:	edc3 7a00 	vstr	s15, [r3]
  		input_voltage=input_voltage*2*sqrt(2);
 800229c:	4b36      	ldr	r3, [pc, #216]	; (8002378 <Sin_Gen+0x100>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022a6:	ee17 0a90 	vmov	r0, s15
 80022aa:	f7fe f955 	bl	8000558 <__aeabi_f2d>
 80022ae:	a32c      	add	r3, pc, #176	; (adr r3, 8002360 <Sin_Gen+0xe8>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fe f9a8 	bl	8000608 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fc9a 	bl	8000bf8 <__aeabi_d2f>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <Sin_Gen+0x100>)
 80022c8:	6013      	str	r3, [r2, #0]
  	  sine_amplitude=(uint16_t)((input_voltage*4095)/(3.3));
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <Sin_Gen+0x100>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800237c <Sin_Gen+0x104>
 80022d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d8:	ee17 0a90 	vmov	r0, s15
 80022dc:	f7fe f93c 	bl	8000558 <__aeabi_f2d>
 80022e0:	a321      	add	r3, pc, #132	; (adr r3, 8002368 <Sin_Gen+0xf0>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fe fab9 	bl	800085c <__aeabi_ddiv>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f7fe fc61 	bl	8000bb8 <__aeabi_d2uiz>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <Sin_Gen+0x108>)
 80022fc:	801a      	strh	r2, [r3, #0]
  	  Sine_Lut[i] = (uint16_t)((sine_amplitude*sinf(((2*PI)/DAC_SineSample)*i))+1865); //  0.5sinwt  + 1.65
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <Sin_Gen+0x108>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002314:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002384 <Sin_Gen+0x10c>
 8002318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231c:	eeb0 0a67 	vmov.f32	s0, s15
 8002320:	f009 fc78 	bl	800bc14 <sinf>
 8002324:	eef0 7a40 	vmov.f32	s15, s0
 8002328:	ee68 7a27 	vmul.f32	s15, s16, s15
 800232c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002388 <Sin_Gen+0x110>
 8002330:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002338:	ee17 3a90 	vmov	r3, s15
 800233c:	b299      	uxth	r1, r3
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <Sin_Gen+0x114>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	for (int i=0; i< DAC_SineSample; i++)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3301      	adds	r3, #1
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b1f      	cmp	r3, #31
 8002350:	dd9a      	ble.n	8002288 <Sin_Gen+0x10>
  	}
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	ecbd 8b02 	vpop	{d8}
 800235e:	bd80      	pop	{r7, pc}
 8002360:	667f3bcd 	.word	0x667f3bcd
 8002364:	3ff6a09e 	.word	0x3ff6a09e
 8002368:	66666666 	.word	0x66666666
 800236c:	400a6666 	.word	0x400a6666
 8002370:	200048bc 	.word	0x200048bc
 8002374:	447a0000 	.word	0x447a0000
 8002378:	200039dc 	.word	0x200039dc
 800237c:	457ff000 	.word	0x457ff000
 8002380:	20000238 	.word	0x20000238
 8002384:	3e490fdb 	.word	0x3e490fdb
 8002388:	44e92000 	.word	0x44e92000
 800238c:	20000b64 	.word	0x20000b64

08002390 <adc_timer_update>:
void adc_timer_update(uint32_t alias_freq)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	float a = alias_freq*IS_NoOfSamples;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023aa:	edc7 7a03 	vstr	s15, [r7, #12]
	a = (CV_TIM_Clk/(IS_Prescaler))/a;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <adc_timer_update+0x74>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <adc_timer_update+0x78>)
 80023b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80023c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ca:	edc7 7a03 	vstr	s15, [r7, #12]
	a = a*IS_NoOfPeriods;
 80023ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80023d2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800240c <adc_timer_update+0x7c>
 80023d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023da:	edc7 7a03 	vstr	s15, [r7, #12]
	TIM2->ARR = (uint32_t)(a-1);
 80023de:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f2:	ee17 2a90 	vmov	r2, s15
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM2->CR1 |= 0x01;
//	TIM2->ARR = (uint32_t)((RCC_FREQ/(alias_freq*n_samples))*n_period)-1;
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	20000000 	.word	0x20000000
 8002408:	044aa200 	.word	0x044aa200
 800240c:	42480000 	.word	0x42480000

08002410 <dac_timer_update>:
void dac_timer_update(uint32_t freq)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	TIM4->ARR = (uint16_t)((CV_TIM_Clk/(IS_Prescaler*DAC_SineSample*freq))-1);			// Update dac timer value for new frequency
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <dac_timer_update+0x40>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	fb03 f302 	mul.w	r3, r3, r2
 8002424:	015b      	lsls	r3, r3, #5
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <dac_timer_update+0x44>)
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <dac_timer_update+0x48>)
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CR1 |= 0x01;									// counter enable
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <dac_timer_update+0x48>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a07      	ldr	r2, [pc, #28]	; (8002458 <dac_timer_update+0x48>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6013      	str	r3, [r2, #0]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000000 	.word	0x20000000
 8002454:	044aa200 	.word	0x044aa200
 8002458:	40000800 	.word	0x40000800
 800245c:	00000000 	.word	0x00000000

08002460 <IS_Var_Calculations>:
void IS_Var_Calculations(float Ebegin,float Eend,float Estp)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	ed87 0a03 	vstr	s0, [r7, #12]
 800246a:	edc7 0a02 	vstr	s1, [r7, #8]
 800246e:	ed87 1a01 	vstr	s2, [r7, #4]
 Estp/=1000;
 8002472:	ed97 7a01 	vldr	s14, [r7, #4]
 8002476:	eddf 6aac 	vldr	s13, [pc, #688]	; 8002728 <IS_Var_Calculations+0x2c8>
 800247a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800247e:	edc7 7a01 	vstr	s15, [r7, #4]
 CVVar.NumPoints = ((Eend - Ebegin)/Estp)+1;
 8002482:	ed97 7a02 	vldr	s14, [r7, #8]
 8002486:	edd7 7a03 	vldr	s15, [r7, #12]
 800248a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800248e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800249a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800249e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a2:	ee17 2a90 	vmov	r2, s15
 80024a6:	4ba1      	ldr	r3, [pc, #644]	; (800272c <IS_Var_Calculations+0x2cc>)
 80024a8:	601a      	str	r2, [r3, #0]
 CVPar.Estart = Ebegin + 1.5;
 80024aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ae:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80024b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b6:	4b9e      	ldr	r3, [pc, #632]	; (8002730 <IS_Var_Calculations+0x2d0>)
 80024b8:	edc3 7a00 	vstr	s15, [r3]
 CVPar.Estop = Eend + 1.5;
 80024bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80024c0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80024c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c8:	4b99      	ldr	r3, [pc, #612]	; (8002730 <IS_Var_Calculations+0x2d0>)
 80024ca:	edc3 7a01 	vstr	s15, [r3, #4]
 CVVar.DigitalEstart = CVPar.Estart/3.3*4095;
 80024ce:	4b98      	ldr	r3, [pc, #608]	; (8002730 <IS_Var_Calculations+0x2d0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f840 	bl	8000558 <__aeabi_f2d>
 80024d8:	a38f      	add	r3, pc, #572	; (adr r3, 8002718 <IS_Var_Calculations+0x2b8>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fe f9bd 	bl	800085c <__aeabi_ddiv>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	a38d      	add	r3, pc, #564	; (adr r3, 8002720 <IS_Var_Calculations+0x2c0>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f88a 	bl	8000608 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe fb34 	bl	8000b68 <__aeabi_d2iz>
 8002500:	4603      	mov	r3, r0
 8002502:	b21a      	sxth	r2, r3
 8002504:	4b89      	ldr	r3, [pc, #548]	; (800272c <IS_Var_Calculations+0x2cc>)
 8002506:	859a      	strh	r2, [r3, #44]	; 0x2c
 CVVar.DigitalEstop = CVPar.Estop/3.3*4095;
 8002508:	4b89      	ldr	r3, [pc, #548]	; (8002730 <IS_Var_Calculations+0x2d0>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f823 	bl	8000558 <__aeabi_f2d>
 8002512:	a381      	add	r3, pc, #516	; (adr r3, 8002718 <IS_Var_Calculations+0x2b8>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f9a0 	bl	800085c <__aeabi_ddiv>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	a37e      	add	r3, pc, #504	; (adr r3, 8002720 <IS_Var_Calculations+0x2c0>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f86d 	bl	8000608 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f7fe fb17 	bl	8000b68 <__aeabi_d2iz>
 800253a:	4603      	mov	r3, r0
 800253c:	b21a      	sxth	r2, r3
 800253e:	4b7b      	ldr	r3, [pc, #492]	; (800272c <IS_Var_Calculations+0x2cc>)
 8002540:	85da      	strh	r2, [r3, #46]	; 0x2e

 float DigitalEstep;
 uint8_t Temp;
 DigitalEstep = (Estp*4095)/(3.3);
 8002542:	edd7 7a01 	vldr	s15, [r7, #4]
 8002546:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002734 <IS_Var_Calculations+0x2d4>
 800254a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254e:	ee17 0a90 	vmov	r0, s15
 8002552:	f7fe f801 	bl	8000558 <__aeabi_f2d>
 8002556:	a370      	add	r3, pc, #448	; (adr r3, 8002718 <IS_Var_Calculations+0x2b8>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f7fe f97e 	bl	800085c <__aeabi_ddiv>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fb46 	bl	8000bf8 <__aeabi_d2f>
 800256c:	4603      	mov	r3, r0
 800256e:	617b      	str	r3, [r7, #20]
 Temp = (uint8_t) (DigitalEstep);
 8002570:	edd7 7a05 	vldr	s15, [r7, #20]
 8002574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002578:	edc7 7a00 	vstr	s15, [r7]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 if((DigitalEstep-Temp)>0.5) Temp +=1;
 8002582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800258e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002596:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800259a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	dd04      	ble.n	80025ae <IS_Var_Calculations+0x14e>
 80025a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025a8:	3301      	adds	r3, #1
 80025aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 CVVar.DigitalEstep = Temp;
 80025ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b5d      	ldr	r3, [pc, #372]	; (800272c <IS_Var_Calculations+0x2cc>)
 80025b6:	819a      	strh	r2, [r3, #12]

 ////// Populate Arrays for DC Potential ////////////////////////
 //DC_List_Adress = (float *) malloc(CVVar.NumPoints * sizeof(float));
 //DC_List = DC_List_Adress;
 DC_List = (uint16_t *)  malloc((CVVar.NumPoints+1) * sizeof(uint16_t));
 80025b8:	4b5c      	ldr	r3, [pc, #368]	; (800272c <IS_Var_Calculations+0x2cc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f006 fadf 	bl	8008b84 <malloc>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b5b      	ldr	r3, [pc, #364]	; (8002738 <IS_Var_Calculations+0x2d8>)
 80025cc:	601a      	str	r2, [r3, #0]
 (*DC_List) = (uint16_t) CVVar.DigitalEstart;
 80025ce:	4b57      	ldr	r3, [pc, #348]	; (800272c <IS_Var_Calculations+0x2cc>)
 80025d0:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80025d4:	4b58      	ldr	r3, [pc, #352]	; (8002738 <IS_Var_Calculations+0x2d8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b292      	uxth	r2, r2
 80025da:	801a      	strh	r2, [r3, #0]
 int DFTCount_i;
 for( DFTCount_i=0; DFTCount_i<101; DFTCount_i++)
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
 80025e0:	e008      	b.n	80025f4 <IS_Var_Calculations+0x194>
 {
  if(Frequency_List[DFTCount_i] == 0) break;
 80025e2:	4a56      	ldr	r2, [pc, #344]	; (800273c <IS_Var_Calculations+0x2dc>)
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <IS_Var_Calculations+0x19c>
 for( DFTCount_i=0; DFTCount_i<101; DFTCount_i++)
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	3301      	adds	r3, #1
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	ddf3      	ble.n	80025e2 <IS_Var_Calculations+0x182>
 80025fa:	e000      	b.n	80025fe <IS_Var_Calculations+0x19e>
  if(Frequency_List[DFTCount_i] == 0) break;
 80025fc:	bf00      	nop
 }
 DFTCount=DFTCount_i*CVVar.NumPoints;
 80025fe:	4b4b      	ldr	r3, [pc, #300]	; (800272c <IS_Var_Calculations+0x2cc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b29a      	uxth	r2, r3
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	b29b      	uxth	r3, r3
 8002608:	fb12 f303 	smulbb	r3, r2, r3
 800260c:	b29a      	uxth	r2, r3
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <IS_Var_Calculations+0x2e0>)
 8002610:	801a      	strh	r2, [r3, #0]
 if(CVVar.NumPoints>1)
 8002612:	4b46      	ldr	r3, [pc, #280]	; (800272c <IS_Var_Calculations+0x2cc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d91b      	bls.n	8002652 <IS_Var_Calculations+0x1f2>
 {
  for(int i=1;i<CVVar.NumPoints;i++)        // DC_List[i] = DC_List[i-1] + CVVar.DigitalEstep;
 800261a:	2301      	movs	r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e013      	b.n	8002648 <IS_Var_Calculations+0x1e8>
	  //DC_List_Adress++;
	  //DC_List = DC_List_Adress;
	  //float *Temp;
	 // Temp = DC_List_Adress-4;
	  uint16_t TempVal;
	  TempVal = *DC_List;
 8002620:	4b45      	ldr	r3, [pc, #276]	; (8002738 <IS_Var_Calculations+0x2d8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	827b      	strh	r3, [r7, #18]
	  DC_List = DC_List+2;
 8002628:	4b43      	ldr	r3, [pc, #268]	; (8002738 <IS_Var_Calculations+0x2d8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3304      	adds	r3, #4
 800262e:	4a42      	ldr	r2, [pc, #264]	; (8002738 <IS_Var_Calculations+0x2d8>)
 8002630:	6013      	str	r3, [r2, #0]
	  (*DC_List) = (TempVal) + CVVar.DigitalEstep;
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <IS_Var_Calculations+0x2cc>)
 8002634:	8999      	ldrh	r1, [r3, #12]
 8002636:	4b40      	ldr	r3, [pc, #256]	; (8002738 <IS_Var_Calculations+0x2d8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	8a7a      	ldrh	r2, [r7, #18]
 800263c:	440a      	add	r2, r1
 800263e:	b292      	uxth	r2, r2
 8002640:	801a      	strh	r2, [r3, #0]
  for(int i=1;i<CVVar.NumPoints;i++)        // DC_List[i] = DC_List[i-1] + CVVar.DigitalEstep;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <IS_Var_Calculations+0x2cc>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	429a      	cmp	r2, r3
 8002650:	d8e6      	bhi.n	8002620 <IS_Var_Calculations+0x1c0>
  }
 }
 DC_List = DC_List - ((CVVar.NumPoints-1) * sizeof(uint16_t));
 8002652:	4b39      	ldr	r3, [pc, #228]	; (8002738 <IS_Var_Calculations+0x2d8>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <IS_Var_Calculations+0x2cc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3b01      	subs	r3, #1
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	425b      	negs	r3, r3
 8002660:	4413      	add	r3, r2
 8002662:	4a35      	ldr	r2, [pc, #212]	; (8002738 <IS_Var_Calculations+0x2d8>)
 8002664:	6013      	str	r3, [r2, #0]
 for(int i=0;i<IS_MaxNoOfSineFreq;i++)DCPtnl_array[i] =  *(DC_List + DCPtnl_Count);
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	e00d      	b.n	8002688 <IS_Var_Calculations+0x228>
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <IS_Var_Calculations+0x2d8>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <IS_Var_Calculations+0x2e4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	8819      	ldrh	r1, [r3, #0]
 800267a:	4a33      	ldr	r2, [pc, #204]	; (8002748 <IS_Var_Calculations+0x2e8>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	3301      	adds	r3, #1
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	ddee      	ble.n	800266c <IS_Var_Calculations+0x20c>
 if(DCPtnl_Count < CVVar.NumPoints)DCPtnl_Count++;
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <IS_Var_Calculations+0x2e4>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <IS_Var_Calculations+0x2cc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d205      	bcs.n	80026a8 <IS_Var_Calculations+0x248>
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <IS_Var_Calculations+0x2e4>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <IS_Var_Calculations+0x2e4>)
 80026a6:	701a      	strb	r2, [r3, #0]
 if(Frequency_List[Freq_Count]<=40)
 80026a8:	4b28      	ldr	r3, [pc, #160]	; (800274c <IS_Var_Calculations+0x2ec>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <IS_Var_Calculations+0x2dc>)
 80026b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80026b4:	2b28      	cmp	r3, #40	; 0x28
 80026b6:	d802      	bhi.n	80026be <IS_Var_Calculations+0x25e>
 {
   IS_Prescaler=72;
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <IS_Var_Calculations+0x2f0>)
 80026ba:	2248      	movs	r2, #72	; 0x48
 80026bc:	801a      	strh	r2, [r3, #0]
 }
 CVVar.ADCTim2Value = (uint32_t)((CV_TIM_Clk/(IS_Prescaler*Frequency_List[0]*IS_NoOfSamples))*IS_NoOfPeriods)-1;
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <IS_Var_Calculations+0x2f0>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <IS_Var_Calculations+0x2dc>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	fb03 f302 	mul.w	r3, r3, r2
 80026cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <IS_Var_Calculations+0x2f4>)
 80026d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80026da:	2232      	movs	r2, #50	; 0x32
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <IS_Var_Calculations+0x2cc>)
 80026e4:	61d3      	str	r3, [r2, #28]
 CVVar.Tim4Value=(CV_TIM_Clk/(IS_Prescaler*DAC_SineSample*Frequency_List[Freq_Count]))-1;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <IS_Var_Calculations+0x2f0>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <IS_Var_Calculations+0x2ec>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <IS_Var_Calculations+0x2dc>)
 80026f4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80026f8:	fb03 f302 	mul.w	r3, r3, r2
 80026fc:	015b      	lsls	r3, r3, #5
 80026fe:	4a15      	ldr	r2, [pc, #84]	; (8002754 <IS_Var_Calculations+0x2f4>)
 8002700:	fb92 f3f3 	sdiv	r3, r2, r3
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <IS_Var_Calculations+0x2cc>)
 800270c:	829a      	strh	r2, [r3, #20]

////////////////////////////////////////////////////////////////
}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	; 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	66666666 	.word	0x66666666
 800271c:	400a6666 	.word	0x400a6666
 8002720:	00000000 	.word	0x00000000
 8002724:	40affe00 	.word	0x40affe00
 8002728:	447a0000 	.word	0x447a0000
 800272c:	20004214 	.word	0x20004214
 8002730:	200039bc 	.word	0x200039bc
 8002734:	457ff000 	.word	0x457ff000
 8002738:	20000240 	.word	0x20000240
 800273c:	20005178 	.word	0x20005178
 8002740:	20000210 	.word	0x20000210
 8002744:	2000020c 	.word	0x2000020c
 8002748:	200048d4 	.word	0x200048d4
 800274c:	2000020d 	.word	0x2000020d
 8002750:	20000000 	.word	0x20000000
 8002754:	044aa200 	.word	0x044aa200

08002758 <IS_Start>:
void IS_Start()
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af02      	add	r7, sp, #8
 IS_Var_Calculations(0,0,5);
 800275e:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8002762:	eddf 0a23 	vldr	s1, [pc, #140]	; 80027f0 <IS_Start+0x98>
 8002766:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80027f0 <IS_Start+0x98>
 800276a:	f7ff fe79 	bl	8002460 <IS_Var_Calculations>
 ISFlag.Scan =1;
 800276e:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <IS_Start+0x9c>)
 8002770:	2201      	movs	r2, #1
 8002772:	70da      	strb	r2, [r3, #3]
 Sin_Gen();
 8002774:	f7ff fd80 	bl	8002278 <Sin_Gen>
 IS_Dual_DAC_Init(IS_Prescaler-1, CVVar.Tim4Value, Sine_Lut, DCPtnl_array);
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <IS_Start+0xa0>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	b29b      	uxth	r3, r3
 8002780:	b218      	sxth	r0, r3
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <IS_Start+0xa4>)
 8002784:	8a9b      	ldrh	r3, [r3, #20]
 8002786:	4619      	mov	r1, r3
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <IS_Start+0xa8>)
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <IS_Start+0xac>)
 800278c:	f7fe fd1e 	bl	80011cc <IS_Dual_DAC_Init>
 TIM4->CR1 |= 0x01;									// counter enable
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <IS_Start+0xb0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <IS_Start+0xb0>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]
 HAL_Delay(2500);
 800279c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80027a0:	f000 ffb6 	bl	8003710 <HAL_Delay>
 IS_Dual_ADC_Init(ADC_CHANNEL__3, ADC_CHANNEL__3, ADC_1_CLOCK_CYCLE_5, IS_Prescaler-1,0, IS_ADC_Read);
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <IS_Start+0xa0>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <IS_Start+0xb4>)
 80027b0:	9201      	str	r2, [sp, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	9200      	str	r2, [sp, #0]
 80027b6:	2200      	movs	r2, #0
 80027b8:	2103      	movs	r1, #3
 80027ba:	2003      	movs	r0, #3
 80027bc:	f7fe fc04 	bl	8000fc8 <IS_Dual_ADC_Init>
 adc_timer_update(Frequency_List[Freq_Count++]);
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <IS_Start+0xb8>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	b2d1      	uxtb	r1, r2
 80027c8:	4a11      	ldr	r2, [pc, #68]	; (8002810 <IS_Start+0xb8>)
 80027ca:	7011      	strb	r1, [r2, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <IS_Start+0xbc>)
 80027d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fddb 	bl	8002390 <adc_timer_update>

 TIM2->CR1 |= 0x01;
 80027da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6013      	str	r3, [r2, #0]
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	00000000 	.word	0x00000000
 80027f4:	20003930 	.word	0x20003930
 80027f8:	20000000 	.word	0x20000000
 80027fc:	20004214 	.word	0x20004214
 8002800:	200048d4 	.word	0x200048d4
 8002804:	20000b64 	.word	0x20000b64
 8002808:	40000800 	.word	0x40000800
 800280c:	20001b44 	.word	0x20001b44
 8002810:	2000020d 	.word	0x2000020d
 8002814:	20005178 	.word	0x20005178

08002818 <compute_dft>:

struct DFT_Result compute_dft(uint16_t *ReadVolt_Freq1, uint16_t* ReadCurr_Freq1, uint8_t period, uint16_t NSamples)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b09e      	sub	sp, #120	; 0x78
 800281c:	af00      	add	r7, sp, #0
 800281e:	6178      	str	r0, [r7, #20]
 8002820:	6139      	str	r1, [r7, #16]
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	460b      	mov	r3, r1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	4613      	mov	r3, r2
 800282c:	81bb      	strh	r3, [r7, #12]
	float VRef = 3.3;
 800282e:	4bda      	ldr	r3, [pc, #872]	; (8002b98 <compute_dft+0x380>)
 8002830:	663b      	str	r3, [r7, #96]	; 0x60
	int16_t MaxAmp = 4095;
 8002832:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002836:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	struct DFT_Result results;

	float RealSum_Volt_Freq1 = 0;
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	677b      	str	r3, [r7, #116]	; 0x74
	float RealSum_Curr_Freq1 = 0;
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	673b      	str	r3, [r7, #112]	; 0x70
	float ImgSum_Volt_Freq1 = 0;
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	66fb      	str	r3, [r7, #108]	; 0x6c
	float ImgSum_Curr_Freq1 = 0;
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	66bb      	str	r3, [r7, #104]	; 0x68
	for(uint16_t n=0; n<NSamples; n++)
 8002852:	2300      	movs	r3, #0
 8002854:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002858:	e0f8      	b.n	8002a4c <compute_dft+0x234>
	{
		float TempCos, TempSin;
		TempCos = arm_cos_f32(2*PI*n*period/NSamples);
 800285a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002866:	ed9f 7acd 	vldr	s14, [pc, #820]	; 8002b9c <compute_dft+0x384>
 800286a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800287c:	89bb      	ldrh	r3, [r7, #12]
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002886:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800288a:	eeb0 0a66 	vmov.f32	s0, s13
 800288e:	f006 f90f 	bl	8008ab0 <arm_cos_f32>
 8002892:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		TempSin = arm_sin_f32(2*PI*n*period/NSamples);
 8002896:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a2:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002b9c <compute_dft+0x384>
 80028a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b8:	89bb      	ldrh	r3, [r7, #12]
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028c6:	eeb0 0a66 	vmov.f32	s0, s13
 80028ca:	f006 f8a3 	bl	8008a14 <arm_sin_f32>
 80028ce:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

		float RealPart_Volt_Freq1 = (float) ReadVolt_Freq1[n] * TempCos;
 80028d2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80028ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ee:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		float RealPart_Curr_Freq1 = (float) ReadCurr_Freq1[n] * TempCos;
 80028f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002906:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		float ImgPart_Volt_Freq1 = -(float) ReadVolt_Freq1[n] * TempSin;
 8002912:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002926:	eef1 7a67 	vneg.f32	s15, s15
 800292a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		float ImgPart_Curr_Freq1 = -(float) ReadCurr_Freq1[n] * TempSin;
 8002936:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294a:	eef1 7a67 	vneg.f32	s15, s15
 800294e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		RealSum_Volt_Freq1 += (RealPart_Volt_Freq1*2/NSamples)*VRef/MaxAmp;
 800295a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800295e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002962:	89bb      	ldrh	r3, [r7, #12]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002970:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002974:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002978:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800297c:	ee07 3a90 	vmov	s15, r3
 8002980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002988:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800298c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002990:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		RealSum_Curr_Freq1 += (RealPart_Curr_Freq1*2/NSamples)*VRef/MaxAmp;
 8002994:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002998:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800299c:	89bb      	ldrh	r3, [r7, #12]
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80029ae:	ee67 6a27 	vmul.f32	s13, s14, s15
 80029b2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

		ImgSum_Volt_Freq1 += (ImgPart_Volt_Freq1*2/NSamples)*VRef/MaxAmp;
 80029ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029d2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029d6:	89bb      	ldrh	r3, [r7, #12]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029e4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80029e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80029ec:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029fc:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a04:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		ImgSum_Curr_Freq1 += (ImgPart_Curr_Freq1*2/NSamples)*VRef/MaxAmp;
 8002a08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a0c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a10:	89bb      	ldrh	r3, [r7, #12]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002a22:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a26:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a36:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	for(uint16_t n=0; n<NSamples; n++)
 8002a42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002a46:	3301      	adds	r3, #1
 8002a48:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002a4c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a50:	89bb      	ldrh	r3, [r7, #12]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	f4ff af01 	bcc.w	800285a <compute_dft+0x42>
	}
	//volatile float ab = sqrt((RealSum_Volt_Freq1*RealSum_Volt_Freq1)+(ImgSum_Volt_Freq1*ImgSum_Volt_Freq1));
	//volatile float abc = sqrt((RealSum_Curr_Freq1*RealSum_Curr_Freq1)+(ImgSum_Curr_Freq1*ImgSum_Curr_Freq1));

	float div = (RealSum_Curr_Freq1*RealSum_Curr_Freq1) + (ImgSum_Curr_Freq1*ImgSum_Curr_Freq1);
 8002a58:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002a5c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002a60:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002a64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	/*
	 *  		RvRc + IvIc
	 * zreal = 	-------------
	 *  		Rc*Rc + Ic*Ic
	 */
	float zreal = ((RealSum_Volt_Freq1*RealSum_Curr_Freq1) + (ImgSum_Volt_Freq1*ImgSum_Curr_Freq1)) / div;
 8002a70:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002a74:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002a80:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a88:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002a8c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a94:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	/*
	 * 			IvRc - RvIc
	 * zimg =  ---------------
	 * 			Rc*Rc + Ic*Ic
	 */
	float zimag = ((ImgSum_Volt_Freq1*RealSum_Curr_Freq1) - (RealSum_Volt_Freq1*ImgSum_Curr_Freq1)) / div;
 8002a98:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002a9c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa4:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002aa8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ab4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002abc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	//sprintf((char*)sendingData,"%f %f %f \n",zreal,zimag,Frequency_List1[random_count++]);
	//HAL_UART_Transmit(&huart5, sendingData, strlen((char*)sendingData),30);
	float zabs = 1*sqrt(zreal*zreal+zimag*zimag);
 8002ac0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002ac4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ac8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad4:	ee17 0a90 	vmov	r0, s15
 8002ad8:	f7fd fd3e 	bl	8000558 <__aeabi_f2d>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	ec43 2b10 	vmov	d0, r2, r3
 8002ae4:	f009 f8d8 	bl	800bc98 <sqrt>
 8002ae8:	ec53 2b10 	vmov	r2, r3, d0
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7fe f882 	bl	8000bf8 <__aeabi_d2f>
 8002af4:	4603      	mov	r3, r0
 8002af6:	64fb      	str	r3, [r7, #76]	; 0x4c
	float zphase = atan(zimag/zreal);
 8002af8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002afc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b04:	ee16 0a90 	vmov	r0, s13
 8002b08:	f7fd fd26 	bl	8000558 <__aeabi_f2d>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	ec43 2b10 	vmov	d0, r2, r3
 8002b14:	f008 fed4 	bl	800b8c0 <atan>
 8002b18:	ec53 2b10 	vmov	r2, r3, d0
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f7fe f86a 	bl	8000bf8 <__aeabi_d2f>
 8002b24:	4603      	mov	r3, r0
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48
	float out_volt;
	out_volt=input_voltage/zabs;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <compute_dft+0x388>)
 8002b2a:	edd3 6a00 	vldr	s13, [r3]
 8002b2e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b36:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(out_volt>=1.5)
 8002b3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b3e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	db35      	blt.n	8002bb8 <compute_dft+0x3a0>
	{
		CVFlag.gain_adjustment=1;
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <compute_dft+0x38c>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	719a      	strb	r2, [r3, #6]
			  Freq_Count = Freq_Count-1;
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <compute_dft+0x390>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <compute_dft+0x390>)
 8002b5c:	701a      	strb	r2, [r3, #0]
			 IS_Result_Count=IS_Result_Count-1;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <compute_dft+0x394>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <compute_dft+0x394>)
 8002b68:	801a      	strh	r2, [r3, #0]
			 filt_count=filt_count-1;
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <compute_dft+0x398>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <compute_dft+0x398>)
 8002b74:	801a      	strh	r2, [r3, #0]
			 if(IS_default_switch_value==0x04)
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <compute_dft+0x39c>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d103      	bne.n	8002b86 <compute_dft+0x36e>
			 {
				 IS_default_switch_value=0x02;
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <compute_dft+0x39c>)
 8002b80:	2202      	movs	r2, #2
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e01b      	b.n	8002bbe <compute_dft+0x3a6>
			 }
			 else if(IS_default_switch_value==0x02)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <compute_dft+0x39c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d117      	bne.n	8002bbe <compute_dft+0x3a6>
			 {
				 IS_default_switch_value=0x01;
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <compute_dft+0x39c>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e013      	b.n	8002bbe <compute_dft+0x3a6>
 8002b96:	bf00      	nop
 8002b98:	40533333 	.word	0x40533333
 8002b9c:	40c90fdb 	.word	0x40c90fdb
 8002ba0:	200039dc 	.word	0x200039dc
 8002ba4:	20002ae4 	.word	0x20002ae4
 8002ba8:	2000020d 	.word	0x2000020d
 8002bac:	2000020e 	.word	0x2000020e
 8002bb0:	20000218 	.word	0x20000218
 8002bb4:	20000010 	.word	0x20000010
			 }

	}
	else
	{
		CVFlag.gain_adjustment=0;
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <compute_dft+0x4d8>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	719a      	strb	r2, [r3, #6]

	}
	if(IS_default_switch_value==0x04)
 8002bbe:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <compute_dft+0x4dc>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d124      	bne.n	8002c10 <compute_dft+0x3f8>
				 {
		zreal=zreal*10000;
 8002bc6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002bca:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002cf8 <compute_dft+0x4e0>
 8002bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		zimag=zimag*10000;
 8002bd6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002bda:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002cf8 <compute_dft+0x4e0>
 8002bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		real_filter[filt_count]=zreal;
 8002be6:	4b45      	ldr	r3, [pc, #276]	; (8002cfc <compute_dft+0x4e4>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <compute_dft+0x4e8>)
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bf2:	601a      	str	r2, [r3, #0]
		imag_filter[filt_count]=zimag;
 8002bf4:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <compute_dft+0x4e4>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	4a42      	ldr	r2, [pc, #264]	; (8002d04 <compute_dft+0x4ec>)
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c00:	601a      	str	r2, [r3, #0]
		filt_count=filt_count+1;
 8002c02:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <compute_dft+0x4e4>)
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	4b3c      	ldr	r3, [pc, #240]	; (8002cfc <compute_dft+0x4e4>)
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	e04c      	b.n	8002caa <compute_dft+0x492>
				 }
	else if(IS_default_switch_value==0x02)
 8002c10:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <compute_dft+0x4dc>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d124      	bne.n	8002c62 <compute_dft+0x44a>
	{
		zreal=zreal*5000;
 8002c18:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c1c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002d08 <compute_dft+0x4f0>
 8002c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c24:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		zimag=zimag*5000;
 8002c28:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c2c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002d08 <compute_dft+0x4f0>
 8002c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c34:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		real_filter[filt_count]=zreal;
 8002c38:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <compute_dft+0x4e4>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	4a30      	ldr	r2, [pc, #192]	; (8002d00 <compute_dft+0x4e8>)
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c44:	601a      	str	r2, [r3, #0]
		imag_filter[filt_count]=zimag;
 8002c46:	4b2d      	ldr	r3, [pc, #180]	; (8002cfc <compute_dft+0x4e4>)
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	4a2e      	ldr	r2, [pc, #184]	; (8002d04 <compute_dft+0x4ec>)
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c52:	601a      	str	r2, [r3, #0]
		filt_count=filt_count+1;
 8002c54:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <compute_dft+0x4e4>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <compute_dft+0x4e4>)
 8002c5e:	801a      	strh	r2, [r3, #0]
 8002c60:	e023      	b.n	8002caa <compute_dft+0x492>
	}
	else
	{
		zreal=zreal*1000;
 8002c62:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c66:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002d0c <compute_dft+0x4f4>
 8002c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		zimag=zimag*1000;
 8002c72:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c76:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002d0c <compute_dft+0x4f4>
 8002c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		real_filter[filt_count]=zreal;
 8002c82:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <compute_dft+0x4e4>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <compute_dft+0x4e8>)
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c8e:	601a      	str	r2, [r3, #0]
		imag_filter[filt_count]=zimag;
 8002c90:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <compute_dft+0x4e4>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	4a1b      	ldr	r2, [pc, #108]	; (8002d04 <compute_dft+0x4ec>)
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c9c:	601a      	str	r2, [r3, #0]
		filt_count=filt_count+1;
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <compute_dft+0x4e4>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <compute_dft+0x4e4>)
 8002ca8:	801a      	strh	r2, [r3, #0]
	}
	results.zab = zabs;
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	61fb      	str	r3, [r7, #28]
	results.zphase = zphase*180/PI;
 8002cae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002cb2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d10 <compute_dft+0x4f8>
 8002cb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cba:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002d14 <compute_dft+0x4fc>
 8002cbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc2:	edc7 7a08 	vstr	s15, [r7, #32]
	return results;
 8002cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cca:	f107 021c 	add.w	r2, r7, #28
 8002cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8002cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	ee07 2a10 	vmov	s14, r2
 8002cde:	ee07 3a90 	vmov	s15, r3
}
 8002ce2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ce6:	eef0 0a67 	vmov.f32	s1, s15
 8002cea:	3778      	adds	r7, #120	; 0x78
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20002ae4 	.word	0x20002ae4
 8002cf4:	20000010 	.word	0x20000010
 8002cf8:	461c4000 	.word	0x461c4000
 8002cfc:	20000218 	.word	0x20000218
 8002d00:	20003958 	.word	0x20003958
 8002d04:	200039e0 	.word	0x200039e0
 8002d08:	459c4000 	.word	0x459c4000
 8002d0c:	447a0000 	.word	0x447a0000
 8002d10:	43340000 	.word	0x43340000
 8002d14:	40490fdb 	.word	0x40490fdb

08002d18 <IS_Complete>:
	results1.zphase = zphase*(180/PI);
	return results1;
}*/
char f_read_Temp[80];
void IS_Complete()
{
 8002d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d1c:	b088      	sub	sp, #32
 8002d1e:	af04      	add	r7, sp, #16
	if(ISFlag.RestTime)
 8002d20:	4b91      	ldr	r3, [pc, #580]	; (8002f68 <IS_Complete+0x250>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 818c 	beq.w	8003042 <IS_Complete+0x32a>
	{
		  for(uint16_t i=0; i<IS_NoOfSamples; i++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	81fb      	strh	r3, [r7, #14]
 8002d2e:	e015      	b.n	8002d5c <IS_Complete+0x44>
		  {
			  IS_ADC2[i] = (uint16_t) (IS_ADC_Read[i] >> 16);
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	4a8e      	ldr	r2, [pc, #568]	; (8002f6c <IS_Complete+0x254>)
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	0c1a      	lsrs	r2, r3, #16
 8002d3a:	89fb      	ldrh	r3, [r7, #14]
 8002d3c:	b291      	uxth	r1, r2
 8002d3e:	4a8c      	ldr	r2, [pc, #560]	; (8002f70 <IS_Complete+0x258>)
 8002d40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  IS_ADC1[i] = IS_ADC_Read[i] & 0x0000FFFF;
 8002d44:	89fb      	ldrh	r3, [r7, #14]
 8002d46:	4a89      	ldr	r2, [pc, #548]	; (8002f6c <IS_Complete+0x254>)
 8002d48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d4c:	89fb      	ldrh	r3, [r7, #14]
 8002d4e:	b291      	uxth	r1, r2
 8002d50:	4a88      	ldr	r2, [pc, #544]	; (8002f74 <IS_Complete+0x25c>)
 8002d52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(uint16_t i=0; i<IS_NoOfSamples; i++)
 8002d56:	89fb      	ldrh	r3, [r7, #14]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	81fb      	strh	r3, [r7, #14]
 8002d5c:	89fb      	ldrh	r3, [r7, #14]
 8002d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d62:	d3e5      	bcc.n	8002d30 <IS_Complete+0x18>
		  }

		  IS_Results[IS_Result_Count++]= compute_dft(IS_ADC1, IS_ADC2, IS_NoOfPeriods, IS_NoOfSamples);
 8002d64:	4b84      	ldr	r3, [pc, #528]	; (8002f78 <IS_Complete+0x260>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	b291      	uxth	r1, r2
 8002d6c:	4a82      	ldr	r2, [pc, #520]	; (8002f78 <IS_Complete+0x260>)
 8002d6e:	8011      	strh	r1, [r2, #0]
 8002d70:	461d      	mov	r5, r3
 8002d72:	4c82      	ldr	r4, [pc, #520]	; (8002f7c <IS_Complete+0x264>)
 8002d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d78:	2232      	movs	r2, #50	; 0x32
 8002d7a:	497d      	ldr	r1, [pc, #500]	; (8002f70 <IS_Complete+0x258>)
 8002d7c:	487d      	ldr	r0, [pc, #500]	; (8002f74 <IS_Complete+0x25c>)
 8002d7e:	f7ff fd4b 	bl	8002818 <compute_dft>
 8002d82:	eeb0 7a40 	vmov.f32	s14, s0
 8002d86:	eef0 7a60 	vmov.f32	s15, s1
 8002d8a:	00eb      	lsls	r3, r5, #3
 8002d8c:	4423      	add	r3, r4
 8002d8e:	ed83 7a00 	vstr	s14, [r3]
 8002d92:	00eb      	lsls	r3, r5, #3
 8002d94:	4423      	add	r3, r4
 8002d96:	3304      	adds	r3, #4
 8002d98:	edc3 7a00 	vstr	s15, [r3]

		  //sprintf(f_read_Temp, "%3.4f, %3.4f\n\r", IS_Results[IS_Result_Count-1].zab, IS_Results[IS_Result_Count-1].zphase);
		  //HAL_UART_Transmit(&huart4, (uint8_t *)f_read_Temp, strlen(f_read_Temp), 1000);
		  //HAL_UART_Transmit(&huart4, (uint8_t *)aTXBuffer, strlen(aTXBuffer), 1000);
		  //HAL_Delay(2500);
		  if(Frequency_List[Freq_Count] != 0)
 8002d9c:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <IS_Complete+0x268>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <IS_Complete+0x26c>)
 8002da4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d04e      	beq.n	8002e4a <IS_Complete+0x132>
		  {
			  if(Frequency_List[Freq_Count]>40)
 8002dac:	4b74      	ldr	r3, [pc, #464]	; (8002f80 <IS_Complete+0x268>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <IS_Complete+0x26c>)
 8002db4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002db8:	2b28      	cmp	r3, #40	; 0x28
 8002dba:	d90d      	bls.n	8002dd8 <IS_Complete+0xc0>
			  {
			    IS_Prescaler=1;
 8002dbc:	4b72      	ldr	r3, [pc, #456]	; (8002f88 <IS_Complete+0x270>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	801a      	strh	r2, [r3, #0]
			    TIM4->PSC = IS_Prescaler-1;
 8002dc2:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <IS_Complete+0x270>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	1e5a      	subs	r2, r3, #1
 8002dc8:	4b70      	ldr	r3, [pc, #448]	; (8002f8c <IS_Complete+0x274>)
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
			    TIM2->PSC = IS_Prescaler-1;
 8002dcc:	4b6e      	ldr	r3, [pc, #440]	; (8002f88 <IS_Complete+0x270>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	1e5a      	subs	r2, r3, #1
 8002dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28
			  }
			  if(CVFlag.gain_adjustment)
 8002dd8:	4b6d      	ldr	r3, [pc, #436]	; (8002f90 <IS_Complete+0x278>)
 8002dda:	799b      	ldrb	r3, [r3, #6]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d011      	beq.n	8002e04 <IS_Complete+0xec>
			  {



			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002de6:	486b      	ldr	r0, [pc, #428]	; (8002f94 <IS_Complete+0x27c>)
 8002de8:	f000 ff26 	bl	8003c38 <HAL_GPIO_WritePin>

				  HAL_SPI_Transmit(&hspi3,&IS_default_switch_value,1,100);
 8002dec:	2364      	movs	r3, #100	; 0x64
 8002dee:	2201      	movs	r2, #1
 8002df0:	4969      	ldr	r1, [pc, #420]	; (8002f98 <IS_Complete+0x280>)
 8002df2:	486a      	ldr	r0, [pc, #424]	; (8002f9c <IS_Complete+0x284>)
 8002df4:	f002 fb4f 	bl	8005496 <HAL_SPI_Transmit>

				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dfe:	4865      	ldr	r0, [pc, #404]	; (8002f94 <IS_Complete+0x27c>)
 8002e00:	f000 ff1a 	bl	8003c38 <HAL_GPIO_WritePin>

			  }
			  dac_timer_update(Frequency_List[Freq_Count]);
 8002e04:	4b5e      	ldr	r3, [pc, #376]	; (8002f80 <IS_Complete+0x268>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b5e      	ldr	r3, [pc, #376]	; (8002f84 <IS_Complete+0x26c>)
 8002e0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fafd 	bl	8002410 <dac_timer_update>
			  //TIM4->CR1 |= 0x01;
			  HAL_Delay(2500);
 8002e16:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002e1a:	f000 fc79 	bl	8003710 <HAL_Delay>
			  adc_timer_update(Frequency_List[Freq_Count++]);
 8002e1e:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <IS_Complete+0x268>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	b2d1      	uxtb	r1, r2
 8002e26:	4a56      	ldr	r2, [pc, #344]	; (8002f80 <IS_Complete+0x268>)
 8002e28:	7011      	strb	r1, [r2, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b55      	ldr	r3, [pc, #340]	; (8002f84 <IS_Complete+0x26c>)
 8002e2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff faac 	bl	8002390 <adc_timer_update>
			  TIM2->CR1 |= 0x01;	// Enable TIM2 (ADC)
 8002e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e0f8      	b.n	800303c <IS_Complete+0x324>

		  }
		  else
		  {
			  if(filt_count==1)
 8002e4a:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <IS_Complete+0x288>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <IS_Complete+0x14c>
			  {
				  real_reverse_filtered_data[0] = real_filter[0];
 8002e52:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <IS_Complete+0x28c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a54      	ldr	r2, [pc, #336]	; (8002fa8 <IS_Complete+0x290>)
 8002e58:	6013      	str	r3, [r2, #0]
				  imaginary_reverse_filtered_data[0]=imag_filter[0];
 8002e5a:	4b54      	ldr	r3, [pc, #336]	; (8002fac <IS_Complete+0x294>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a54      	ldr	r2, [pc, #336]	; (8002fb0 <IS_Complete+0x298>)
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00e      	b.n	8002e82 <IS_Complete+0x16a>
			  }
			  else
			  {
				  EIS_FIR_filter(real_filter,imag_filter,filt_count);
 8002e64:	4b4e      	ldr	r3, [pc, #312]	; (8002fa0 <IS_Complete+0x288>)
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4950      	ldr	r1, [pc, #320]	; (8002fac <IS_Complete+0x294>)
 8002e6c:	484d      	ldr	r0, [pc, #308]	; (8002fa4 <IS_Complete+0x28c>)
 8002e6e:	f7fe ff65 	bl	8001d3c <EIS_FIR_filter>
				  real_reverse_filtered_data[0] = real_filter[0];
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <IS_Complete+0x28c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a4c      	ldr	r2, [pc, #304]	; (8002fa8 <IS_Complete+0x290>)
 8002e78:	6013      	str	r3, [r2, #0]
				  imaginary_reverse_filtered_data[0]=imag_filter[0];
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <IS_Complete+0x294>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a4c      	ldr	r2, [pc, #304]	; (8002fb0 <IS_Complete+0x298>)
 8002e80:	6013      	str	r3, [r2, #0]
			  }
for(int i=0;i<filt_count;i++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	e034      	b.n	8002ef2 <IS_Complete+0x1da>
{
			  sprintf((char*)sendingData,"%f %f %f \n",real_reverse_filtered_data[i],imaginary_reverse_filtered_data[i],Frequency_List1[i]);
 8002e88:	4a47      	ldr	r2, [pc, #284]	; (8002fa8 <IS_Complete+0x290>)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fb60 	bl	8000558 <__aeabi_f2d>
 8002e98:	4680      	mov	r8, r0
 8002e9a:	4689      	mov	r9, r1
 8002e9c:	4a44      	ldr	r2, [pc, #272]	; (8002fb0 <IS_Complete+0x298>)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb56 	bl	8000558 <__aeabi_f2d>
 8002eac:	4604      	mov	r4, r0
 8002eae:	460d      	mov	r5, r1
 8002eb0:	4a40      	ldr	r2, [pc, #256]	; (8002fb4 <IS_Complete+0x29c>)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb4c 	bl	8000558 <__aeabi_f2d>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ec8:	e9cd 4500 	strd	r4, r5, [sp]
 8002ecc:	4642      	mov	r2, r8
 8002ece:	464b      	mov	r3, r9
 8002ed0:	4939      	ldr	r1, [pc, #228]	; (8002fb8 <IS_Complete+0x2a0>)
 8002ed2:	483a      	ldr	r0, [pc, #232]	; (8002fbc <IS_Complete+0x2a4>)
 8002ed4:	f006 fb8a 	bl	80095ec <siprintf>
			  HAL_UART_Transmit(&huart5, sendingData, strlen((char*)sendingData),30);
 8002ed8:	4838      	ldr	r0, [pc, #224]	; (8002fbc <IS_Complete+0x2a4>)
 8002eda:	f7fd f981 	bl	80001e0 <strlen>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	231e      	movs	r3, #30
 8002ee4:	4935      	ldr	r1, [pc, #212]	; (8002fbc <IS_Complete+0x2a4>)
 8002ee6:	4836      	ldr	r0, [pc, #216]	; (8002fc0 <IS_Complete+0x2a8>)
 8002ee8:	f002 fdf6 	bl	8005ad8 <HAL_UART_Transmit>
for(int i=0;i<filt_count;i++)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <IS_Complete+0x288>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4293      	cmp	r3, r2
 8002efc:	dbc4      	blt.n	8002e88 <IS_Complete+0x170>
}
 			  Freq_Count = 0;
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <IS_Complete+0x268>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
 			random_count=0;
 8002f04:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <IS_Complete+0x2ac>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 			filt_count=0;
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <IS_Complete+0x288>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	801a      	strh	r2, [r3, #0]
 			//Count=0;
			  IS_Result_Count=0;
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <IS_Complete+0x260>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	801a      	strh	r2, [r3, #0]
			  //IS_Result1_Count=0;
			  if(Frequency_List[Freq_Count]>40)
 8002f16:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <IS_Complete+0x268>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <IS_Complete+0x26c>)
 8002f1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f22:	2b28      	cmp	r3, #40	; 0x28
 8002f24:	d90e      	bls.n	8002f44 <IS_Complete+0x22c>
			  {
			  	IS_Prescaler=1;
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <IS_Complete+0x270>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	801a      	strh	r2, [r3, #0]
			  	TIM4->PSC = IS_Prescaler-1;
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <IS_Complete+0x270>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <IS_Complete+0x274>)
 8002f34:	629a      	str	r2, [r3, #40]	; 0x28
			  	TIM2->PSC = IS_Prescaler-1;
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <IS_Complete+0x270>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	1e5a      	subs	r2, r3, #1
 8002f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
 8002f42:	e00d      	b.n	8002f60 <IS_Complete+0x248>
			  }
			  else
			  {
				  IS_Prescaler=72;
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <IS_Complete+0x270>)
 8002f46:	2248      	movs	r2, #72	; 0x48
 8002f48:	801a      	strh	r2, [r3, #0]
				  TIM4->PSC = IS_Prescaler-1;
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <IS_Complete+0x270>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	1e5a      	subs	r2, r3, #1
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <IS_Complete+0x274>)
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
				  TIM2->PSC = IS_Prescaler-1;
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <IS_Complete+0x270>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	1e5a      	subs	r2, r3, #1
 8002f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
				   DCPtnl_array[i] = (uint16_t) (*(DC_List+DCPtnl_Count));
				  }
				   DCPtnl_Count++;
			   }*/
			 // IS_Dual_DAC_Init(IS_Prescaler-1, CVVar.Tim4Value, Sine_Lut, DCPtnl_array);
			  for(int i=0; i<20; i++)																		// Populate dac_list
 8002f60:	2300      	movs	r3, #0
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	e042      	b.n	8002fec <IS_Complete+0x2d4>
 8002f66:	bf00      	nop
 8002f68:	20003930 	.word	0x20003930
 8002f6c:	20001b44 	.word	0x20001b44
 8002f70:	20000ba4 	.word	0x20000ba4
 8002f74:	20000388 	.word	0x20000388
 8002f78:	2000020e 	.word	0x2000020e
 8002f7c:	20000298 	.word	0x20000298
 8002f80:	2000020d 	.word	0x2000020d
 8002f84:	20005178 	.word	0x20005178
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	20002ae4 	.word	0x20002ae4
 8002f94:	48000c00 	.word	0x48000c00
 8002f98:	20000010 	.word	0x20000010
 8002f9c:	20005420 	.word	0x20005420
 8002fa0:	20000218 	.word	0x20000218
 8002fa4:	20003958 	.word	0x20003958
 8002fa8:	20003a44 	.word	0x20003a44
 8002fac:	200039e0 	.word	0x200039e0
 8002fb0:	20001374 	.word	0x20001374
 8002fb4:	20005270 	.word	0x20005270
 8002fb8:	0800c8d8 	.word	0x0800c8d8
 8002fbc:	20003938 	.word	0x20003938
 8002fc0:	20005488 	.word	0x20005488
 8002fc4:	20000214 	.word	0x20000214
			  {
				  IS_Results[i].zab = 0;
 8002fc8:	4a20      	ldr	r2, [pc, #128]	; (800304c <IS_Complete+0x334>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
				  IS_Results[i].zphase=0;
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <IS_Complete+0x334>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3304      	adds	r3, #4
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
			  for(int i=0; i<20; i++)																		// Populate dac_list
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b13      	cmp	r3, #19
 8002ff0:	ddea      	ble.n	8002fc8 <IS_Complete+0x2b0>

			  }
			 // IS_Dual_ADC_Init(ADC_CHANNEL__3, ADC_CHANNEL__3, ADC_1_CLOCK_CYCLE_5, IS_Prescaler-1,0, IS_ADC_Read);
			  dac_timer_update(Frequency_List[Freq_Count]);
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <IS_Complete+0x338>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <IS_Complete+0x33c>)
 8002ffa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fa06 	bl	8002410 <dac_timer_update>
			  HAL_Delay(5);
 8003004:	2005      	movs	r0, #5
 8003006:	f000 fb83 	bl	8003710 <HAL_Delay>
			  adc_timer_update(Frequency_List[Freq_Count++]);
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <IS_Complete+0x338>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	b2d1      	uxtb	r1, r2
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <IS_Complete+0x338>)
 8003014:	7011      	strb	r1, [r2, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <IS_Complete+0x33c>)
 800301a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f9b6 	bl	8002390 <adc_timer_update>
			  TIM2->CNT = 0;
 8003024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003028:	2200      	movs	r2, #0
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
			 // NVIC_EnableIRQ(ADC1_IRQn);
			  TIM2->CR1 |= 0x01;								// Enable TIM2 (ADC)
 800302c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6013      	str	r3, [r2, #0]
		  }

		  ISFlag.RestTime = 0;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <IS_Complete+0x340>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]

	  }
}
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800304c:	20000298 	.word	0x20000298
 8003050:	2000020d 	.word	0x2000020d
 8003054:	20005178 	.word	0x20005178
 8003058:	20003930 	.word	0x20003930
 800305c:	00000000 	.word	0x00000000

08003060 <DPV_Var_Calculations>:
//float t_5pr;
float TimePerPoint;
float DVP_TimeInterval;
float DVPPulseOff;
void DPV_Var_Calculations(float TPulse,float Ebegin,float Eend,float Estp,float ScnRate)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b090      	sub	sp, #64	; 0x40
 8003064:	af00      	add	r7, sp, #0
 8003066:	ed87 0a05 	vstr	s0, [r7, #20]
 800306a:	edc7 0a04 	vstr	s1, [r7, #16]
 800306e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003072:	edc7 1a02 	vstr	s3, [r7, #8]
 8003076:	ed87 2a01 	vstr	s4, [r7, #4]
 TPulse /= 1000;
 800307a:	ed97 7a05 	vldr	s14, [r7, #20]
 800307e:	eddf 6ad6 	vldr	s13, [pc, #856]	; 80033d8 <DPV_Var_Calculations+0x378>
 8003082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003086:	edc7 7a05 	vstr	s15, [r7, #20]
 Estp /=1000;
 800308a:	ed97 7a02 	vldr	s14, [r7, #8]
 800308e:	eddf 6ad2 	vldr	s13, [pc, #840]	; 80033d8 <DPV_Var_Calculations+0x378>
 8003092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003096:	edc7 7a02 	vstr	s15, [r7, #8]
 ScnRate /=1000;
 800309a:	ed97 7a01 	vldr	s14, [r7, #4]
 800309e:	eddf 6ace 	vldr	s13, [pc, #824]	; 80033d8 <DPV_Var_Calculations+0x378>
 80030a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030a6:	edc7 7a01 	vstr	s15, [r7, #4]
 DVP_TimeInterval = (Estp/ScnRate);
 80030aa:	edd7 6a02 	vldr	s13, [r7, #8]
 80030ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80030b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b6:	4bc9      	ldr	r3, [pc, #804]	; (80033dc <DPV_Var_Calculations+0x37c>)
 80030b8:	edc3 7a00 	vstr	s15, [r3]
 float Amp= CVPar.DPVAmp / 1000; // in v
 80030bc:	4bc8      	ldr	r3, [pc, #800]	; (80033e0 <DPV_Var_Calculations+0x380>)
 80030be:	ed93 7a07 	vldr	s14, [r3, #28]
 80030c2:	eddf 6ac5 	vldr	s13, [pc, #788]	; 80033d8 <DPV_Var_Calculations+0x378>
 80030c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030ca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 CVVar.SWV_DAC_LowerLimit = (uint16_t) (1865-(4095*Amp/(3.3*2)));
 80030ce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80030d2:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 80033e4 <DPV_Var_Calculations+0x384>
 80030d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030da:	ee17 0a90 	vmov	r0, s15
 80030de:	f7fd fa3b 	bl	8000558 <__aeabi_f2d>
 80030e2:	a3b1      	add	r3, pc, #708	; (adr r3, 80033a8 <DPV_Var_Calculations+0x348>)
 80030e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e8:	f7fd fbb8 	bl	800085c <__aeabi_ddiv>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	a1af      	add	r1, pc, #700	; (adr r1, 80033b0 <DPV_Var_Calculations+0x350>)
 80030f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030f6:	f7fd f8cf 	bl	8000298 <__aeabi_dsub>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	f7fd fd59 	bl	8000bb8 <__aeabi_d2uiz>
 8003106:	4603      	mov	r3, r0
 8003108:	b29a      	uxth	r2, r3
 800310a:	4bb7      	ldr	r3, [pc, #732]	; (80033e8 <DPV_Var_Calculations+0x388>)
 800310c:	f8a3 2686 	strh.w	r2, [r3, #1670]	; 0x686
 CVVar.SWC_DAC_UpperLimit = (uint16_t) (1865+(4095*Amp/(3.3*2)));
 8003110:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003114:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80033e4 <DPV_Var_Calculations+0x384>
 8003118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311c:	ee17 0a90 	vmov	r0, s15
 8003120:	f7fd fa1a 	bl	8000558 <__aeabi_f2d>
 8003124:	a3a0      	add	r3, pc, #640	; (adr r3, 80033a8 <DPV_Var_Calculations+0x348>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f7fd fb97 	bl	800085c <__aeabi_ddiv>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	a39e      	add	r3, pc, #632	; (adr r3, 80033b0 <DPV_Var_Calculations+0x350>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd f8ae 	bl	800029c <__adddf3>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fd36 	bl	8000bb8 <__aeabi_d2uiz>
 800314c:	4603      	mov	r3, r0
 800314e:	b29a      	uxth	r2, r3
 8003150:	4ba5      	ldr	r3, [pc, #660]	; (80033e8 <DPV_Var_Calculations+0x388>)
 8003152:	f8a3 2688 	strh.w	r2, [r3, #1672]	; 0x688
 DVPPulseOff = DVP_TimeInterval - TPulse;
 8003156:	4ba1      	ldr	r3, [pc, #644]	; (80033dc <DPV_Var_Calculations+0x37c>)
 8003158:	ed93 7a00 	vldr	s14, [r3]
 800315c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003164:	4ba1      	ldr	r3, [pc, #644]	; (80033ec <DPV_Var_Calculations+0x38c>)
 8003166:	edc3 7a00 	vstr	s15, [r3]

 uint16_t DVP_Freq = (uint16_t)(1/DVP_TimeInterval);
 800316a:	4b9c      	ldr	r3, [pc, #624]	; (80033dc <DPV_Var_Calculations+0x37c>)
 800316c:	ed93 7a00 	vldr	s14, [r3]
 8003170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800317c:	ee17 3a90 	vmov	r3, s15
 8003180:	86fb      	strh	r3, [r7, #54]	; 0x36
 uint16_t DVP_Freq1=(uint16_t)(1/DVPPulseOff);
 8003182:	4b9a      	ldr	r3, [pc, #616]	; (80033ec <DPV_Var_Calculations+0x38c>)
 8003184:	ed93 7a00 	vldr	s14, [r3]
 8003188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800318c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003194:	ee17 3a90 	vmov	r3, s15
 8003198:	86bb      	strh	r3, [r7, #52]	; 0x34
 uint16_t DVP_Freq2= (uint16_t)(1/TPulse); //for duty cycle selection for pulse
 800319a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319e:	ed97 7a05 	vldr	s14, [r7, #20]
 80031a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031aa:	ee17 3a90 	vmov	r3, s15
 80031ae:	867b      	strh	r3, [r7, #50]	; 0x32

 //CVPar.SWVFreq = (uint16_t) DVP_Freq;
 float DigitalEstep;
 uint8_t Temp;
 DigitalEstep = (Estp*4095)/(3.3);
 80031b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80031b4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80033e4 <DPV_Var_Calculations+0x384>
 80031b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031bc:	ee17 0a90 	vmov	r0, s15
 80031c0:	f7fd f9ca 	bl	8000558 <__aeabi_f2d>
 80031c4:	a37c      	add	r3, pc, #496	; (adr r3, 80033b8 <DPV_Var_Calculations+0x358>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fd fb47 	bl	800085c <__aeabi_ddiv>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f7fd fd0f 	bl	8000bf8 <__aeabi_d2f>
 80031da:	4603      	mov	r3, r0
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 Temp = (uint8_t) (DigitalEstep);
 80031de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80031e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e6:	edc7 7a00 	vstr	s15, [r7]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 if((DigitalEstep-Temp)>0.5) Temp +=1;
 80031f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003204:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003210:	dd04      	ble.n	800321c <DPV_Var_Calculations+0x1bc>
 8003212:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003216:	3301      	adds	r3, #1
 8003218:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 CVVar.DigitalEstep = Temp;
 800321c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003220:	b29a      	uxth	r2, r3
 8003222:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <DPV_Var_Calculations+0x388>)
 8003224:	819a      	strh	r2, [r3, #12]

 CVPar.Estart = Ebegin + 1.5;
 8003226:	edd7 7a04 	vldr	s15, [r7, #16]
 800322a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800322e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003232:	4b6b      	ldr	r3, [pc, #428]	; (80033e0 <DPV_Var_Calculations+0x380>)
 8003234:	edc3 7a00 	vstr	s15, [r3]
 CVPar.Estop = Eend + 1.5;
 8003238:	edd7 7a03 	vldr	s15, [r7, #12]
 800323c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003244:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <DPV_Var_Calculations+0x380>)
 8003246:	edc3 7a01 	vstr	s15, [r3, #4]
 CVVar.DigitalEstart = CVPar.Estart/3.3*4095;
 800324a:	4b65      	ldr	r3, [pc, #404]	; (80033e0 <DPV_Var_Calculations+0x380>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f982 	bl	8000558 <__aeabi_f2d>
 8003254:	a358      	add	r3, pc, #352	; (adr r3, 80033b8 <DPV_Var_Calculations+0x358>)
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f7fd faff 	bl	800085c <__aeabi_ddiv>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	a356      	add	r3, pc, #344	; (adr r3, 80033c0 <DPV_Var_Calculations+0x360>)
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f7fd f9cc 	bl	8000608 <__aeabi_dmul>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f7fd fc76 	bl	8000b68 <__aeabi_d2iz>
 800327c:	4603      	mov	r3, r0
 800327e:	b21a      	sxth	r2, r3
 8003280:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <DPV_Var_Calculations+0x388>)
 8003282:	859a      	strh	r2, [r3, #44]	; 0x2c
 CVVar.DigitalEstop = CVPar.Estop/3.3*4095;
 8003284:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <DPV_Var_Calculations+0x380>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd f965 	bl	8000558 <__aeabi_f2d>
 800328e:	a34a      	add	r3, pc, #296	; (adr r3, 80033b8 <DPV_Var_Calculations+0x358>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7fd fae2 	bl	800085c <__aeabi_ddiv>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	a347      	add	r3, pc, #284	; (adr r3, 80033c0 <DPV_Var_Calculations+0x360>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f7fd f9af 	bl	8000608 <__aeabi_dmul>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	f7fd fc59 	bl	8000b68 <__aeabi_d2iz>
 80032b6:	4603      	mov	r3, r0
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <DPV_Var_Calculations+0x388>)
 80032bc:	85da      	strh	r2, [r3, #46]	; 0x2e
 CVVar.NumPoints = ((CVVar.DigitalEstop - CVVar.DigitalEstart)/CVVar.DigitalEstep)+1;
 80032be:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <DPV_Var_Calculations+0x388>)
 80032c0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b48      	ldr	r3, [pc, #288]	; (80033e8 <DPV_Var_Calculations+0x388>)
 80032c8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	4a46      	ldr	r2, [pc, #280]	; (80033e8 <DPV_Var_Calculations+0x388>)
 80032d0:	8992      	ldrh	r2, [r2, #12]
 80032d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80032d6:	3301      	adds	r3, #1
 80032d8:	461a      	mov	r2, r3
 80032da:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <DPV_Var_Calculations+0x388>)
 80032dc:	601a      	str	r2, [r3, #0]
 CVVar.TotalPoints = 2*CVVar.NumPoints;
 80032de:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <DPV_Var_Calculations+0x388>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4a40      	ldr	r2, [pc, #256]	; (80033e8 <DPV_Var_Calculations+0x388>)
 80032e6:	6053      	str	r3, [r2, #4]
 CVVar.Tim4Value = (uint16_t) ((CV_TIM_Clk/(DVP_Freq1*2*CV_TIM4_PS))-1);     // Prescaler fixed at 7199, for Timer 3 and Timer 4 both same
 80032e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80032ea:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	4a3f      	ldr	r2, [pc, #252]	; (80033f0 <DPV_Var_Calculations+0x390>)
 80032f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <DPV_Var_Calculations+0x388>)
 8003300:	829a      	strh	r2, [r3, #20]
 //CVVar.duty=(uint32_t)((DVPPulseOff/DVP_TimeInterval)*CVVar.Tim4Value);
 //CVVar.duty1=(uint32_t)((TPulse/DVP_TimeInterval)*CVVar.Tim4Value);
 //CVVar.TimePerPoint = (TPulse/DVP_TimeInterval);						 // CCR value for timer 3 to decide duty cycle
 CVVar.Tim41Value=(uint16_t) ((CV_TIM_Clk/(DVP_Freq2*2*CV_TIM4_PS))-1);
 8003302:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003304:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	4a38      	ldr	r2, [pc, #224]	; (80033f0 <DPV_Var_Calculations+0x390>)
 800330e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <DPV_Var_Calculations+0x388>)
 800331a:	82da      	strh	r2, [r3, #22]
 // Fix Timer 4 Value for DAC at 10 us, no need of timer 3
 float t_5pr=0; float t_half_DPV=0; uint16_t TempFreq=0;
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	2300      	movs	r3, #0
 800332a:	847b      	strh	r3, [r7, #34]	; 0x22
 TempFreq= DVP_Freq1*2;
 800332c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	847b      	strh	r3, [r7, #34]	; 0x22
 t_half_DPV = (float) 1/TempFreq;
 8003332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003334:	ee07 3a90 	vmov	s15, r3
 8003338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800333c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003344:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

 t_5pr = (0.05* t_half_DPV);
 8003348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800334a:	f7fd f905 	bl	8000558 <__aeabi_f2d>
 800334e:	a31e      	add	r3, pc, #120	; (adr r3, 80033c8 <DPV_Var_Calculations+0x368>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fd f958 	bl	8000608 <__aeabi_dmul>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	f7fd fc4a 	bl	8000bf8 <__aeabi_d2f>
 8003364:	4603      	mov	r3, r0
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28

 TimePerPoint= (float) (t_5pr/(CV_ADC_Avg_Sample-5));
 8003368:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800336c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80033f4 <DPV_Var_Calculations+0x394>
 8003370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <DPV_Var_Calculations+0x398>)
 8003376:	edc3 7a00 	vstr	s15, [r3]
 float f_adc_ARR;
 f_adc_ARR = (CV_TIM_Clk) * TimePerPoint  * (95.0/100);
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <DPV_Var_Calculations+0x398>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80033fc <DPV_Var_Calculations+0x39c>
 8003384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003388:	ee17 0a90 	vmov	r0, s15
 800338c:	f7fd f8e4 	bl	8000558 <__aeabi_f2d>
 8003390:	a30f      	add	r3, pc, #60	; (adr r3, 80033d0 <DPV_Var_Calculations+0x370>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f7fd f937 	bl	8000608 <__aeabi_dmul>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	f7fd fc29 	bl	8000bf8 <__aeabi_d2f>
 80033a6:	e02b      	b.n	8003400 <DPV_Var_Calculations+0x3a0>
 80033a8:	66666666 	.word	0x66666666
 80033ac:	401a6666 	.word	0x401a6666
 80033b0:	00000000 	.word	0x00000000
 80033b4:	409d2400 	.word	0x409d2400
 80033b8:	66666666 	.word	0x66666666
 80033bc:	400a6666 	.word	0x400a6666
 80033c0:	00000000 	.word	0x00000000
 80033c4:	40affe00 	.word	0x40affe00
 80033c8:	9999999a 	.word	0x9999999a
 80033cc:	3fa99999 	.word	0x3fa99999
 80033d0:	66666666 	.word	0x66666666
 80033d4:	3fee6666 	.word	0x3fee6666
 80033d8:	447a0000 	.word	0x447a0000
 80033dc:	20005170 	.word	0x20005170
 80033e0:	200039bc 	.word	0x200039bc
 80033e4:	457ff000 	.word	0x457ff000
 80033e8:	20004214 	.word	0x20004214
 80033ec:	20000b58 	.word	0x20000b58
 80033f0:	044aa200 	.word	0x044aa200
 80033f4:	43c80000 	.word	0x43c80000
 80033f8:	20000294 	.word	0x20000294
 80033fc:	4c895440 	.word	0x4c895440
 8003400:	4603      	mov	r3, r0
 8003402:	61fb      	str	r3, [r7, #28]
 CVVar.ADCTim2Value = (uint32_t)f_adc_ARR;
 8003404:	edd7 7a07 	vldr	s15, [r7, #28]
 8003408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800340c:	ee17 2a90 	vmov	r2, s15
 8003410:	4b4f      	ldr	r3, [pc, #316]	; (8003550 <DPV_Var_Calculations+0x4f0>)
 8003412:	61da      	str	r2, [r3, #28]
 if(f_adc_ARR - CVVar.ADCTim2Value > 0.5) CVVar.ADCTim2Value++;
 8003414:	4b4e      	ldr	r3, [pc, #312]	; (8003550 <DPV_Var_Calculations+0x4f0>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	ee07 3a90 	vmov	s15, r3
 800341c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003420:	ed97 7a07 	vldr	s14, [r7, #28]
 8003424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003428:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800342c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003434:	dd04      	ble.n	8003440 <DPV_Var_Calculations+0x3e0>
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <DPV_Var_Calculations+0x4f0>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	3301      	adds	r3, #1
 800343c:	4a44      	ldr	r2, [pc, #272]	; (8003550 <DPV_Var_Calculations+0x4f0>)
 800343e:	61d3      	str	r3, [r2, #28]
 DPV_Off_ADCSamples = (uint16_t)(t_half_DPV/TimePerPoint);
 8003440:	4b44      	ldr	r3, [pc, #272]	; (8003554 <DPV_Var_Calculations+0x4f4>)
 8003442:	ed93 7a00 	vldr	s14, [r3]
 8003446:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800344a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800344e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003452:	ee17 3a90 	vmov	r3, s15
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <DPV_Var_Calculations+0x4f8>)
 800345a:	801a      	strh	r2, [r3, #0]


 TempFreq= DVP_Freq2*2;
 800345c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	847b      	strh	r3, [r7, #34]	; 0x22
 t_half_DPV = (float) 1/TempFreq;
 8003462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800346c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003474:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

 t_5pr = (0.05* t_half_DPV);
 8003478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800347a:	f7fd f86d 	bl	8000558 <__aeabi_f2d>
 800347e:	a330      	add	r3, pc, #192	; (adr r3, 8003540 <DPV_Var_Calculations+0x4e0>)
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f7fd f8c0 	bl	8000608 <__aeabi_dmul>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	f7fd fbb2 	bl	8000bf8 <__aeabi_d2f>
 8003494:	4603      	mov	r3, r0
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28

 TimePerPoint= (float) (t_5pr/(CV_ADC_Avg_Sample-5));
 8003498:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800349c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800355c <DPV_Var_Calculations+0x4fc>
 80034a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <DPV_Var_Calculations+0x4f4>)
 80034a6:	edc3 7a00 	vstr	s15, [r3]
 float f_adc_ARR1;
 f_adc_ARR1 = (CV_TIM_Clk) * TimePerPoint  * (95.0/100);
 80034aa:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <DPV_Var_Calculations+0x4f4>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003560 <DPV_Var_Calculations+0x500>
 80034b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b8:	ee17 0a90 	vmov	r0, s15
 80034bc:	f7fd f84c 	bl	8000558 <__aeabi_f2d>
 80034c0:	a321      	add	r3, pc, #132	; (adr r3, 8003548 <DPV_Var_Calculations+0x4e8>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fd f89f 	bl	8000608 <__aeabi_dmul>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	f7fd fb91 	bl	8000bf8 <__aeabi_d2f>
 80034d6:	4603      	mov	r3, r0
 80034d8:	61bb      	str	r3, [r7, #24]
 CVVar.ADCTim21Value = (uint32_t)f_adc_ARR1;
 80034da:	edd7 7a06 	vldr	s15, [r7, #24]
 80034de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e2:	ee17 2a90 	vmov	r2, s15
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <DPV_Var_Calculations+0x4f0>)
 80034e8:	621a      	str	r2, [r3, #32]
 if(f_adc_ARR1 - CVVar.ADCTim2Value > 0.5) CVVar.ADCTim2Value++;
 80034ea:	4b19      	ldr	r3, [pc, #100]	; (8003550 <DPV_Var_Calculations+0x4f0>)
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80034fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	dd04      	ble.n	8003516 <DPV_Var_Calculations+0x4b6>
 800350c:	4b10      	ldr	r3, [pc, #64]	; (8003550 <DPV_Var_Calculations+0x4f0>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	3301      	adds	r3, #1
 8003512:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <DPV_Var_Calculations+0x4f0>)
 8003514:	61d3      	str	r3, [r2, #28]
 DPV_On_ADCSamples = (uint16_t)(t_half_DPV/TimePerPoint);
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <DPV_Var_Calculations+0x4f4>)
 8003518:	ed93 7a00 	vldr	s14, [r3]
 800351c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003528:	ee17 3a90 	vmov	r3, s15
 800352c:	b29a      	uxth	r2, r3
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <DPV_Var_Calculations+0x504>)
 8003530:	801a      	strh	r2, [r3, #0]
 f_adc_ARR = (CV_TIM_Clk) * TimePerPoint * (95.0/100);
 DPV_Total_ADCVal = (uint32_t)f_adc_ARR;
 if(f_adc_ARR - DPV_Off_ADCVal > 0.5) DPV_Total_ADCVal++;
 DPV_Total_ADCSamples = (uint16_t)(DVP_TimeInterval/TimePerPoint);*/

}
 8003532:	bf00      	nop
 8003534:	3740      	adds	r7, #64	; 0x40
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	f3af 8000 	nop.w
 8003540:	9999999a 	.word	0x9999999a
 8003544:	3fa99999 	.word	0x3fa99999
 8003548:	66666666 	.word	0x66666666
 800354c:	3fee6666 	.word	0x3fee6666
 8003550:	20004214 	.word	0x20004214
 8003554:	20000294 	.word	0x20000294
 8003558:	2000023c 	.word	0x2000023c
 800355c:	43c80000 	.word	0x43c80000
 8003560:	4c895440 	.word	0x4c895440
 8003564:	2000023a 	.word	0x2000023a

08003568 <DPV_Start>:


void DPV_Start()
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af02      	add	r7, sp, #8
	if(DPVFlag.Start)
 800356e:	4b30      	ldr	r3, [pc, #192]	; (8003630 <DPV_Start+0xc8>)
 8003570:	785b      	ldrb	r3, [r3, #1]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d059      	beq.n	800362a <DPV_Start+0xc2>
	  {
		DPV_Var_Calculations(CVPar.DVPPulseON,CVPar.Estart,CVPar.Estop,CVPar.Estep,CVPar.ScanRate);
 8003576:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <DPV_Start+0xcc>)
 8003578:	edd3 7a06 	vldr	s15, [r3, #24]
 800357c:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <DPV_Start+0xcc>)
 800357e:	ed93 7a00 	vldr	s14, [r3]
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <DPV_Start+0xcc>)
 8003584:	edd3 6a01 	vldr	s13, [r3, #4]
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <DPV_Start+0xcc>)
 800358a:	ed93 6a02 	vldr	s12, [r3, #8]
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <DPV_Start+0xcc>)
 8003590:	edd3 5a03 	vldr	s11, [r3, #12]
 8003594:	eeb0 2a65 	vmov.f32	s4, s11
 8003598:	eef0 1a46 	vmov.f32	s3, s12
 800359c:	eeb0 1a66 	vmov.f32	s2, s13
 80035a0:	eef0 0a47 	vmov.f32	s1, s14
 80035a4:	eeb0 0a67 	vmov.f32	s0, s15
 80035a8:	f7ff fd5a 	bl	8003060 <DPV_Var_Calculations>
		DPVFlag.Start=0;
 80035ac:	4b20      	ldr	r3, [pc, #128]	; (8003630 <DPV_Start+0xc8>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	705a      	strb	r2, [r3, #1]
		DPV_Timer3_DAC_Init(CVVar.DigitalEstart-CVVar.DigitalEstep,CVVar.DigitalEstart,CV_TIM4_PS,CVVar.Tim4Value);
 80035b2:	4b21      	ldr	r3, [pc, #132]	; (8003638 <DPV_Start+0xd0>)
 80035b4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <DPV_Start+0xd0>)
 80035bc:	899b      	ldrh	r3, [r3, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c8:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <DPV_Start+0xd0>)
 80035ca:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80035ce:	ee07 3a10 	vmov	s14, r3
 80035d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <DPV_Start+0xd0>)
 80035d8:	8a9b      	ldrh	r3, [r3, #20]
 80035da:	4619      	mov	r1, r3
 80035dc:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 80035e0:	eef0 0a47 	vmov.f32	s1, s14
 80035e4:	eeb0 0a67 	vmov.f32	s0, s15
 80035e8:	f7fd fe9c 	bl	8001324 <DPV_Timer3_DAC_Init>
		CV_Single_ADC_Init(ADC_CHANNEL__1, ADC_1_CLOCK_CYCLE_5, 0, CVVar.ADCTim2Value-1, CVVar.ADC_Read);
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <DPV_Start+0xd0>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <DPV_Start+0xd4>)
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	2001      	movs	r0, #1
 8003600:	f7fd fc02 	bl	8000e08 <CV_Single_ADC_Init>
		NVIC_EnableIRQ(TIM4_IRQn);
 8003604:	201e      	movs	r0, #30
 8003606:	f7fd ff05 	bl	8001414 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(ADC1_IRQn);
 800360a:	2012      	movs	r0, #18
 800360c:	f7fd ff02 	bl	8001414 <__NVIC_EnableIRQ>
		HAL_Delay(5000);                        // Starting Rest Time in msec.
 8003610:	f241 3088 	movw	r0, #5000	; 0x1388
 8003614:	f000 f87c 	bl	8003710 <HAL_Delay>
		DPVFlag.Scan = 1;
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <DPV_Start+0xc8>)
 800361a:	2201      	movs	r2, #1
 800361c:	70da      	strb	r2, [r3, #3]
		TIM4->CR1 |= 0x01;
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <DPV_Start+0xd8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <DPV_Start+0xd8>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6013      	str	r3, [r2, #0]

	  }
}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20003928 	.word	0x20003928
 8003634:	200039bc 	.word	0x200039bc
 8003638:	20004214 	.word	0x20004214
 800363c:	20004244 	.word	0x20004244
 8003640:	40000800 	.word	0x40000800

08003644 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_Init+0x28>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a07      	ldr	r2, [pc, #28]	; (800366c <HAL_Init+0x28>)
 800364e:	f043 0310 	orr.w	r3, r3, #16
 8003652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003654:	2003      	movs	r0, #3
 8003656:	f000 f931 	bl	80038bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800365a:	2000      	movs	r0, #0
 800365c:	f000 f808 	bl	8003670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003660:	f003 ff6c 	bl	800753c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_InitTick+0x54>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_InitTick+0x58>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f93b 	bl	800390a <HAL_SYSTICK_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00e      	b.n	80036bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	d80a      	bhi.n	80036ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a4:	2200      	movs	r2, #0
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	f000 f911 	bl	80038d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_InitTick+0x5c>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000018 	.word	0x20000018
 80036c8:	20000008 	.word	0x20000008
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_IncTick+0x20>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_IncTick+0x24>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <HAL_IncTick+0x24>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000008 	.word	0x20000008
 80036f4:	20005174 	.word	0x20005174

080036f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_GetTick+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20005174 	.word	0x20005174

08003710 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7ff ffee 	bl	80036f8 <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d005      	beq.n	8003736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_Delay+0x44>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003736:	bf00      	nop
 8003738:	f7ff ffde 	bl	80036f8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d8f7      	bhi.n	8003738 <HAL_Delay+0x28>
  {
  }
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000008 	.word	0x20000008

08003758 <__NVIC_SetPriorityGrouping>:
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	; (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <__NVIC_GetPriorityGrouping>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <__NVIC_GetPriorityGrouping+0x18>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	f003 0307 	and.w	r3, r3, #7
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	6039      	str	r1, [r7, #0]
 80037c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	db0a      	blt.n	80037e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	490c      	ldr	r1, [pc, #48]	; (8003808 <__NVIC_SetPriority+0x4c>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	440b      	add	r3, r1
 80037e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e4:	e00a      	b.n	80037fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4908      	ldr	r1, [pc, #32]	; (800380c <__NVIC_SetPriority+0x50>)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	3b04      	subs	r3, #4
 80037f4:	0112      	lsls	r2, r2, #4
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	440b      	add	r3, r1
 80037fa:	761a      	strb	r2, [r3, #24]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000e100 	.word	0xe000e100
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f1c3 0307 	rsb	r3, r3, #7
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf28      	it	cs
 800382e:	2304      	movcs	r3, #4
 8003830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3304      	adds	r3, #4
 8003836:	2b06      	cmp	r3, #6
 8003838:	d902      	bls.n	8003840 <NVIC_EncodePriority+0x30>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3b03      	subs	r3, #3
 800383e:	e000      	b.n	8003842 <NVIC_EncodePriority+0x32>
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	401a      	ands	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003858:	f04f 31ff 	mov.w	r1, #4294967295
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	43d9      	mvns	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	4313      	orrs	r3, r2
         );
}
 800386a:	4618      	mov	r0, r3
 800386c:	3724      	adds	r7, #36	; 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003888:	d301      	bcc.n	800388e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388a:	2301      	movs	r3, #1
 800388c:	e00f      	b.n	80038ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <SysTick_Config+0x40>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003896:	210f      	movs	r1, #15
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	f7ff ff8e 	bl	80037bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SysTick_Config+0x40>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <SysTick_Config+0x40>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	e000e010 	.word	0xe000e010

080038bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff47 	bl	8003758 <__NVIC_SetPriorityGrouping>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e4:	f7ff ff5c 	bl	80037a0 <__NVIC_GetPriorityGrouping>
 80038e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff8e 	bl	8003810 <NVIC_EncodePriority>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff5d 	bl	80037bc <__NVIC_SetPriority>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffb0 	bl	8003878 <SysTick_Config>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003932:	e160      	b.n	8003bf6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8152 	beq.w	8003bf0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d005      	beq.n	8003964 <HAL_GPIO_Init+0x40>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d130      	bne.n	80039c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800399a:	2201      	movs	r2, #1
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0201 	and.w	r2, r3, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d017      	beq.n	8003a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d123      	bne.n	8003a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	08da      	lsrs	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3208      	adds	r2, #8
 8003a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	220f      	movs	r2, #15
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	08da      	lsrs	r2, r3, #3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3208      	adds	r2, #8
 8003a50:	6939      	ldr	r1, [r7, #16]
 8003a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0203 	and.w	r2, r3, #3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80ac 	beq.w	8003bf0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a98:	4b5e      	ldr	r3, [pc, #376]	; (8003c14 <HAL_GPIO_Init+0x2f0>)
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	4a5d      	ldr	r2, [pc, #372]	; (8003c14 <HAL_GPIO_Init+0x2f0>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6193      	str	r3, [r2, #24]
 8003aa4:	4b5b      	ldr	r3, [pc, #364]	; (8003c14 <HAL_GPIO_Init+0x2f0>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ab0:	4a59      	ldr	r2, [pc, #356]	; (8003c18 <HAL_GPIO_Init+0x2f4>)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	220f      	movs	r2, #15
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ada:	d025      	beq.n	8003b28 <HAL_GPIO_Init+0x204>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a4f      	ldr	r2, [pc, #316]	; (8003c1c <HAL_GPIO_Init+0x2f8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d01f      	beq.n	8003b24 <HAL_GPIO_Init+0x200>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a4e      	ldr	r2, [pc, #312]	; (8003c20 <HAL_GPIO_Init+0x2fc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d019      	beq.n	8003b20 <HAL_GPIO_Init+0x1fc>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a4d      	ldr	r2, [pc, #308]	; (8003c24 <HAL_GPIO_Init+0x300>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <HAL_GPIO_Init+0x1f8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a4c      	ldr	r2, [pc, #304]	; (8003c28 <HAL_GPIO_Init+0x304>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00d      	beq.n	8003b18 <HAL_GPIO_Init+0x1f4>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a4b      	ldr	r2, [pc, #300]	; (8003c2c <HAL_GPIO_Init+0x308>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d007      	beq.n	8003b14 <HAL_GPIO_Init+0x1f0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a4a      	ldr	r2, [pc, #296]	; (8003c30 <HAL_GPIO_Init+0x30c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_GPIO_Init+0x1ec>
 8003b0c:	2306      	movs	r3, #6
 8003b0e:	e00c      	b.n	8003b2a <HAL_GPIO_Init+0x206>
 8003b10:	2307      	movs	r3, #7
 8003b12:	e00a      	b.n	8003b2a <HAL_GPIO_Init+0x206>
 8003b14:	2305      	movs	r3, #5
 8003b16:	e008      	b.n	8003b2a <HAL_GPIO_Init+0x206>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	e006      	b.n	8003b2a <HAL_GPIO_Init+0x206>
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e004      	b.n	8003b2a <HAL_GPIO_Init+0x206>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e002      	b.n	8003b2a <HAL_GPIO_Init+0x206>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_GPIO_Init+0x206>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	f002 0203 	and.w	r2, r2, #3
 8003b30:	0092      	lsls	r2, r2, #2
 8003b32:	4093      	lsls	r3, r2
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b3a:	4937      	ldr	r1, [pc, #220]	; (8003c18 <HAL_GPIO_Init+0x2f4>)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b6c:	4a31      	ldr	r2, [pc, #196]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b72:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b96:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f ae97 	bne.w	8003934 <HAL_GPIO_Init+0x10>
  }
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	48000400 	.word	0x48000400
 8003c20:	48000800 	.word	0x48000800
 8003c24:	48000c00 	.word	0x48000c00
 8003c28:	48001000 	.word	0x48001000
 8003c2c:	48001400 	.word	0x48001400
 8003c30:	48001800 	.word	0x48001800
 8003c34:	40010400 	.word	0x40010400

08003c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	807b      	strh	r3, [r7, #2]
 8003c44:	4613      	mov	r3, r2
 8003c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c48:	787b      	ldrb	r3, [r7, #1]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c54:	e002      	b.n	8003c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c56:	887a      	ldrh	r2, [r7, #2]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f000 bf01 	b.w	8004a84 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8160 	beq.w	8003f52 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c92:	4bae      	ldr	r3, [pc, #696]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c9e:	4bab      	ldr	r3, [pc, #684]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d159      	bne.n	8003d5e <HAL_RCC_OscConfig+0xf6>
 8003caa:	4ba8      	ldr	r3, [pc, #672]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb6:	d152      	bne.n	8003d5e <HAL_RCC_OscConfig+0xf6>
 8003cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cbc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ccc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_OscConfig+0x82>
 8003ce4:	4b99      	ldr	r3, [pc, #612]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0xae>
 8003cea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d02:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003d06:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003d12:	4b8e      	ldr	r3, [pc, #568]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d1a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003d1e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003d22:	fa92 f2a2 	rbit	r2, r2
 8003d26:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003d2a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003d2e:	fab2 f282 	clz	r2, r2
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	f042 0220 	orr.w	r2, r2, #32
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	f002 021f 	and.w	r2, r2, #31
 8003d3e:	2101      	movs	r1, #1
 8003d40:	fa01 f202 	lsl.w	r2, r1, r2
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8102 	beq.w	8003f50 <HAL_RCC_OscConfig+0x2e8>
 8003d4c:	1d3b      	adds	r3, r7, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 80fc 	bne.w	8003f50 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f000 be93 	b.w	8004a84 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d68:	d106      	bne.n	8003d78 <HAL_RCC_OscConfig+0x110>
 8003d6a:	4b78      	ldr	r3, [pc, #480]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a77      	ldr	r2, [pc, #476]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e030      	b.n	8003dda <HAL_RCC_OscConfig+0x172>
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x134>
 8003d82:	4b72      	ldr	r3, [pc, #456]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a71      	ldr	r2, [pc, #452]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b6f      	ldr	r3, [pc, #444]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6e      	ldr	r2, [pc, #440]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e01e      	b.n	8003dda <HAL_RCC_OscConfig+0x172>
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x15a>
 8003da8:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a67      	ldr	r2, [pc, #412]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a64      	ldr	r2, [pc, #400]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e00b      	b.n	8003dda <HAL_RCC_OscConfig+0x172>
 8003dc2:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a61      	ldr	r2, [pc, #388]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b5f      	ldr	r3, [pc, #380]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a5e      	ldr	r2, [pc, #376]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d059      	beq.n	8003e98 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7ff fc88 	bl	80036f8 <HAL_GetTick>
 8003de8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dee:	f7ff fc83 	bl	80036f8 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d902      	bls.n	8003e04 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	f000 be40 	b.w	8004a84 <HAL_RCC_OscConfig+0xe1c>
 8003e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e08:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003e18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d102      	bne.n	8003e36 <HAL_RCC_OscConfig+0x1ce>
 8003e30:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x1fa>
 8003e36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e4e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e52:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e66:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003e6a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003e6e:	fa92 f2a2 	rbit	r2, r2
 8003e72:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003e76:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e7a:	fab2 f282 	clz	r2, r2
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	f042 0220 	orr.w	r2, r2, #32
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	f002 021f 	and.w	r2, r2, #31
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0ab      	beq.n	8003dee <HAL_RCC_OscConfig+0x186>
 8003e96:	e05c      	b.n	8003f52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7ff fc2e 	bl	80036f8 <HAL_GetTick>
 8003e9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea2:	f7ff fc29 	bl	80036f8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d902      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	f000 bde6 	b.w	8004a84 <HAL_RCC_OscConfig+0xe1c>
 8003eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ebc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003ecc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d102      	bne.n	8003eea <HAL_RCC_OscConfig+0x282>
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x2ae>
 8003eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003f12:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <HAL_RCC_OscConfig+0x2e4>)
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f1a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003f1e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003f22:	fa92 f2a2 	rbit	r2, r2
 8003f26:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003f2a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003f2e:	fab2 f282 	clz	r2, r2
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	f042 0220 	orr.w	r2, r2, #32
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f002 021f 	and.w	r2, r2, #31
 8003f3e:	2101      	movs	r1, #1
 8003f40:	fa01 f202 	lsl.w	r2, r1, r2
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ab      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x23a>
 8003f4a:	e002      	b.n	8003f52 <HAL_RCC_OscConfig+0x2ea>
 8003f4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8170 	beq.w	8004242 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f62:	4bd0      	ldr	r3, [pc, #832]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f6e:	4bcd      	ldr	r3, [pc, #820]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d16d      	bne.n	8004056 <HAL_RCC_OscConfig+0x3ee>
 8003f7a:	4bca      	ldr	r3, [pc, #808]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f86:	d166      	bne.n	8004056 <HAL_RCC_OscConfig+0x3ee>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003f9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x350>
 8003fb2:	4bbc      	ldr	r3, [pc, #752]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	e013      	b.n	8003fe0 <HAL_RCC_OscConfig+0x378>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003fca:	2302      	movs	r3, #2
 8003fcc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003fd0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003fdc:	4bb1      	ldr	r3, [pc, #708]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003fe6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003fea:	fa92 f2a2 	rbit	r2, r2
 8003fee:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003ff2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003ff6:	fab2 f282 	clz	r2, r2
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	f042 0220 	orr.w	r2, r2, #32
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	f002 021f 	and.w	r2, r2, #31
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f202 	lsl.w	r2, r1, r2
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_RCC_OscConfig+0x3ba>
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d002      	beq.n	8004022 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f000 bd31 	b.w	8004a84 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4ba0      	ldr	r3, [pc, #640]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	21f8      	movs	r1, #248	; 0xf8
 8004032:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800403a:	fa91 f1a1 	rbit	r1, r1
 800403e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004042:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004046:	fab1 f181 	clz	r1, r1
 800404a:	b2c9      	uxtb	r1, r1
 800404c:	408b      	lsls	r3, r1
 800404e:	4995      	ldr	r1, [pc, #596]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004054:	e0f5      	b.n	8004242 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8085 	beq.w	800416c <HAL_RCC_OscConfig+0x504>
 8004062:	2301      	movs	r3, #1
 8004064:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004074:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004082:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	461a      	mov	r2, r3
 800408a:	2301      	movs	r3, #1
 800408c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408e:	f7ff fb33 	bl	80036f8 <HAL_GetTick>
 8004092:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004098:	f7ff fb2e 	bl	80036f8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d902      	bls.n	80040ae <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	f000 bceb 	b.w	8004a84 <HAL_RCC_OscConfig+0xe1c>
 80040ae:	2302      	movs	r3, #2
 80040b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80040c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d102      	bne.n	80040de <HAL_RCC_OscConfig+0x476>
 80040d8:	4b72      	ldr	r3, [pc, #456]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	e013      	b.n	8004106 <HAL_RCC_OscConfig+0x49e>
 80040de:	2302      	movs	r3, #2
 80040e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80040e8:	fa93 f3a3 	rbit	r3, r3
 80040ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80040f0:	2302      	movs	r3, #2
 80040f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80040f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004102:	4b68      	ldr	r3, [pc, #416]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2202      	movs	r2, #2
 8004108:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800410c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004110:	fa92 f2a2 	rbit	r2, r2
 8004114:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004118:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800411c:	fab2 f282 	clz	r2, r2
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f042 0220 	orr.w	r2, r2, #32
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	f002 021f 	and.w	r2, r2, #31
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	4013      	ands	r3, r2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0af      	beq.n	8004098 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	4b5a      	ldr	r3, [pc, #360]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	21f8      	movs	r1, #248	; 0xf8
 8004148:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004150:	fa91 f1a1 	rbit	r1, r1
 8004154:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004158:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800415c:	fab1 f181 	clz	r1, r1
 8004160:	b2c9      	uxtb	r1, r1
 8004162:	408b      	lsls	r3, r1
 8004164:	494f      	ldr	r1, [pc, #316]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
 800416a:	e06a      	b.n	8004242 <HAL_RCC_OscConfig+0x5da>
 800416c:	2301      	movs	r3, #1
 800416e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800417e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800418c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	461a      	mov	r2, r3
 8004194:	2300      	movs	r3, #0
 8004196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7ff faae 	bl	80036f8 <HAL_GetTick>
 800419c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a2:	f7ff faa9 	bl	80036f8 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d902      	bls.n	80041b8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	f000 bc66 	b.w	8004a84 <HAL_RCC_OscConfig+0xe1c>
 80041b8:	2302      	movs	r3, #2
 80041ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041c2:	fa93 f3a3 	rbit	r3, r3
 80041c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80041ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d102      	bne.n	80041e8 <HAL_RCC_OscConfig+0x580>
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	e013      	b.n	8004210 <HAL_RCC_OscConfig+0x5a8>
 80041e8:	2302      	movs	r3, #2
 80041ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041fa:	2302      	movs	r3, #2
 80041fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004200:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <HAL_RCC_OscConfig+0x63c>)
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	2202      	movs	r2, #2
 8004212:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004216:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800421a:	fa92 f2a2 	rbit	r2, r2
 800421e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004222:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004226:	fab2 f282 	clz	r2, r2
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	f042 0220 	orr.w	r2, r2, #32
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	f002 021f 	and.w	r2, r2, #31
 8004236:	2101      	movs	r1, #1
 8004238:	fa01 f202 	lsl.w	r2, r1, r2
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1af      	bne.n	80041a2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80da 	beq.w	8004406 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d069      	beq.n	8004330 <HAL_RCC_OscConfig+0x6c8>
 800425c:	2301      	movs	r3, #1
 800425e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800426e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_OscConfig+0x640>)
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	461a      	mov	r2, r3
 8004282:	2301      	movs	r3, #1
 8004284:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004286:	f7ff fa37 	bl	80036f8 <HAL_GetTick>
 800428a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	e00d      	b.n	80042ac <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004290:	f7ff fa32 	bl	80036f8 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d905      	bls.n	80042ac <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e3ef      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
 80042a4:	40021000 	.word	0x40021000
 80042a8:	10908120 	.word	0x10908120
 80042ac:	2302      	movs	r3, #2
 80042ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b6:	fa93 f2a3 	rbit	r2, r3
 80042ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80042c4:	2202      	movs	r2, #2
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	fa93 f2a3 	rbit	r2, r3
 80042d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80042dc:	2202      	movs	r2, #2
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	fa93 f2a3 	rbit	r2, r3
 80042ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80042ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f0:	4ba4      	ldr	r3, [pc, #656]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80042f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80042f8:	2102      	movs	r1, #2
 80042fa:	6019      	str	r1, [r3, #0]
 80042fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	fa93 f1a3 	rbit	r1, r3
 8004306:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800430a:	6019      	str	r1, [r3, #0]
  return result;
 800430c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	2101      	movs	r1, #1
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0b0      	beq.n	8004290 <HAL_RCC_OscConfig+0x628>
 800432e:	e06a      	b.n	8004406 <HAL_RCC_OscConfig+0x79e>
 8004330:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	fa93 f2a3 	rbit	r2, r3
 8004342:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004346:	601a      	str	r2, [r3, #0]
  return result;
 8004348:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800434c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	4b8c      	ldr	r3, [pc, #560]	; (8004588 <HAL_RCC_OscConfig+0x920>)
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	461a      	mov	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004362:	f7ff f9c9 	bl	80036f8 <HAL_GetTick>
 8004366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436a:	e009      	b.n	8004380 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436c:	f7ff f9c4 	bl	80036f8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e381      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
 8004380:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004384:	2202      	movs	r2, #2
 8004386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	fa93 f2a3 	rbit	r2, r3
 8004392:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800439c:	2202      	movs	r2, #2
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	fa93 f2a3 	rbit	r2, r3
 80043aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80043b4:	2202      	movs	r2, #2
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	fa93 f2a3 	rbit	r2, r3
 80043c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80043c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	4b6e      	ldr	r3, [pc, #440]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80043ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80043d0:	2102      	movs	r1, #2
 80043d2:	6019      	str	r1, [r3, #0]
 80043d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	fa93 f1a3 	rbit	r1, r3
 80043de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80043e2:	6019      	str	r1, [r3, #0]
  return result;
 80043e4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	2101      	movs	r1, #1
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1b2      	bne.n	800436c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8157 	beq.w	80046c4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441c:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d112      	bne.n	800444e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004428:	4b56      	ldr	r3, [pc, #344]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	4a55      	ldr	r2, [pc, #340]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 800442e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004432:	61d3      	str	r3, [r2, #28]
 8004434:	4b53      	ldr	r3, [pc, #332]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f107 030c 	add.w	r3, r7, #12
 8004446:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	4b4f      	ldr	r3, [pc, #316]	; (800458c <HAL_RCC_OscConfig+0x924>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d11a      	bne.n	8004490 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445a:	4b4c      	ldr	r3, [pc, #304]	; (800458c <HAL_RCC_OscConfig+0x924>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a4b      	ldr	r2, [pc, #300]	; (800458c <HAL_RCC_OscConfig+0x924>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7ff f947 	bl	80036f8 <HAL_GetTick>
 800446a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446e:	e009      	b.n	8004484 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004470:	f7ff f942 	bl	80036f8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e2ff      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCC_OscConfig+0x924>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ef      	beq.n	8004470 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d106      	bne.n	80044a8 <HAL_RCC_OscConfig+0x840>
 800449a:	4b3a      	ldr	r3, [pc, #232]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	4a39      	ldr	r2, [pc, #228]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6213      	str	r3, [r2, #32]
 80044a6:	e02f      	b.n	8004508 <HAL_RCC_OscConfig+0x8a0>
 80044a8:	1d3b      	adds	r3, r7, #4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x864>
 80044b2:	4b34      	ldr	r3, [pc, #208]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	4a33      	ldr	r2, [pc, #204]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	6213      	str	r3, [r2, #32]
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	4a30      	ldr	r2, [pc, #192]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044c4:	f023 0304 	bic.w	r3, r3, #4
 80044c8:	6213      	str	r3, [r2, #32]
 80044ca:	e01d      	b.n	8004508 <HAL_RCC_OscConfig+0x8a0>
 80044cc:	1d3b      	adds	r3, r7, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x888>
 80044d6:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6213      	str	r3, [r2, #32]
 80044e2:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	4a27      	ldr	r2, [pc, #156]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6213      	str	r3, [r2, #32]
 80044ee:	e00b      	b.n	8004508 <HAL_RCC_OscConfig+0x8a0>
 80044f0:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4a23      	ldr	r2, [pc, #140]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	6213      	str	r3, [r2, #32]
 80044fc:	4b21      	ldr	r3, [pc, #132]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	4a20      	ldr	r2, [pc, #128]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 8004502:	f023 0304 	bic.w	r3, r3, #4
 8004506:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d06a      	beq.n	80045e8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004512:	f7ff f8f1 	bl	80036f8 <HAL_GetTick>
 8004516:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	e00b      	b.n	8004534 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7ff f8ec 	bl	80036f8 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e2a7      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
 8004534:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004538:	2202      	movs	r2, #2
 800453a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	fa93 f2a3 	rbit	r2, r3
 8004546:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004550:	2202      	movs	r2, #2
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	fa93 f2a3 	rbit	r2, r3
 800455e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004562:	601a      	str	r2, [r3, #0]
  return result;
 8004564:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004568:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f043 0302 	orr.w	r3, r3, #2
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d108      	bne.n	8004590 <HAL_RCC_OscConfig+0x928>
 800457e:	4b01      	ldr	r3, [pc, #4]	; (8004584 <HAL_RCC_OscConfig+0x91c>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	e013      	b.n	80045ac <HAL_RCC_OscConfig+0x944>
 8004584:	40021000 	.word	0x40021000
 8004588:	10908120 	.word	0x10908120
 800458c:	40007000 	.word	0x40007000
 8004590:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004594:	2202      	movs	r2, #2
 8004596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	fa93 f2a3 	rbit	r2, r3
 80045a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	4bc0      	ldr	r3, [pc, #768]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80045b0:	2102      	movs	r1, #2
 80045b2:	6011      	str	r1, [r2, #0]
 80045b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	fa92 f1a2 	rbit	r1, r2
 80045be:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80045c2:	6011      	str	r1, [r2, #0]
  return result;
 80045c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	fab2 f282 	clz	r2, r2
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	f002 021f 	and.w	r2, r2, #31
 80045da:	2101      	movs	r1, #1
 80045dc:	fa01 f202 	lsl.w	r2, r1, r2
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d09a      	beq.n	800451c <HAL_RCC_OscConfig+0x8b4>
 80045e6:	e063      	b.n	80046b0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e8:	f7ff f886 	bl	80036f8 <HAL_GetTick>
 80045ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f0:	e00b      	b.n	800460a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f2:	f7ff f881 	bl	80036f8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e23c      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
 800460a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800460e:	2202      	movs	r2, #2
 8004610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	fa93 f2a3 	rbit	r2, r3
 800461c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004626:	2202      	movs	r2, #2
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	fa93 f2a3 	rbit	r2, r3
 8004634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004638:	601a      	str	r2, [r3, #0]
  return result;
 800463a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800463e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f043 0302 	orr.w	r3, r3, #2
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d102      	bne.n	800465a <HAL_RCC_OscConfig+0x9f2>
 8004654:	4b95      	ldr	r3, [pc, #596]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	e00d      	b.n	8004676 <HAL_RCC_OscConfig+0xa0e>
 800465a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800465e:	2202      	movs	r2, #2
 8004660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	fa93 f2a3 	rbit	r2, r3
 800466c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	4b8e      	ldr	r3, [pc, #568]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800467a:	2102      	movs	r1, #2
 800467c:	6011      	str	r1, [r2, #0]
 800467e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	fa92 f1a2 	rbit	r1, r2
 8004688:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800468c:	6011      	str	r1, [r2, #0]
  return result;
 800468e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	fab2 f282 	clz	r2, r2
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	f002 021f 	and.w	r2, r2, #31
 80046a4:	2101      	movs	r1, #1
 80046a6:	fa01 f202 	lsl.w	r2, r1, r2
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1a0      	bne.n	80045f2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046b0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	4b7c      	ldr	r3, [pc, #496]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4a7b      	ldr	r2, [pc, #492]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 80046be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c4:	1d3b      	adds	r3, r7, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 81d9 	beq.w	8004a82 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046d0:	4b76      	ldr	r3, [pc, #472]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b08      	cmp	r3, #8
 80046da:	f000 81a6 	beq.w	8004a2a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f040 811e 	bne.w	8004926 <HAL_RCC_OscConfig+0xcbe>
 80046ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80046ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	fa93 f2a3 	rbit	r2, r3
 80046fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004702:	601a      	str	r2, [r3, #0]
  return result;
 8004704:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004708:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	fab3 f383 	clz	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004714:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	461a      	mov	r2, r3
 800471c:	2300      	movs	r3, #0
 800471e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fe ffea 	bl	80036f8 <HAL_GetTick>
 8004724:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004728:	e009      	b.n	800473e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472a:	f7fe ffe5 	bl	80036f8 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e1a2      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
 800473e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004742:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	fa93 f2a3 	rbit	r2, r3
 8004752:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004756:	601a      	str	r2, [r3, #0]
  return result;
 8004758:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800475c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d102      	bne.n	8004778 <HAL_RCC_OscConfig+0xb10>
 8004772:	4b4e      	ldr	r3, [pc, #312]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	e01b      	b.n	80047b0 <HAL_RCC_OscConfig+0xb48>
 8004778:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800477c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	fa93 f2a3 	rbit	r2, r3
 800478c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004796:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	fa93 f2a3 	rbit	r2, r3
 80047a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80047b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	fa92 f1a2 	rbit	r1, r2
 80047c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047c8:	6011      	str	r1, [r2, #0]
  return result;
 80047ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	fab2 f282 	clz	r2, r2
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	f042 0220 	orr.w	r2, r2, #32
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	f002 021f 	and.w	r2, r2, #31
 80047e0:	2101      	movs	r1, #1
 80047e2:	fa01 f202 	lsl.w	r2, r1, r2
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d19e      	bne.n	800472a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ec:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	f023 020f 	bic.w	r2, r3, #15
 80047f4:	1d3b      	adds	r3, r7, #4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	492c      	ldr	r1, [pc, #176]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004800:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a19      	ldr	r1, [r3, #32]
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	430b      	orrs	r3, r1
 8004816:	4925      	ldr	r1, [pc, #148]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
 800481c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	fa93 f2a3 	rbit	r2, r3
 8004830:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004834:	601a      	str	r2, [r3, #0]
  return result;
 8004836:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800483a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483c:	fab3 f383 	clz	r3, r3
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004846:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	461a      	mov	r2, r3
 800484e:	2301      	movs	r3, #1
 8004850:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004852:	f7fe ff51 	bl	80036f8 <HAL_GetTick>
 8004856:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800485a:	e009      	b.n	8004870 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485c:	f7fe ff4c 	bl	80036f8 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e109      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
 8004870:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	fa93 f2a3 	rbit	r2, r3
 8004884:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004888:	601a      	str	r2, [r3, #0]
  return result;
 800488a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800488e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_OscConfig+0xc48>
 80048a4:	4b01      	ldr	r3, [pc, #4]	; (80048ac <HAL_RCC_OscConfig+0xc44>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	e01e      	b.n	80048e8 <HAL_RCC_OscConfig+0xc80>
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000
 80048b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	fa93 f2a3 	rbit	r2, r3
 80048c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	fa93 f2a3 	rbit	r2, r3
 80048de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	4b6a      	ldr	r3, [pc, #424]	; (8004a90 <HAL_RCC_OscConfig+0xe28>)
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80048ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048f0:	6011      	str	r1, [r2, #0]
 80048f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	fa92 f1a2 	rbit	r1, r2
 80048fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004900:	6011      	str	r1, [r2, #0]
  return result;
 8004902:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	fab2 f282 	clz	r2, r2
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	f042 0220 	orr.w	r2, r2, #32
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	f002 021f 	and.w	r2, r2, #31
 8004918:	2101      	movs	r1, #1
 800491a:	fa01 f202 	lsl.w	r2, r1, r2
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d09b      	beq.n	800485c <HAL_RCC_OscConfig+0xbf4>
 8004924:	e0ad      	b.n	8004a82 <HAL_RCC_OscConfig+0xe1a>
 8004926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800492a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800492e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004930:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	fa93 f2a3 	rbit	r2, r3
 800493a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800493e:	601a      	str	r2, [r3, #0]
  return result;
 8004940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004944:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004950:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	461a      	mov	r2, r3
 8004958:	2300      	movs	r3, #0
 800495a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fe fecc 	bl	80036f8 <HAL_GetTick>
 8004960:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004964:	e009      	b.n	800497a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004966:	f7fe fec7 	bl	80036f8 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e084      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
 800497a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800497e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	fa93 f2a3 	rbit	r2, r3
 800498e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004992:	601a      	str	r2, [r3, #0]
  return result;
 8004994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004998:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d102      	bne.n	80049b4 <HAL_RCC_OscConfig+0xd4c>
 80049ae:	4b38      	ldr	r3, [pc, #224]	; (8004a90 <HAL_RCC_OscConfig+0xe28>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	e01b      	b.n	80049ec <HAL_RCC_OscConfig+0xd84>
 80049b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	fa93 f2a3 	rbit	r2, r3
 80049c8:	f107 0320 	add.w	r3, r7, #32
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	f107 031c 	add.w	r3, r7, #28
 80049d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	f107 031c 	add.w	r3, r7, #28
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	fa93 f2a3 	rbit	r2, r3
 80049e2:	f107 0318 	add.w	r3, r7, #24
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <HAL_RCC_OscConfig+0xe28>)
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	f107 0214 	add.w	r2, r7, #20
 80049f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049f4:	6011      	str	r1, [r2, #0]
 80049f6:	f107 0214 	add.w	r2, r7, #20
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	fa92 f1a2 	rbit	r1, r2
 8004a00:	f107 0210 	add.w	r2, r7, #16
 8004a04:	6011      	str	r1, [r2, #0]
  return result;
 8004a06:	f107 0210 	add.w	r2, r7, #16
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	fab2 f282 	clz	r2, r2
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	f042 0220 	orr.w	r2, r2, #32
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	f002 021f 	and.w	r2, r2, #31
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d19e      	bne.n	8004966 <HAL_RCC_OscConfig+0xcfe>
 8004a28:	e02b      	b.n	8004a82 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2a:	1d3b      	adds	r3, r7, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e025      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a38:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <HAL_RCC_OscConfig+0xe28>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <HAL_RCC_OscConfig+0xe28>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a4c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004a50:	1d3b      	adds	r3, r7, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d111      	bne.n	8004a7e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004a5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a62:	1d3b      	adds	r3, r7, #4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d108      	bne.n	8004a7e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a70:	f003 020f 	and.w	r2, r3, #15
 8004a74:	1d3b      	adds	r3, r7, #4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000

08004a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b09e      	sub	sp, #120	; 0x78
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e162      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aac:	4b90      	ldr	r3, [pc, #576]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d910      	bls.n	8004adc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b8d      	ldr	r3, [pc, #564]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 0207 	bic.w	r2, r3, #7
 8004ac2:	498b      	ldr	r1, [pc, #556]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b89      	ldr	r3, [pc, #548]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e14a      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	497f      	ldr	r1, [pc, #508]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80dc 	beq.w	8004cc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d13c      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xf6>
 8004b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d102      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xa6>
 8004b34:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	e00f      	b.n	8004b5a <HAL_RCC_ClockConfig+0xc6>
 8004b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	667b      	str	r3, [r7, #100]	; 0x64
 8004b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b50:	fa93 f3a3 	rbit	r3, r3
 8004b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b56:	4b67      	ldr	r3, [pc, #412]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b62:	fa92 f2a2 	rbit	r2, r2
 8004b66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b6a:	fab2 f282 	clz	r2, r2
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	f042 0220 	orr.w	r2, r2, #32
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	f002 021f 	and.w	r2, r2, #31
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d17b      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0f3      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d13c      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x178>
 8004b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9a:	fa93 f3a3 	rbit	r3, r3
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d102      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x128>
 8004bb6:	4b4f      	ldr	r3, [pc, #316]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	e00f      	b.n	8004bdc <HAL_RCC_ClockConfig+0x148>
 8004bbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc4:	fa93 f3a3 	rbit	r3, r3
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bce:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd2:	fa93 f3a3 	rbit	r3, r3
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd8:	4b46      	ldr	r3, [pc, #280]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004be0:	63ba      	str	r2, [r7, #56]	; 0x38
 8004be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be4:	fa92 f2a2 	rbit	r2, r2
 8004be8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bec:	fab2 f282 	clz	r2, r2
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	f042 0220 	orr.w	r2, r2, #32
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	f002 021f 	and.w	r2, r2, #31
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d13a      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0b2      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	fab3 f383 	clz	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d102      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x1a0>
 8004c2e:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	e00d      	b.n	8004c50 <HAL_RCC_ClockConfig+0x1bc>
 8004c34:	2302      	movs	r3, #2
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	fa93 f3a3 	rbit	r3, r3
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c40:	2302      	movs	r3, #2
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2202      	movs	r2, #2
 8004c52:	61ba      	str	r2, [r7, #24]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	fa92 f2a2 	rbit	r2, r2
 8004c5a:	617a      	str	r2, [r7, #20]
  return result;
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	fab2 f282 	clz	r2, r2
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	f042 0220 	orr.w	r2, r2, #32
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	f002 021f 	and.w	r2, r2, #31
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f202 	lsl.w	r2, r1, r2
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e079      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f023 0203 	bic.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	491a      	ldr	r1, [pc, #104]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c90:	f7fe fd32 	bl	80036f8 <HAL_GetTick>
 8004c94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c98:	f7fe fd2e 	bl	80036f8 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e061      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 020c 	and.w	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d1eb      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d214      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 0207 	bic.w	r2, r3, #7
 8004cd6:	4906      	ldr	r1, [pc, #24]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e040      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	491a      	ldr	r1, [pc, #104]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4912      	ldr	r1, [pc, #72]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004d36:	f000 f829 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d44:	22f0      	movs	r2, #240	; 0xf0
 8004d46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	fa92 f2a2 	rbit	r2, r2
 8004d4e:	60fa      	str	r2, [r7, #12]
  return result;
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	fab2 f282 	clz	r2, r2
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	40d3      	lsrs	r3, r2
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <HAL_RCC_ClockConfig+0x2ec>)
 8004d5c:	5cd3      	ldrb	r3, [r2, r3]
 8004d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8004d62:	4a08      	ldr	r2, [pc, #32]	; (8004d84 <HAL_RCC_ClockConfig+0x2f0>)
 8004d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004d66:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <HAL_RCC_ClockConfig+0x2f4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fc80 	bl	8003670 <HAL_InitTick>
  
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3778      	adds	r7, #120	; 0x78
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	0800c9ac 	.word	0x0800c9ac
 8004d84:	20000018 	.word	0x20000018
 8004d88:	20000004 	.word	0x20000004

08004d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b08b      	sub	sp, #44	; 0x2c
 8004d90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004da6:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x30>
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8004dba:	e03f      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004dbe:	623b      	str	r3, [r7, #32]
      break;
 8004dc0:	e03f      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004dc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004dcc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	fa92 f2a2 	rbit	r2, r2
 8004dd4:	607a      	str	r2, [r7, #4]
  return result;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	fab2 f282 	clz	r2, r2
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	40d3      	lsrs	r3, r2
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004de6:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	220f      	movs	r2, #15
 8004df0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	fa92 f2a2 	rbit	r2, r2
 8004df8:	60fa      	str	r2, [r7, #12]
  return result;
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	fab2 f282 	clz	r2, r2
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	40d3      	lsrs	r3, r2
 8004e04:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e06:	5cd3      	ldrb	r3, [r2, r3]
 8004e08:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e14:	4a0f      	ldr	r2, [pc, #60]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
 8004e24:	e007      	b.n	8004e36 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e26:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	fb02 f303 	mul.w	r3, r2, r3
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	623b      	str	r3, [r7, #32]
      break;
 8004e3a:	e002      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e3c:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e3e:	623b      	str	r3, [r7, #32]
      break;
 8004e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e42:	6a3b      	ldr	r3, [r7, #32]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	372c      	adds	r7, #44	; 0x2c
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	40021000 	.word	0x40021000
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	0800c98c 	.word	0x0800c98c
 8004e5c:	0800c99c 	.word	0x0800c99c
 8004e60:	007a1200 	.word	0x007a1200

08004e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000018 	.word	0x20000018

08004e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004e82:	f7ff ffef 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004e86:	4601      	mov	r1, r0
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	fa92 f2a2 	rbit	r2, r2
 8004e9c:	603a      	str	r2, [r7, #0]
  return result;
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	fab2 f282 	clz	r2, r2
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	40d3      	lsrs	r3, r2
 8004ea8:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <HAL_RCC_GetPCLK1Freq+0x40>)
 8004eaa:	5cd3      	ldrb	r3, [r2, r3]
 8004eac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	0800c9bc 	.word	0x0800c9bc

08004ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004ec6:	f7ff ffcd 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004eca:	4601      	mov	r1, r0
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ed4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004ed8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	fa92 f2a2 	rbit	r2, r2
 8004ee0:	603a      	str	r2, [r7, #0]
  return result;
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	fab2 f282 	clz	r2, r2
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	40d3      	lsrs	r3, r2
 8004eec:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004eee:	5cd3      	ldrb	r3, [r2, r3]
 8004ef0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000
 8004f00:	0800c9bc 	.word	0x0800c9bc

08004f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b092      	sub	sp, #72	; 0x48
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80d4 	beq.w	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f28:	4b4e      	ldr	r3, [pc, #312]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10e      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f34:	4b4b      	ldr	r3, [pc, #300]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	4a4a      	ldr	r2, [pc, #296]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	61d3      	str	r3, [r2, #28]
 8004f40:	4b48      	ldr	r3, [pc, #288]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f52:	4b45      	ldr	r3, [pc, #276]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d118      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f5e:	4b42      	ldr	r3, [pc, #264]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a41      	ldr	r2, [pc, #260]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6a:	f7fe fbc5 	bl	80036f8 <HAL_GetTick>
 8004f6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	e008      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f72:	f7fe fbc1 	bl	80036f8 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b64      	cmp	r3, #100	; 0x64
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e1d6      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f84:	4b38      	ldr	r3, [pc, #224]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f90:	4b34      	ldr	r3, [pc, #208]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8084 	beq.w	80050aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d07c      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fb0:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	fa93 f3a3 	rbit	r3, r3
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fca:	fab3 f383 	clz	r3, r3
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4b26      	ldr	r3, [pc, #152]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	2301      	movs	r3, #1
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	fa93 f3a3 	rbit	r3, r3
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fee:	fab3 f383 	clz	r3, r3
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b1d      	ldr	r3, [pc, #116]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2300      	movs	r3, #0
 8005000:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005006:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d04b      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fe fb71 	bl	80036f8 <HAL_GetTick>
 8005016:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005018:	e00a      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501a:	f7fe fb6d 	bl	80036f8 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	4293      	cmp	r3, r2
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e180      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005030:	2302      	movs	r3, #2
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
 800503c:	2302      	movs	r3, #2
 800503e:	623b      	str	r3, [r7, #32]
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	fa93 f3a3 	rbit	r3, r3
 8005046:	61fb      	str	r3, [r7, #28]
  return result;
 8005048:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f043 0302 	orr.w	r3, r3, #2
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d108      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800505e:	4b01      	ldr	r3, [pc, #4]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	e00d      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005064:	40021000 	.word	0x40021000
 8005068:	40007000 	.word	0x40007000
 800506c:	10908100 	.word	0x10908100
 8005070:	2302      	movs	r3, #2
 8005072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	fa93 f3a3 	rbit	r3, r3
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	4ba0      	ldr	r3, [pc, #640]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	2202      	movs	r2, #2
 8005082:	613a      	str	r2, [r7, #16]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	fa92 f2a2 	rbit	r2, r2
 800508a:	60fa      	str	r2, [r7, #12]
  return result;
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	fab2 f282 	clz	r2, r2
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	f002 021f 	and.w	r2, r2, #31
 800509e:	2101      	movs	r1, #1
 80050a0:	fa01 f202 	lsl.w	r2, r1, r2
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0b7      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80050aa:	4b95      	ldr	r3, [pc, #596]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4992      	ldr	r1, [pc, #584]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d105      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c4:	4b8e      	ldr	r3, [pc, #568]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	4a8d      	ldr	r2, [pc, #564]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050dc:	4b88      	ldr	r3, [pc, #544]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	f023 0203 	bic.w	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4985      	ldr	r1, [pc, #532]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fa:	4b81      	ldr	r3, [pc, #516]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	497e      	ldr	r1, [pc, #504]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005108:	4313      	orrs	r3, r2
 800510a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005118:	4b79      	ldr	r3, [pc, #484]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	4976      	ldr	r1, [pc, #472]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005136:	4b72      	ldr	r3, [pc, #456]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	f023 0210 	bic.w	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	496f      	ldr	r1, [pc, #444]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005144:	4313      	orrs	r3, r2
 8005146:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005154:	4b6a      	ldr	r3, [pc, #424]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	4967      	ldr	r1, [pc, #412]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005162:	4313      	orrs	r3, r2
 8005164:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005172:	4b63      	ldr	r3, [pc, #396]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	f023 0220 	bic.w	r2, r3, #32
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	4960      	ldr	r1, [pc, #384]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005180:	4313      	orrs	r3, r2
 8005182:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005190:	4b5b      	ldr	r3, [pc, #364]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	4958      	ldr	r1, [pc, #352]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051ae:	4b54      	ldr	r3, [pc, #336]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	4951      	ldr	r1, [pc, #324]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051cc:	4b4c      	ldr	r3, [pc, #304]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	4949      	ldr	r1, [pc, #292]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051ea:	4b45      	ldr	r3, [pc, #276]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	4942      	ldr	r1, [pc, #264]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005208:	4b3d      	ldr	r3, [pc, #244]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	493a      	ldr	r1, [pc, #232]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005216:	4313      	orrs	r3, r2
 8005218:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005226:	4b36      	ldr	r3, [pc, #216]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	4933      	ldr	r1, [pc, #204]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005234:	4313      	orrs	r3, r2
 8005236:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005244:	4b2e      	ldr	r3, [pc, #184]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005250:	492b      	ldr	r1, [pc, #172]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005252:	4313      	orrs	r3, r2
 8005254:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005262:	4b27      	ldr	r3, [pc, #156]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	4924      	ldr	r1, [pc, #144]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005280:	4b1f      	ldr	r3, [pc, #124]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	491c      	ldr	r1, [pc, #112]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800529e:	4b18      	ldr	r3, [pc, #96]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	4915      	ldr	r1, [pc, #84]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c8:	490d      	ldr	r1, [pc, #52]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e6:	4906      	ldr	r1, [pc, #24]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80052f8:	4b01      	ldr	r3, [pc, #4]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000
 8005304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530c:	490b      	ldr	r1, [pc, #44]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800530e:	4313      	orrs	r3, r2
 8005310:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532a:	4904      	ldr	r1, [pc, #16]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800532c:	4313      	orrs	r3, r2
 800532e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3748      	adds	r7, #72	; 0x48
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000

08005340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e09d      	b.n	800548e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d108      	bne.n	800536c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005362:	d009      	beq.n	8005378 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	61da      	str	r2, [r3, #28]
 800536a:	e005      	b.n	8005378 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f002 f8f6 	bl	8007584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053b8:	d902      	bls.n	80053c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e002      	b.n	80053c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053ce:	d007      	beq.n	80053e0 <HAL_SPI_Init+0xa0>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	ea42 0103 	orr.w	r1, r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	f003 0204 	and.w	r2, r3, #4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800545c:	ea42 0103 	orr.w	r1, r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800547c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b088      	sub	sp, #32
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	4613      	mov	r3, r2
 80054a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_SPI_Transmit+0x22>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e158      	b.n	800576a <HAL_SPI_Transmit+0x2d4>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c0:	f7fe f91a 	bl	80036f8 <HAL_GetTick>
 80054c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d002      	beq.n	80054dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
 80054d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054da:	e13d      	b.n	8005758 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_SPI_Transmit+0x52>
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ec:	e134      	b.n	8005758 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2203      	movs	r2, #3
 80054f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	88fa      	ldrh	r2, [r7, #6]
 800550c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005538:	d10f      	bne.n	800555a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005548:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005558:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d007      	beq.n	8005578 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005580:	d94b      	bls.n	800561a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_SPI_Transmit+0xfa>
 800558a:	8afb      	ldrh	r3, [r7, #22]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d13e      	bne.n	800560e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	881a      	ldrh	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	1c9a      	adds	r2, r3, #2
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055b4:	e02b      	b.n	800560e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d112      	bne.n	80055ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	881a      	ldrh	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	1c9a      	adds	r2, r3, #2
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e8:	e011      	b.n	800560e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ea:	f7fe f885 	bl	80036f8 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d803      	bhi.n	8005602 <HAL_SPI_Transmit+0x16c>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d102      	bne.n	8005608 <HAL_SPI_Transmit+0x172>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800560c:	e0a4      	b.n	8005758 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ce      	bne.n	80055b6 <HAL_SPI_Transmit+0x120>
 8005618:	e07c      	b.n	8005714 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_SPI_Transmit+0x192>
 8005622:	8afb      	ldrh	r3, [r7, #22]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d170      	bne.n	800570a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d912      	bls.n	8005658 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	881a      	ldrh	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	1c9a      	adds	r2, r3, #2
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b02      	subs	r3, #2
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005656:	e058      	b.n	800570a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	7812      	ldrb	r2, [r2, #0]
 8005664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800567e:	e044      	b.n	800570a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b02      	cmp	r3, #2
 800568c:	d12b      	bne.n	80056e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d912      	bls.n	80056be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	881a      	ldrh	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	1c9a      	adds	r2, r3, #2
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b02      	subs	r3, #2
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056bc:	e025      	b.n	800570a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056e4:	e011      	b.n	800570a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056e6:	f7fe f807 	bl	80036f8 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d803      	bhi.n	80056fe <HAL_SPI_Transmit+0x268>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d102      	bne.n	8005704 <HAL_SPI_Transmit+0x26e>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005708:	e026      	b.n	8005758 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1b5      	bne.n	8005680 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f949 	bl	80059b0 <SPI_EndRxTxTransaction>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e000      	b.n	8005758 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005756:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005768:	7ffb      	ldrb	r3, [r7, #31]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005784:	f7fd ffb8 	bl	80036f8 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	4413      	add	r3, r2
 8005792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005794:	f7fd ffb0 	bl	80036f8 <HAL_GetTick>
 8005798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800579a:	4b39      	ldr	r3, [pc, #228]	; (8005880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	015b      	lsls	r3, r3, #5
 80057a0:	0d1b      	lsrs	r3, r3, #20
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057aa:	e054      	b.n	8005856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d050      	beq.n	8005856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057b4:	f7fd ffa0 	bl	80036f8 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d902      	bls.n	80057ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d13d      	bne.n	8005846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e2:	d111      	bne.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ec:	d004      	beq.n	80057f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f6:	d107      	bne.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005810:	d10f      	bne.n	8005832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e017      	b.n	8005876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	3b01      	subs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4013      	ands	r3, r2
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	bf0c      	ite	eq
 8005866:	2301      	moveq	r3, #1
 8005868:	2300      	movne	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	429a      	cmp	r2, r3
 8005872:	d19b      	bne.n	80057ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000018 	.word	0x20000018

08005884 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005896:	f7fd ff2f 	bl	80036f8 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	4413      	add	r3, r2
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80058a6:	f7fd ff27 	bl	80036f8 <HAL_GetTick>
 80058aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058b4:	4b3d      	ldr	r3, [pc, #244]	; (80059ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	00da      	lsls	r2, r3, #3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	0d1b      	lsrs	r3, r3, #20
 80058c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80058cc:	e060      	b.n	8005990 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80058d4:	d107      	bne.n	80058e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d050      	beq.n	8005990 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058ee:	f7fd ff03 	bl	80036f8 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d902      	bls.n	8005904 <SPI_WaitFifoStateUntilTimeout+0x80>
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d13d      	bne.n	8005980 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005912:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591c:	d111      	bne.n	8005942 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005926:	d004      	beq.n	8005932 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005930:	d107      	bne.n	8005942 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005940:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800594a:	d10f      	bne.n	800596c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800596a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e010      	b.n	80059a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	3b01      	subs	r3, #1
 800598e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4013      	ands	r3, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d196      	bne.n	80058ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3728      	adds	r7, #40	; 0x28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000018 	.word	0x20000018

080059b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ff5b 	bl	8005884 <SPI_WaitFifoStateUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e027      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2200      	movs	r2, #0
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff fec0 	bl	8005774 <SPI_WaitFlagStateUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e014      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7ff ff34 	bl	8005884 <SPI_WaitFifoStateUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e000      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e040      	b.n	8005ad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fdd4 	bl	800760c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2224      	movs	r2, #36	; 0x24
 8005a68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f992 	bl	8005da4 <UART_SetConfig>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e022      	b.n	8005ad0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fb5c 	bl	8006150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fbe3 	bl	8006294 <UART_CheckIdleState>
 8005ace:	4603      	mov	r3, r0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	f040 8082 	bne.w	8005bf6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UART_Transmit+0x26>
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e07a      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_UART_Transmit+0x38>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e073      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2221      	movs	r2, #33	; 0x21
 8005b24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b26:	f7fd fde7 	bl	80036f8 <HAL_GetTick>
 8005b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	88fa      	ldrh	r2, [r7, #6]
 8005b38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	d108      	bne.n	8005b58 <HAL_UART_Transmit+0x80>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e003      	b.n	8005b60 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b68:	e02d      	b.n	8005bc6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fbd6 	bl	8006326 <UART_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e039      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	881a      	ldrh	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b96:	b292      	uxth	r2, r2
 8005b98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	e008      	b.n	8005bb4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	b292      	uxth	r2, r2
 8005bac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1cb      	bne.n	8005b6a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2140      	movs	r1, #64	; 0x40
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fba2 	bl	8006326 <UART_WaitOnFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e005      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e000      	b.n	8005bf8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
  }
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	f040 80bf 	bne.w	8005d98 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_UART_Receive+0x26>
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e0b7      	b.n	8005d9a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_UART_Receive+0x38>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e0b0      	b.n	8005d9a <HAL_UART_Receive+0x19a>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2222      	movs	r2, #34	; 0x22
 8005c4c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c54:	f7fd fd50 	bl	80036f8 <HAL_GetTick>
 8005c58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	88fa      	ldrh	r2, [r7, #6]
 8005c5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	d10e      	bne.n	8005c92 <HAL_UART_Receive+0x92>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <HAL_UART_Receive+0x88>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c86:	e02d      	b.n	8005ce4 <HAL_UART_Receive+0xe4>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	22ff      	movs	r2, #255	; 0xff
 8005c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c90:	e028      	b.n	8005ce4 <HAL_UART_Receive+0xe4>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <HAL_UART_Receive+0xb6>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <HAL_UART_Receive+0xac>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	22ff      	movs	r2, #255	; 0xff
 8005ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005caa:	e01b      	b.n	8005ce4 <HAL_UART_Receive+0xe4>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	227f      	movs	r2, #127	; 0x7f
 8005cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cb4:	e016      	b.n	8005ce4 <HAL_UART_Receive+0xe4>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cbe:	d10d      	bne.n	8005cdc <HAL_UART_Receive+0xdc>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <HAL_UART_Receive+0xd2>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	227f      	movs	r2, #127	; 0x7f
 8005ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cd0:	e008      	b.n	8005ce4 <HAL_UART_Receive+0xe4>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	223f      	movs	r2, #63	; 0x3f
 8005cd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cda:	e003      	b.n	8005ce4 <HAL_UART_Receive+0xe4>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf4:	d108      	bne.n	8005d08 <HAL_UART_Receive+0x108>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	e003      	b.n	8005d10 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d18:	e033      	b.n	8005d82 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2120      	movs	r1, #32
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fafe 	bl	8006326 <UART_WaitOnFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e032      	b.n	8005d9a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10c      	bne.n	8005d54 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	8a7b      	ldrh	r3, [r7, #18]
 8005d44:	4013      	ands	r3, r2
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	3302      	adds	r3, #2
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	e00d      	b.n	8005d70 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	8a7b      	ldrh	r3, [r7, #18]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	4013      	ands	r3, r2
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1c5      	bne.n	8005d1a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2220      	movs	r2, #32
 8005d92:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e000      	b.n	8005d9a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
  }
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4bab      	ldr	r3, [pc, #684]	; (800607c <UART_SetConfig+0x2d8>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	6979      	ldr	r1, [r7, #20]
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a99      	ldr	r2, [pc, #612]	; (8006080 <UART_SetConfig+0x2dc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d120      	bne.n	8005e62 <UART_SetConfig+0xbe>
 8005e20:	4b98      	ldr	r3, [pc, #608]	; (8006084 <UART_SetConfig+0x2e0>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d817      	bhi.n	8005e5c <UART_SetConfig+0xb8>
 8005e2c:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0x90>)
 8005e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e32:	bf00      	nop
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005e51 	.word	0x08005e51
 8005e3c:	08005e57 	.word	0x08005e57
 8005e40:	08005e4b 	.word	0x08005e4b
 8005e44:	2301      	movs	r3, #1
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e0b5      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e0b2      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005e50:	2304      	movs	r3, #4
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e0af      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005e56:	2308      	movs	r3, #8
 8005e58:	77fb      	strb	r3, [r7, #31]
 8005e5a:	e0ac      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	e0a9      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a88      	ldr	r2, [pc, #544]	; (8006088 <UART_SetConfig+0x2e4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d124      	bne.n	8005eb6 <UART_SetConfig+0x112>
 8005e6c:	4b85      	ldr	r3, [pc, #532]	; (8006084 <UART_SetConfig+0x2e0>)
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e78:	d011      	beq.n	8005e9e <UART_SetConfig+0xfa>
 8005e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e7e:	d817      	bhi.n	8005eb0 <UART_SetConfig+0x10c>
 8005e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e84:	d011      	beq.n	8005eaa <UART_SetConfig+0x106>
 8005e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e8a:	d811      	bhi.n	8005eb0 <UART_SetConfig+0x10c>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <UART_SetConfig+0xf4>
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e94:	d006      	beq.n	8005ea4 <UART_SetConfig+0x100>
 8005e96:	e00b      	b.n	8005eb0 <UART_SetConfig+0x10c>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	e08b      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	77fb      	strb	r3, [r7, #31]
 8005ea2:	e088      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e085      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005eaa:	2308      	movs	r3, #8
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	e082      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e07f      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a74      	ldr	r2, [pc, #464]	; (800608c <UART_SetConfig+0x2e8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d124      	bne.n	8005f0a <UART_SetConfig+0x166>
 8005ec0:	4b70      	ldr	r3, [pc, #448]	; (8006084 <UART_SetConfig+0x2e0>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005ec8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ecc:	d011      	beq.n	8005ef2 <UART_SetConfig+0x14e>
 8005ece:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ed2:	d817      	bhi.n	8005f04 <UART_SetConfig+0x160>
 8005ed4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ed8:	d011      	beq.n	8005efe <UART_SetConfig+0x15a>
 8005eda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ede:	d811      	bhi.n	8005f04 <UART_SetConfig+0x160>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <UART_SetConfig+0x148>
 8005ee4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ee8:	d006      	beq.n	8005ef8 <UART_SetConfig+0x154>
 8005eea:	e00b      	b.n	8005f04 <UART_SetConfig+0x160>
 8005eec:	2300      	movs	r3, #0
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e061      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e05e      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e05b      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005efe:	2308      	movs	r3, #8
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e058      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005f04:	2310      	movs	r3, #16
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e055      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a60      	ldr	r2, [pc, #384]	; (8006090 <UART_SetConfig+0x2ec>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d124      	bne.n	8005f5e <UART_SetConfig+0x1ba>
 8005f14:	4b5b      	ldr	r3, [pc, #364]	; (8006084 <UART_SetConfig+0x2e0>)
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f20:	d011      	beq.n	8005f46 <UART_SetConfig+0x1a2>
 8005f22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f26:	d817      	bhi.n	8005f58 <UART_SetConfig+0x1b4>
 8005f28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f2c:	d011      	beq.n	8005f52 <UART_SetConfig+0x1ae>
 8005f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f32:	d811      	bhi.n	8005f58 <UART_SetConfig+0x1b4>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <UART_SetConfig+0x19c>
 8005f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f3c:	d006      	beq.n	8005f4c <UART_SetConfig+0x1a8>
 8005f3e:	e00b      	b.n	8005f58 <UART_SetConfig+0x1b4>
 8005f40:	2300      	movs	r3, #0
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e037      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005f46:	2302      	movs	r3, #2
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e034      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e031      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005f52:	2308      	movs	r3, #8
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e02e      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e02b      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a4c      	ldr	r2, [pc, #304]	; (8006094 <UART_SetConfig+0x2f0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d124      	bne.n	8005fb2 <UART_SetConfig+0x20e>
 8005f68:	4b46      	ldr	r3, [pc, #280]	; (8006084 <UART_SetConfig+0x2e0>)
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005f70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f74:	d011      	beq.n	8005f9a <UART_SetConfig+0x1f6>
 8005f76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f7a:	d817      	bhi.n	8005fac <UART_SetConfig+0x208>
 8005f7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f80:	d011      	beq.n	8005fa6 <UART_SetConfig+0x202>
 8005f82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f86:	d811      	bhi.n	8005fac <UART_SetConfig+0x208>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <UART_SetConfig+0x1f0>
 8005f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f90:	d006      	beq.n	8005fa0 <UART_SetConfig+0x1fc>
 8005f92:	e00b      	b.n	8005fac <UART_SetConfig+0x208>
 8005f94:	2300      	movs	r3, #0
 8005f96:	77fb      	strb	r3, [r7, #31]
 8005f98:	e00d      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	77fb      	strb	r3, [r7, #31]
 8005f9e:	e00a      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005fa0:	2304      	movs	r3, #4
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e007      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e004      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005fac:	2310      	movs	r3, #16
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e001      	b.n	8005fb6 <UART_SetConfig+0x212>
 8005fb2:	2310      	movs	r3, #16
 8005fb4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fbe:	d16d      	bne.n	800609c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8005fc0:	7ffb      	ldrb	r3, [r7, #31]
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d827      	bhi.n	8006016 <UART_SetConfig+0x272>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <UART_SetConfig+0x228>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	08005ff9 	.word	0x08005ff9
 8005fd4:	08006001 	.word	0x08006001
 8005fd8:	08006017 	.word	0x08006017
 8005fdc:	08006007 	.word	0x08006007
 8005fe0:	08006017 	.word	0x08006017
 8005fe4:	08006017 	.word	0x08006017
 8005fe8:	08006017 	.word	0x08006017
 8005fec:	0800600f 	.word	0x0800600f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff0:	f7fe ff44 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8005ff4:	61b8      	str	r0, [r7, #24]
        break;
 8005ff6:	e013      	b.n	8006020 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff8:	f7fe ff62 	bl	8004ec0 <HAL_RCC_GetPCLK2Freq>
 8005ffc:	61b8      	str	r0, [r7, #24]
        break;
 8005ffe:	e00f      	b.n	8006020 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006000:	4b25      	ldr	r3, [pc, #148]	; (8006098 <UART_SetConfig+0x2f4>)
 8006002:	61bb      	str	r3, [r7, #24]
        break;
 8006004:	e00c      	b.n	8006020 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006006:	f7fe fec1 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 800600a:	61b8      	str	r0, [r7, #24]
        break;
 800600c:	e008      	b.n	8006020 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006012:	61bb      	str	r3, [r7, #24]
        break;
 8006014:	e004      	b.n	8006020 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	77bb      	strb	r3, [r7, #30]
        break;
 800601e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8086 	beq.w	8006134 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	005a      	lsls	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	085b      	lsrs	r3, r3, #1
 8006032:	441a      	add	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	fbb2 f3f3 	udiv	r3, r2, r3
 800603c:	b29b      	uxth	r3, r3
 800603e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b0f      	cmp	r3, #15
 8006044:	d916      	bls.n	8006074 <UART_SetConfig+0x2d0>
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604c:	d212      	bcs.n	8006074 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f023 030f 	bic.w	r3, r3, #15
 8006056:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	b29a      	uxth	r2, r3
 8006064:	89fb      	ldrh	r3, [r7, #14]
 8006066:	4313      	orrs	r3, r2
 8006068:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	89fa      	ldrh	r2, [r7, #14]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	e05f      	b.n	8006134 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	77bb      	strb	r3, [r7, #30]
 8006078:	e05c      	b.n	8006134 <UART_SetConfig+0x390>
 800607a:	bf00      	nop
 800607c:	efff69f3 	.word	0xefff69f3
 8006080:	40013800 	.word	0x40013800
 8006084:	40021000 	.word	0x40021000
 8006088:	40004400 	.word	0x40004400
 800608c:	40004800 	.word	0x40004800
 8006090:	40004c00 	.word	0x40004c00
 8006094:	40005000 	.word	0x40005000
 8006098:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800609c:	7ffb      	ldrb	r3, [r7, #31]
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d827      	bhi.n	80060f2 <UART_SetConfig+0x34e>
 80060a2:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <UART_SetConfig+0x304>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060d5 	.word	0x080060d5
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	080060f3 	.word	0x080060f3
 80060b8:	080060e3 	.word	0x080060e3
 80060bc:	080060f3 	.word	0x080060f3
 80060c0:	080060f3 	.word	0x080060f3
 80060c4:	080060f3 	.word	0x080060f3
 80060c8:	080060eb 	.word	0x080060eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060cc:	f7fe fed6 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 80060d0:	61b8      	str	r0, [r7, #24]
        break;
 80060d2:	e013      	b.n	80060fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d4:	f7fe fef4 	bl	8004ec0 <HAL_RCC_GetPCLK2Freq>
 80060d8:	61b8      	str	r0, [r7, #24]
        break;
 80060da:	e00f      	b.n	80060fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060dc:	4b1b      	ldr	r3, [pc, #108]	; (800614c <UART_SetConfig+0x3a8>)
 80060de:	61bb      	str	r3, [r7, #24]
        break;
 80060e0:	e00c      	b.n	80060fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e2:	f7fe fe53 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 80060e6:	61b8      	str	r0, [r7, #24]
        break;
 80060e8:	e008      	b.n	80060fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ee:	61bb      	str	r3, [r7, #24]
        break;
 80060f0:	e004      	b.n	80060fc <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	77bb      	strb	r3, [r7, #30]
        break;
 80060fa:	bf00      	nop
    }

    if (pclk != 0U)
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d018      	beq.n	8006134 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085a      	lsrs	r2, r3, #1
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	441a      	add	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	fbb2 f3f3 	udiv	r3, r2, r3
 8006114:	b29b      	uxth	r3, r3
 8006116:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	d908      	bls.n	8006130 <UART_SetConfig+0x38c>
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006124:	d204      	bcs.n	8006130 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	60da      	str	r2, [r3, #12]
 800612e:	e001      	b.n	8006134 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006140:	7fbb      	ldrb	r3, [r7, #30]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	007a1200 	.word	0x007a1200

08006150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01a      	beq.n	8006266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800624e:	d10a      	bne.n	8006266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a4:	f7fd fa28 	bl	80036f8 <HAL_GetTick>
 80062a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d10e      	bne.n	80062d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f82d 	bl	8006326 <UART_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e023      	b.n	800631e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d10e      	bne.n	8006302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f817 	bl	8006326 <UART_WaitOnFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e00d      	b.n	800631e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b09c      	sub	sp, #112	; 0x70
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	4613      	mov	r3, r2
 8006334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006336:	e0a5      	b.n	8006484 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	f000 80a1 	beq.w	8006484 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fd f9d9 	bl	80036f8 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <UART_WaitOnFlagUntilTimeout+0x32>
 8006352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006354:	2b00      	cmp	r3, #0
 8006356:	d13e      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800636c:	667b      	str	r3, [r7, #100]	; 0x64
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006378:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800637c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e6      	bne.n	8006358 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	663b      	str	r3, [r7, #96]	; 0x60
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80063ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e5      	bne.n	800638a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e067      	b.n	80064a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d04f      	beq.n	8006484 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f2:	d147      	bne.n	8006484 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
 800641e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	613b      	str	r3, [r7, #16]
   return(result);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	66bb      	str	r3, [r7, #104]	; 0x68
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3308      	adds	r3, #8
 800644e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006450:	623a      	str	r2, [r7, #32]
 8006452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	69f9      	ldr	r1, [r7, #28]
 8006456:	6a3a      	ldr	r2, [r7, #32]
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	61bb      	str	r3, [r7, #24]
   return(result);
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2220      	movs	r2, #32
 8006474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e010      	b.n	80064a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69da      	ldr	r2, [r3, #28]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	4013      	ands	r3, r2
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	429a      	cmp	r2, r3
 8006492:	bf0c      	ite	eq
 8006494:	2301      	moveq	r3, #1
 8006496:	2300      	movne	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	429a      	cmp	r2, r3
 80064a0:	f43f af4a 	beq.w	8006338 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3770      	adds	r7, #112	; 0x70
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <Nucleo_LED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Nucleo_LED(void);
void Nucleo_LED()
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= 0x040000;
 80064b4:	4b08      	ldr	r3, [pc, #32]	; (80064d8 <Nucleo_LED+0x28>)
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	4a07      	ldr	r2, [pc, #28]	; (80064d8 <Nucleo_LED+0x28>)
 80064ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064be:	6153      	str	r3, [r2, #20]
	GPIOB->MODER |=0x4000;
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <Nucleo_LED+0x2c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a05      	ldr	r2, [pc, #20]	; (80064dc <Nucleo_LED+0x2c>)
 80064c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ca:	6013      	str	r3, [r2, #0]
	LED_On_GPIO_SetLow(GPIOB,GPIO_PIN_7);
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	4803      	ldr	r0, [pc, #12]	; (80064dc <Nucleo_LED+0x2c>)
 80064d0:	f7fa ffbe 	bl	8001450 <LED_On_GPIO_SetLow>
//	LED_Off_GPIO_SetHigh(GPIOB,GPIO_PIN_7);
}
 80064d4:	bf00      	nop
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40021000 	.word	0x40021000
 80064dc:	48000400 	.word	0x48000400

080064e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80064e6:	f7fd f8ad 	bl	8003644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80064ea:	f000 febd 	bl	8007268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80064ee:	f000 ffb9 	bl	8007464 <MX_GPIO_Init>
  MX_UART4_Init();
 80064f2:	f000 ff57 	bl	80073a4 <MX_UART4_Init>
  MX_UART5_Init();
 80064f6:	f000 ff85 	bl	8007404 <MX_UART5_Init>
  MX_SPI3_Init();
 80064fa:	f000 ff15 	bl	8007328 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  General_GPIO_Init();
 80064fe:	f7fa fbe9 	bl	8000cd4 <General_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Nucleo_LED();
 8006502:	f7ff ffd5 	bl	80064b0 <Nucleo_LED>


  while(1)
  {

	  	 HAL_UART_Receive(&huart5, receivedData, 40,5000);
 8006506:	f241 3388 	movw	r3, #5000	; 0x1388
 800650a:	2228      	movs	r2, #40	; 0x28
 800650c:	499f      	ldr	r1, [pc, #636]	; (800678c <main+0x2ac>)
 800650e:	48a0      	ldr	r0, [pc, #640]	; (8006790 <main+0x2b0>)
 8006510:	f7ff fb76 	bl	8005c00 <HAL_UART_Receive>

	  	  	  	temp9=(uint*)(receivedData[36]|(receivedData[37]<<8)|(receivedData[38]<<16)|(receivedData[39]<<24));
 8006514:	4b9d      	ldr	r3, [pc, #628]	; (800678c <main+0x2ac>)
 8006516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800651a:	461a      	mov	r2, r3
 800651c:	4b9b      	ldr	r3, [pc, #620]	; (800678c <main+0x2ac>)
 800651e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	431a      	orrs	r2, r3
 8006526:	4b99      	ldr	r3, [pc, #612]	; (800678c <main+0x2ac>)
 8006528:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800652c:	041b      	lsls	r3, r3, #16
 800652e:	431a      	orrs	r2, r3
 8006530:	4b96      	ldr	r3, [pc, #600]	; (800678c <main+0x2ac>)
 8006532:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006536:	061b      	lsls	r3, r3, #24
 8006538:	4313      	orrs	r3, r2
 800653a:	461a      	mov	r2, r3
 800653c:	4b95      	ldr	r3, [pc, #596]	; (8006794 <main+0x2b4>)
 800653e:	601a      	str	r2, [r3, #0]
	  	    	temp8=(uint*)(receivedData[32]|(receivedData[33]<<8)|(receivedData[34]<<16)|(receivedData[35]<<24));
 8006540:	4b92      	ldr	r3, [pc, #584]	; (800678c <main+0x2ac>)
 8006542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006546:	461a      	mov	r2, r3
 8006548:	4b90      	ldr	r3, [pc, #576]	; (800678c <main+0x2ac>)
 800654a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	431a      	orrs	r2, r3
 8006552:	4b8e      	ldr	r3, [pc, #568]	; (800678c <main+0x2ac>)
 8006554:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006558:	041b      	lsls	r3, r3, #16
 800655a:	431a      	orrs	r2, r3
 800655c:	4b8b      	ldr	r3, [pc, #556]	; (800678c <main+0x2ac>)
 800655e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006562:	061b      	lsls	r3, r3, #24
 8006564:	4313      	orrs	r3, r2
 8006566:	461a      	mov	r2, r3
 8006568:	4b8b      	ldr	r3, [pc, #556]	; (8006798 <main+0x2b8>)
 800656a:	601a      	str	r2, [r3, #0]
	  	    	temp7=(uint*)(receivedData[28]|(receivedData[29]<<8)|(receivedData[30]<<16)|(receivedData[31]<<24));
 800656c:	4b87      	ldr	r3, [pc, #540]	; (800678c <main+0x2ac>)
 800656e:	7f1b      	ldrb	r3, [r3, #28]
 8006570:	461a      	mov	r2, r3
 8006572:	4b86      	ldr	r3, [pc, #536]	; (800678c <main+0x2ac>)
 8006574:	7f5b      	ldrb	r3, [r3, #29]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	431a      	orrs	r2, r3
 800657a:	4b84      	ldr	r3, [pc, #528]	; (800678c <main+0x2ac>)
 800657c:	7f9b      	ldrb	r3, [r3, #30]
 800657e:	041b      	lsls	r3, r3, #16
 8006580:	431a      	orrs	r2, r3
 8006582:	4b82      	ldr	r3, [pc, #520]	; (800678c <main+0x2ac>)
 8006584:	7fdb      	ldrb	r3, [r3, #31]
 8006586:	061b      	lsls	r3, r3, #24
 8006588:	4313      	orrs	r3, r2
 800658a:	461a      	mov	r2, r3
 800658c:	4b83      	ldr	r3, [pc, #524]	; (800679c <main+0x2bc>)
 800658e:	601a      	str	r2, [r3, #0]
	  	    	temp6=(uint*)(receivedData[24]|(receivedData[25]<<8)|(receivedData[26]<<16)|(receivedData[27]<<24));
 8006590:	4b7e      	ldr	r3, [pc, #504]	; (800678c <main+0x2ac>)
 8006592:	7e1b      	ldrb	r3, [r3, #24]
 8006594:	461a      	mov	r2, r3
 8006596:	4b7d      	ldr	r3, [pc, #500]	; (800678c <main+0x2ac>)
 8006598:	7e5b      	ldrb	r3, [r3, #25]
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	431a      	orrs	r2, r3
 800659e:	4b7b      	ldr	r3, [pc, #492]	; (800678c <main+0x2ac>)
 80065a0:	7e9b      	ldrb	r3, [r3, #26]
 80065a2:	041b      	lsls	r3, r3, #16
 80065a4:	431a      	orrs	r2, r3
 80065a6:	4b79      	ldr	r3, [pc, #484]	; (800678c <main+0x2ac>)
 80065a8:	7edb      	ldrb	r3, [r3, #27]
 80065aa:	061b      	lsls	r3, r3, #24
 80065ac:	4313      	orrs	r3, r2
 80065ae:	461a      	mov	r2, r3
 80065b0:	4b7b      	ldr	r3, [pc, #492]	; (80067a0 <main+0x2c0>)
 80065b2:	601a      	str	r2, [r3, #0]
	  	    	temp5=(uint*)(receivedData[20]|(receivedData[21]<<8)|(receivedData[22]<<16)|(receivedData[23]<<24));
 80065b4:	4b75      	ldr	r3, [pc, #468]	; (800678c <main+0x2ac>)
 80065b6:	7d1b      	ldrb	r3, [r3, #20]
 80065b8:	461a      	mov	r2, r3
 80065ba:	4b74      	ldr	r3, [pc, #464]	; (800678c <main+0x2ac>)
 80065bc:	7d5b      	ldrb	r3, [r3, #21]
 80065be:	021b      	lsls	r3, r3, #8
 80065c0:	431a      	orrs	r2, r3
 80065c2:	4b72      	ldr	r3, [pc, #456]	; (800678c <main+0x2ac>)
 80065c4:	7d9b      	ldrb	r3, [r3, #22]
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	431a      	orrs	r2, r3
 80065ca:	4b70      	ldr	r3, [pc, #448]	; (800678c <main+0x2ac>)
 80065cc:	7ddb      	ldrb	r3, [r3, #23]
 80065ce:	061b      	lsls	r3, r3, #24
 80065d0:	4313      	orrs	r3, r2
 80065d2:	461a      	mov	r2, r3
 80065d4:	4b73      	ldr	r3, [pc, #460]	; (80067a4 <main+0x2c4>)
 80065d6:	601a      	str	r2, [r3, #0]
	  	    	temp4=(uint*)(receivedData[16]|(receivedData[17]<<8)|(receivedData[18]<<16)|(receivedData[19]<<24));
 80065d8:	4b6c      	ldr	r3, [pc, #432]	; (800678c <main+0x2ac>)
 80065da:	7c1b      	ldrb	r3, [r3, #16]
 80065dc:	461a      	mov	r2, r3
 80065de:	4b6b      	ldr	r3, [pc, #428]	; (800678c <main+0x2ac>)
 80065e0:	7c5b      	ldrb	r3, [r3, #17]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	431a      	orrs	r2, r3
 80065e6:	4b69      	ldr	r3, [pc, #420]	; (800678c <main+0x2ac>)
 80065e8:	7c9b      	ldrb	r3, [r3, #18]
 80065ea:	041b      	lsls	r3, r3, #16
 80065ec:	431a      	orrs	r2, r3
 80065ee:	4b67      	ldr	r3, [pc, #412]	; (800678c <main+0x2ac>)
 80065f0:	7cdb      	ldrb	r3, [r3, #19]
 80065f2:	061b      	lsls	r3, r3, #24
 80065f4:	4313      	orrs	r3, r2
 80065f6:	461a      	mov	r2, r3
 80065f8:	4b6b      	ldr	r3, [pc, #428]	; (80067a8 <main+0x2c8>)
 80065fa:	601a      	str	r2, [r3, #0]
	  	    	temp3=(uint*)(receivedData[12]|(receivedData[13]<<8)|(receivedData[14]<<16)|(receivedData[15]<<24));
 80065fc:	4b63      	ldr	r3, [pc, #396]	; (800678c <main+0x2ac>)
 80065fe:	7b1b      	ldrb	r3, [r3, #12]
 8006600:	461a      	mov	r2, r3
 8006602:	4b62      	ldr	r3, [pc, #392]	; (800678c <main+0x2ac>)
 8006604:	7b5b      	ldrb	r3, [r3, #13]
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	431a      	orrs	r2, r3
 800660a:	4b60      	ldr	r3, [pc, #384]	; (800678c <main+0x2ac>)
 800660c:	7b9b      	ldrb	r3, [r3, #14]
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	431a      	orrs	r2, r3
 8006612:	4b5e      	ldr	r3, [pc, #376]	; (800678c <main+0x2ac>)
 8006614:	7bdb      	ldrb	r3, [r3, #15]
 8006616:	061b      	lsls	r3, r3, #24
 8006618:	4313      	orrs	r3, r2
 800661a:	461a      	mov	r2, r3
 800661c:	4b63      	ldr	r3, [pc, #396]	; (80067ac <main+0x2cc>)
 800661e:	601a      	str	r2, [r3, #0]
	  	    	temp2=(uint*)(receivedData[8]|(receivedData[9]<<8)|(receivedData[10]<<16)|(receivedData[11]<<24));
 8006620:	4b5a      	ldr	r3, [pc, #360]	; (800678c <main+0x2ac>)
 8006622:	7a1b      	ldrb	r3, [r3, #8]
 8006624:	461a      	mov	r2, r3
 8006626:	4b59      	ldr	r3, [pc, #356]	; (800678c <main+0x2ac>)
 8006628:	7a5b      	ldrb	r3, [r3, #9]
 800662a:	021b      	lsls	r3, r3, #8
 800662c:	431a      	orrs	r2, r3
 800662e:	4b57      	ldr	r3, [pc, #348]	; (800678c <main+0x2ac>)
 8006630:	7a9b      	ldrb	r3, [r3, #10]
 8006632:	041b      	lsls	r3, r3, #16
 8006634:	431a      	orrs	r2, r3
 8006636:	4b55      	ldr	r3, [pc, #340]	; (800678c <main+0x2ac>)
 8006638:	7adb      	ldrb	r3, [r3, #11]
 800663a:	061b      	lsls	r3, r3, #24
 800663c:	4313      	orrs	r3, r2
 800663e:	461a      	mov	r2, r3
 8006640:	4b5b      	ldr	r3, [pc, #364]	; (80067b0 <main+0x2d0>)
 8006642:	601a      	str	r2, [r3, #0]
	  	    	temp1=(uint*)(receivedData[4]|(receivedData[5]<<8)|(receivedData[6]<<16)|(receivedData[7]<<24));
 8006644:	4b51      	ldr	r3, [pc, #324]	; (800678c <main+0x2ac>)
 8006646:	791b      	ldrb	r3, [r3, #4]
 8006648:	461a      	mov	r2, r3
 800664a:	4b50      	ldr	r3, [pc, #320]	; (800678c <main+0x2ac>)
 800664c:	795b      	ldrb	r3, [r3, #5]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	431a      	orrs	r2, r3
 8006652:	4b4e      	ldr	r3, [pc, #312]	; (800678c <main+0x2ac>)
 8006654:	799b      	ldrb	r3, [r3, #6]
 8006656:	041b      	lsls	r3, r3, #16
 8006658:	431a      	orrs	r2, r3
 800665a:	4b4c      	ldr	r3, [pc, #304]	; (800678c <main+0x2ac>)
 800665c:	79db      	ldrb	r3, [r3, #7]
 800665e:	061b      	lsls	r3, r3, #24
 8006660:	4313      	orrs	r3, r2
 8006662:	461a      	mov	r2, r3
 8006664:	4b53      	ldr	r3, [pc, #332]	; (80067b4 <main+0x2d4>)
 8006666:	601a      	str	r2, [r3, #0]
	  	    	temp0=(uint*)(receivedData[0]|(receivedData[1]<<8)|(receivedData[2]<<16)|(receivedData[3]<<24));
 8006668:	4b48      	ldr	r3, [pc, #288]	; (800678c <main+0x2ac>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	4b47      	ldr	r3, [pc, #284]	; (800678c <main+0x2ac>)
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	431a      	orrs	r2, r3
 8006676:	4b45      	ldr	r3, [pc, #276]	; (800678c <main+0x2ac>)
 8006678:	789b      	ldrb	r3, [r3, #2]
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	431a      	orrs	r2, r3
 800667e:	4b43      	ldr	r3, [pc, #268]	; (800678c <main+0x2ac>)
 8006680:	78db      	ldrb	r3, [r3, #3]
 8006682:	061b      	lsls	r3, r3, #24
 8006684:	4313      	orrs	r3, r2
 8006686:	461a      	mov	r2, r3
 8006688:	4b4b      	ldr	r3, [pc, #300]	; (80067b8 <main+0x2d8>)
 800668a:	601a      	str	r2, [r3, #0]

	  	    	int method_temp = *(int*)&temp0;
 800668c:	4b4a      	ldr	r3, [pc, #296]	; (80067b8 <main+0x2d8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	61fb      	str	r3, [r7, #28]

	  	    	if(method_temp==1)
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d14b      	bne.n	8006730 <main+0x250>
	  	    	{
	  	    		method= *(int*)&temp0;
 8006698:	4b47      	ldr	r3, [pc, #284]	; (80067b8 <main+0x2d8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a47      	ldr	r2, [pc, #284]	; (80067bc <main+0x2dc>)
 800669e:	6013      	str	r3, [r2, #0]
	  	    		receivedData[0] = 0;
 80066a0:	4b3a      	ldr	r3, [pc, #232]	; (800678c <main+0x2ac>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
	  	    		receivedData[1] = 0;
 80066a6:	4b39      	ldr	r3, [pc, #228]	; (800678c <main+0x2ac>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	705a      	strb	r2, [r3, #1]
	  	    		receivedData[2] = 0;
 80066ac:	4b37      	ldr	r3, [pc, #220]	; (800678c <main+0x2ac>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	709a      	strb	r2, [r3, #2]
	  	    		receivedData[3] = 0;
 80066b2:	4b36      	ldr	r3, [pc, #216]	; (800678c <main+0x2ac>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	70da      	strb	r2, [r3, #3]
	  	    		sprintf(methodName,"Cyclic");
 80066b8:	4941      	ldr	r1, [pc, #260]	; (80067c0 <main+0x2e0>)
 80066ba:	4842      	ldr	r0, [pc, #264]	; (80067c4 <main+0x2e4>)
 80066bc:	f002 ff96 	bl	80095ec <siprintf>
	  	    		CVT.estart=*(float*)&temp1;
 80066c0:	4b3c      	ldr	r3, [pc, #240]	; (80067b4 <main+0x2d4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a40      	ldr	r2, [pc, #256]	; (80067c8 <main+0x2e8>)
 80066c6:	6013      	str	r3, [r2, #0]
	  	    		CVT.estop=*(float*)&temp2;
 80066c8:	4b39      	ldr	r3, [pc, #228]	; (80067b0 <main+0x2d0>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a3e      	ldr	r2, [pc, #248]	; (80067c8 <main+0x2e8>)
 80066ce:	6053      	str	r3, [r2, #4]
	  	    		CVT.current=*(int*)&temp3;
 80066d0:	4b36      	ldr	r3, [pc, #216]	; (80067ac <main+0x2cc>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a3c      	ldr	r2, [pc, #240]	; (80067c8 <main+0x2e8>)
 80066d6:	6113      	str	r3, [r2, #16]
	  	    		int unit_temp=*(int*)&temp4;
 80066d8:	4b33      	ldr	r3, [pc, #204]	; (80067a8 <main+0x2c8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	607b      	str	r3, [r7, #4]
	  	    		if(unit_temp==1)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d104      	bne.n	80066ee <main+0x20e>
	  	    		{
	  	    			sprintf(unit,"pA");
 80066e4:	4939      	ldr	r1, [pc, #228]	; (80067cc <main+0x2ec>)
 80066e6:	483a      	ldr	r0, [pc, #232]	; (80067d0 <main+0x2f0>)
 80066e8:	f002 ff80 	bl	80095ec <siprintf>
 80066ec:	e013      	b.n	8006716 <main+0x236>
	  	    		}
	  	    		else if(unit_temp ==2)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d104      	bne.n	80066fe <main+0x21e>
	  	    		{
	  	    			sprintf(unit,"nA");
 80066f4:	4937      	ldr	r1, [pc, #220]	; (80067d4 <main+0x2f4>)
 80066f6:	4836      	ldr	r0, [pc, #216]	; (80067d0 <main+0x2f0>)
 80066f8:	f002 ff78 	bl	80095ec <siprintf>
 80066fc:	e00b      	b.n	8006716 <main+0x236>
	  	    		}
	  	    		else if(unit_temp==3)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b03      	cmp	r3, #3
 8006702:	d104      	bne.n	800670e <main+0x22e>
	  	    		{
	  	    			sprintf(unit,"µA");
 8006704:	4934      	ldr	r1, [pc, #208]	; (80067d8 <main+0x2f8>)
 8006706:	4832      	ldr	r0, [pc, #200]	; (80067d0 <main+0x2f0>)
 8006708:	f002 ff70 	bl	80095ec <siprintf>
 800670c:	e003      	b.n	8006716 <main+0x236>
	  	    		}
	  	    		else
	  	    		{
	  	    			sprintf(unit,"mA");
 800670e:	4933      	ldr	r1, [pc, #204]	; (80067dc <main+0x2fc>)
 8006710:	482f      	ldr	r0, [pc, #188]	; (80067d0 <main+0x2f0>)
 8006712:	f002 ff6b 	bl	80095ec <siprintf>
	  	    		}
	  	    		CVT.estep=*(float*)&temp5;
 8006716:	4b23      	ldr	r3, [pc, #140]	; (80067a4 <main+0x2c4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a2b      	ldr	r2, [pc, #172]	; (80067c8 <main+0x2e8>)
 800671c:	6093      	str	r3, [r2, #8]

	  	    		CVT.scanrate=*(float*)&temp6;
 800671e:	4b20      	ldr	r3, [pc, #128]	; (80067a0 <main+0x2c0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <main+0x2e8>)
 8006724:	60d3      	str	r3, [r2, #12]
	  	    		CVT.noofscans=*(int*)&temp7;
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <main+0x2bc>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <main+0x2e8>)
 800672c:	6153      	str	r3, [r2, #20]
 800672e:	e1ad      	b.n	8006a8c <main+0x5ac>

	  	    	}
	  	    	else if(method_temp==2)
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d177      	bne.n	8006826 <main+0x346>
	  	    	{
	  	    		method= *(int*)&temp0;
 8006736:	4b20      	ldr	r3, [pc, #128]	; (80067b8 <main+0x2d8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a20      	ldr	r2, [pc, #128]	; (80067bc <main+0x2dc>)
 800673c:	6013      	str	r3, [r2, #0]
	  	    		receivedData[0] = 0;
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <main+0x2ac>)
 8006740:	2200      	movs	r2, #0
 8006742:	701a      	strb	r2, [r3, #0]
	  	    		receivedData[1] = 0;
 8006744:	4b11      	ldr	r3, [pc, #68]	; (800678c <main+0x2ac>)
 8006746:	2200      	movs	r2, #0
 8006748:	705a      	strb	r2, [r3, #1]
	  	    		receivedData[2] = 0;
 800674a:	4b10      	ldr	r3, [pc, #64]	; (800678c <main+0x2ac>)
 800674c:	2200      	movs	r2, #0
 800674e:	709a      	strb	r2, [r3, #2]
	  	    		receivedData[3] = 0;
 8006750:	4b0e      	ldr	r3, [pc, #56]	; (800678c <main+0x2ac>)
 8006752:	2200      	movs	r2, #0
 8006754:	70da      	strb	r2, [r3, #3]
	  	    		sprintf(methodName,"Square wave");
 8006756:	4922      	ldr	r1, [pc, #136]	; (80067e0 <main+0x300>)
 8006758:	481a      	ldr	r0, [pc, #104]	; (80067c4 <main+0x2e4>)
 800675a:	f002 ff47 	bl	80095ec <siprintf>
	  	    		CVT.estart=*(float*)&temp1;
 800675e:	4b15      	ldr	r3, [pc, #84]	; (80067b4 <main+0x2d4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a19      	ldr	r2, [pc, #100]	; (80067c8 <main+0x2e8>)
 8006764:	6013      	str	r3, [r2, #0]
	  	    		CVT.estop=*(float*)&temp2;
 8006766:	4b12      	ldr	r3, [pc, #72]	; (80067b0 <main+0x2d0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <main+0x2e8>)
 800676c:	6053      	str	r3, [r2, #4]
	  	    		CVT.current=*(int*)&temp3;
 800676e:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <main+0x2cc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <main+0x2e8>)
 8006774:	6113      	str	r3, [r2, #16]
	  	    		int unit_temp=*(int*)&temp4;
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <main+0x2c8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60bb      	str	r3, [r7, #8]
	  	    		if(unit_temp==1)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d130      	bne.n	80067e4 <main+0x304>
	  	    		{
	  	    			sprintf(unit,"pA");
 8006782:	4912      	ldr	r1, [pc, #72]	; (80067cc <main+0x2ec>)
 8006784:	4812      	ldr	r0, [pc, #72]	; (80067d0 <main+0x2f0>)
 8006786:	f002 ff31 	bl	80095ec <siprintf>
 800678a:	e03f      	b.n	800680c <main+0x32c>
 800678c:	20005518 	.word	0x20005518
 8006790:	20005488 	.word	0x20005488
 8006794:	20005558 	.word	0x20005558
 8006798:	20005484 	.word	0x20005484
 800679c:	20005550 	.word	0x20005550
 80067a0:	2000550c 	.word	0x2000550c
 80067a4:	20005404 	.word	0x20005404
 80067a8:	20005544 	.word	0x20005544
 80067ac:	20005620 	.word	0x20005620
 80067b0:	20005244 	.word	0x20005244
 80067b4:	20005510 	.word	0x20005510
 80067b8:	20005514 	.word	0x20005514
 80067bc:	2000021c 	.word	0x2000021c
 80067c0:	0800c8e4 	.word	0x0800c8e4
 80067c4:	20005408 	.word	0x20005408
 80067c8:	20003140 	.word	0x20003140
 80067cc:	0800c8ec 	.word	0x0800c8ec
 80067d0:	2000561c 	.word	0x2000561c
 80067d4:	0800c8f0 	.word	0x0800c8f0
 80067d8:	0800c8f4 	.word	0x0800c8f4
 80067dc:	0800c8f8 	.word	0x0800c8f8
 80067e0:	0800c8fc 	.word	0x0800c8fc
	  	    		}
	  	    		else if(unit_temp ==2)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d104      	bne.n	80067f4 <main+0x314>
	  	    		{
	  	    			sprintf(unit,"nA");
 80067ea:	4984      	ldr	r1, [pc, #528]	; (80069fc <main+0x51c>)
 80067ec:	4884      	ldr	r0, [pc, #528]	; (8006a00 <main+0x520>)
 80067ee:	f002 fefd 	bl	80095ec <siprintf>
 80067f2:	e00b      	b.n	800680c <main+0x32c>
	  	    		}
	  	    		else if(unit_temp==3)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d104      	bne.n	8006804 <main+0x324>
	  	    		{
	  	    			sprintf(unit,"µA");
 80067fa:	4982      	ldr	r1, [pc, #520]	; (8006a04 <main+0x524>)
 80067fc:	4880      	ldr	r0, [pc, #512]	; (8006a00 <main+0x520>)
 80067fe:	f002 fef5 	bl	80095ec <siprintf>
 8006802:	e003      	b.n	800680c <main+0x32c>
	  	    		}
	  	    		else
	  	    		{
	  	    			sprintf(unit,"mA");
 8006804:	4980      	ldr	r1, [pc, #512]	; (8006a08 <main+0x528>)
 8006806:	487e      	ldr	r0, [pc, #504]	; (8006a00 <main+0x520>)
 8006808:	f002 fef0 	bl	80095ec <siprintf>
	  	    		}

	  	    		CVT.estep=*(float*)&temp5;
 800680c:	4b7f      	ldr	r3, [pc, #508]	; (8006a0c <main+0x52c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a7f      	ldr	r2, [pc, #508]	; (8006a10 <main+0x530>)
 8006812:	6093      	str	r3, [r2, #8]
	  	    		SWVT.amplitude=*(float*)&temp6;
 8006814:	4b7f      	ldr	r3, [pc, #508]	; (8006a14 <main+0x534>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a7f      	ldr	r2, [pc, #508]	; (8006a18 <main+0x538>)
 800681a:	6053      	str	r3, [r2, #4]
	  	    		SWVT.frequency=*(float*)&temp7;
 800681c:	4b7f      	ldr	r3, [pc, #508]	; (8006a1c <main+0x53c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a7d      	ldr	r2, [pc, #500]	; (8006a18 <main+0x538>)
 8006822:	6093      	str	r3, [r2, #8]
 8006824:	e132      	b.n	8006a8c <main+0x5ac>

	  	    	}
	  	    	else if(method_temp==4)
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	2b04      	cmp	r3, #4
 800682a:	d14f      	bne.n	80068cc <main+0x3ec>
	  	    	{
	  	    		method= *(int*)&temp0;
 800682c:	4b7c      	ldr	r3, [pc, #496]	; (8006a20 <main+0x540>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a7c      	ldr	r2, [pc, #496]	; (8006a24 <main+0x544>)
 8006832:	6013      	str	r3, [r2, #0]
	  	    		receivedData[0] = 0;
 8006834:	4b7c      	ldr	r3, [pc, #496]	; (8006a28 <main+0x548>)
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
	  	    		receivedData[1] = 0;
 800683a:	4b7b      	ldr	r3, [pc, #492]	; (8006a28 <main+0x548>)
 800683c:	2200      	movs	r2, #0
 800683e:	705a      	strb	r2, [r3, #1]
	  	    		receivedData[2] = 0;
 8006840:	4b79      	ldr	r3, [pc, #484]	; (8006a28 <main+0x548>)
 8006842:	2200      	movs	r2, #0
 8006844:	709a      	strb	r2, [r3, #2]
	  	    		receivedData[3] = 0;
 8006846:	4b78      	ldr	r3, [pc, #480]	; (8006a28 <main+0x548>)
 8006848:	2200      	movs	r2, #0
 800684a:	70da      	strb	r2, [r3, #3]
	  	    		sprintf(methodName,"Differential pulse");
 800684c:	4977      	ldr	r1, [pc, #476]	; (8006a2c <main+0x54c>)
 800684e:	4878      	ldr	r0, [pc, #480]	; (8006a30 <main+0x550>)
 8006850:	f002 fecc 	bl	80095ec <siprintf>
	  	    		CVT.estart=*(float*)&temp1;
 8006854:	4b77      	ldr	r3, [pc, #476]	; (8006a34 <main+0x554>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a6d      	ldr	r2, [pc, #436]	; (8006a10 <main+0x530>)
 800685a:	6013      	str	r3, [r2, #0]
	  	    		CVT.estop=*(float*)&temp2;
 800685c:	4b76      	ldr	r3, [pc, #472]	; (8006a38 <main+0x558>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a6b      	ldr	r2, [pc, #428]	; (8006a10 <main+0x530>)
 8006862:	6053      	str	r3, [r2, #4]
	  	    		CVT.current=*(int*)&temp3;
 8006864:	4b75      	ldr	r3, [pc, #468]	; (8006a3c <main+0x55c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a69      	ldr	r2, [pc, #420]	; (8006a10 <main+0x530>)
 800686a:	6113      	str	r3, [r2, #16]
	  	    		int unit_temp=*(int*)&temp4;
 800686c:	4b74      	ldr	r3, [pc, #464]	; (8006a40 <main+0x560>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60fb      	str	r3, [r7, #12]
	  	    		if(unit_temp==1)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d104      	bne.n	8006882 <main+0x3a2>
	  	    		{
	  	    			sprintf(unit,"pA");
 8006878:	4972      	ldr	r1, [pc, #456]	; (8006a44 <main+0x564>)
 800687a:	4861      	ldr	r0, [pc, #388]	; (8006a00 <main+0x520>)
 800687c:	f002 feb6 	bl	80095ec <siprintf>
 8006880:	e013      	b.n	80068aa <main+0x3ca>
	  	    		}
	  	    		else if(unit_temp ==2)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d104      	bne.n	8006892 <main+0x3b2>
	  	    		{
	  	    			sprintf(unit,"nA");
 8006888:	495c      	ldr	r1, [pc, #368]	; (80069fc <main+0x51c>)
 800688a:	485d      	ldr	r0, [pc, #372]	; (8006a00 <main+0x520>)
 800688c:	f002 feae 	bl	80095ec <siprintf>
 8006890:	e00b      	b.n	80068aa <main+0x3ca>
	  	    		}
	  	    		else if(unit_temp==3)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d104      	bne.n	80068a2 <main+0x3c2>
	  	    		{
	  	    			sprintf(unit,"µA");
 8006898:	495a      	ldr	r1, [pc, #360]	; (8006a04 <main+0x524>)
 800689a:	4859      	ldr	r0, [pc, #356]	; (8006a00 <main+0x520>)
 800689c:	f002 fea6 	bl	80095ec <siprintf>
 80068a0:	e003      	b.n	80068aa <main+0x3ca>
	  	    		}
	  	    		else
	  	    		{
	  	    			sprintf(unit,"mA");
 80068a2:	4959      	ldr	r1, [pc, #356]	; (8006a08 <main+0x528>)
 80068a4:	4856      	ldr	r0, [pc, #344]	; (8006a00 <main+0x520>)
 80068a6:	f002 fea1 	bl	80095ec <siprintf>
	  	    		}

	  	    		CVT.estep=*(float*)&temp5;
 80068aa:	4b58      	ldr	r3, [pc, #352]	; (8006a0c <main+0x52c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a58      	ldr	r2, [pc, #352]	; (8006a10 <main+0x530>)
 80068b0:	6093      	str	r3, [r2, #8]
	  	    		DPVT.amplitude=*(float*)&temp6;
 80068b2:	4b58      	ldr	r3, [pc, #352]	; (8006a14 <main+0x534>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a64      	ldr	r2, [pc, #400]	; (8006a48 <main+0x568>)
 80068b8:	6013      	str	r3, [r2, #0]
	  	    		CVT.scanrate=*(float*)&temp7;
 80068ba:	4b58      	ldr	r3, [pc, #352]	; (8006a1c <main+0x53c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a54      	ldr	r2, [pc, #336]	; (8006a10 <main+0x530>)
 80068c0:	60d3      	str	r3, [r2, #12]
	  	    		DPVT.Tpulse=*(float*)&temp8;
 80068c2:	4b62      	ldr	r3, [pc, #392]	; (8006a4c <main+0x56c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a60      	ldr	r2, [pc, #384]	; (8006a48 <main+0x568>)
 80068c8:	6053      	str	r3, [r2, #4]
 80068ca:	e0df      	b.n	8006a8c <main+0x5ac>

	  	    	}
	  	    	else if(method_temp==3)
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	f040 808b 	bne.w	80069ea <main+0x50a>
	  	    	{
	  	    		method= *(int*)&temp0;
 80068d4:	4b52      	ldr	r3, [pc, #328]	; (8006a20 <main+0x540>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a52      	ldr	r2, [pc, #328]	; (8006a24 <main+0x544>)
 80068da:	6013      	str	r3, [r2, #0]
	  	    		receivedData[0] = 0;
 80068dc:	4b52      	ldr	r3, [pc, #328]	; (8006a28 <main+0x548>)
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
	  	    		receivedData[1] = 0;
 80068e2:	4b51      	ldr	r3, [pc, #324]	; (8006a28 <main+0x548>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	705a      	strb	r2, [r3, #1]
	  	    		receivedData[2] = 0;
 80068e8:	4b4f      	ldr	r3, [pc, #316]	; (8006a28 <main+0x548>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	709a      	strb	r2, [r3, #2]
	  	    		receivedData[3] = 0;
 80068ee:	4b4e      	ldr	r3, [pc, #312]	; (8006a28 <main+0x548>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	70da      	strb	r2, [r3, #3]
	  	    		sprintf(methodName,"Impedance");
 80068f4:	4956      	ldr	r1, [pc, #344]	; (8006a50 <main+0x570>)
 80068f6:	484e      	ldr	r0, [pc, #312]	; (8006a30 <main+0x550>)
 80068f8:	f002 fe78 	bl	80095ec <siprintf>
	  	    		IST.edc=*(float*)&temp1;
 80068fc:	4b4d      	ldr	r3, [pc, #308]	; (8006a34 <main+0x554>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a54      	ldr	r2, [pc, #336]	; (8006a54 <main+0x574>)
 8006902:	6013      	str	r3, [r2, #0]
	  	    		IST.eac=*(float*)&temp2;
 8006904:	4b4c      	ldr	r3, [pc, #304]	; (8006a38 <main+0x558>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a52      	ldr	r2, [pc, #328]	; (8006a54 <main+0x574>)
 800690a:	6053      	str	r3, [r2, #4]
	  	    		IST.current=*(int*)&temp3;
 800690c:	4b4b      	ldr	r3, [pc, #300]	; (8006a3c <main+0x55c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a50      	ldr	r2, [pc, #320]	; (8006a54 <main+0x574>)
 8006912:	6093      	str	r3, [r2, #8]
	  	    		int unit_temp=*(int*)&temp4;
 8006914:	4b4a      	ldr	r3, [pc, #296]	; (8006a40 <main+0x560>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	61bb      	str	r3, [r7, #24]
	  	    		if(unit_temp==1)
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d104      	bne.n	800692a <main+0x44a>
	  	    		{
	  	    			sprintf(unit,"pA");
 8006920:	4948      	ldr	r1, [pc, #288]	; (8006a44 <main+0x564>)
 8006922:	4837      	ldr	r0, [pc, #220]	; (8006a00 <main+0x520>)
 8006924:	f002 fe62 	bl	80095ec <siprintf>
 8006928:	e013      	b.n	8006952 <main+0x472>
	  	    		}
	  	    		else if(unit_temp ==2)
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b02      	cmp	r3, #2
 800692e:	d104      	bne.n	800693a <main+0x45a>
	  	    		{
	  	    			sprintf(unit,"nA");
 8006930:	4932      	ldr	r1, [pc, #200]	; (80069fc <main+0x51c>)
 8006932:	4833      	ldr	r0, [pc, #204]	; (8006a00 <main+0x520>)
 8006934:	f002 fe5a 	bl	80095ec <siprintf>
 8006938:	e00b      	b.n	8006952 <main+0x472>
	  	    		}
	  	    		else if(unit_temp==3)
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d104      	bne.n	800694a <main+0x46a>
	  	    		{
	  	    			sprintf(unit,"µA");
 8006940:	4930      	ldr	r1, [pc, #192]	; (8006a04 <main+0x524>)
 8006942:	482f      	ldr	r0, [pc, #188]	; (8006a00 <main+0x520>)
 8006944:	f002 fe52 	bl	80095ec <siprintf>
 8006948:	e003      	b.n	8006952 <main+0x472>
	  	    		}
	  	    		else
	  	    		{
	  	    			sprintf(unit,"mA");
 800694a:	492f      	ldr	r1, [pc, #188]	; (8006a08 <main+0x528>)
 800694c:	482c      	ldr	r0, [pc, #176]	; (8006a00 <main+0x520>)
 800694e:	f002 fe4d 	bl	80095ec <siprintf>
	  	    		}
	  	    		int freqtypeno=*(int*)&temp5;
 8006952:	4b2e      	ldr	r3, [pc, #184]	; (8006a0c <main+0x52c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	617b      	str	r3, [r7, #20]
	  	    		if(freqtypeno==1)
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d104      	bne.n	8006968 <main+0x488>
	  	    		{
	  	    			sprintf(frequency_type,"Fixed");
 800695e:	493e      	ldr	r1, [pc, #248]	; (8006a58 <main+0x578>)
 8006960:	483e      	ldr	r0, [pc, #248]	; (8006a5c <main+0x57c>)
 8006962:	f002 fe43 	bl	80095ec <siprintf>
 8006966:	e00b      	b.n	8006980 <main+0x4a0>
	  	    		}
	  	    		else if (freqtypeno==2)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d104      	bne.n	8006978 <main+0x498>
	  	    		{
	  	    			sprintf(frequency_type,"Scan");
 800696e:	493c      	ldr	r1, [pc, #240]	; (8006a60 <main+0x580>)
 8006970:	483a      	ldr	r0, [pc, #232]	; (8006a5c <main+0x57c>)
 8006972:	f002 fe3b 	bl	80095ec <siprintf>
 8006976:	e003      	b.n	8006980 <main+0x4a0>
	  	    		}
	  	    		else
	  	    		{
	  	    			sprintf(frequency_type,"NA");
 8006978:	493a      	ldr	r1, [pc, #232]	; (8006a64 <main+0x584>)
 800697a:	4838      	ldr	r0, [pc, #224]	; (8006a5c <main+0x57c>)
 800697c:	f002 fe36 	bl	80095ec <siprintf>
	  	    		}
	  	    		IST.frequency=*(float*)&temp6;
 8006980:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <main+0x534>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a33      	ldr	r2, [pc, #204]	; (8006a54 <main+0x574>)
 8006986:	6153      	str	r3, [r2, #20]
	  	    		IST.min_frequency=*(float*)&temp7;
 8006988:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <main+0x53c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a31      	ldr	r2, [pc, #196]	; (8006a54 <main+0x574>)
 800698e:	60d3      	str	r3, [r2, #12]
	  	    		int temp_freqtype;
	  	    		temp_freqtype = *(int*)&temp8;
 8006990:	4b2e      	ldr	r3, [pc, #184]	; (8006a4c <main+0x56c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	613b      	str	r3, [r7, #16]

	  	    		if(temp_freqtype==1)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d104      	bne.n	80069a6 <main+0x4c6>
	  	    		{
	  	    			sprintf(min_frequency_unit,"Hz");
 800699c:	4932      	ldr	r1, [pc, #200]	; (8006a68 <main+0x588>)
 800699e:	4833      	ldr	r0, [pc, #204]	; (8006a6c <main+0x58c>)
 80069a0:	f002 fe24 	bl	80095ec <siprintf>
 80069a4:	e00b      	b.n	80069be <main+0x4de>
	  	    		}
	  	    		else if (temp_freqtype==2)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d104      	bne.n	80069b6 <main+0x4d6>
	  	    		{
	  	    			sprintf(min_frequency_unit,"kHz");
 80069ac:	4930      	ldr	r1, [pc, #192]	; (8006a70 <main+0x590>)
 80069ae:	482f      	ldr	r0, [pc, #188]	; (8006a6c <main+0x58c>)
 80069b0:	f002 fe1c 	bl	80095ec <siprintf>
 80069b4:	e003      	b.n	80069be <main+0x4de>
	  	    		}
	  	    		else
	  	    		{
	  	    			sprintf(min_frequency_unit,"NA");
 80069b6:	492b      	ldr	r1, [pc, #172]	; (8006a64 <main+0x584>)
 80069b8:	482c      	ldr	r0, [pc, #176]	; (8006a6c <main+0x58c>)
 80069ba:	f002 fe17 	bl	80095ec <siprintf>
	  	    		}
	  	    		IST.max_frequency=*(float*)&temp9;
 80069be:	4b2d      	ldr	r3, [pc, #180]	; (8006a74 <main+0x594>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a24      	ldr	r2, [pc, #144]	; (8006a54 <main+0x574>)
 80069c4:	6113      	str	r3, [r2, #16]
	  	    		if(IST.max_frequency)
 80069c6:	4b23      	ldr	r3, [pc, #140]	; (8006a54 <main+0x574>)
 80069c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80069cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80069d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d4:	d004      	beq.n	80069e0 <main+0x500>
	  	    		{
	  	    			sprintf(max_frequency_unit,"kHz");
 80069d6:	4926      	ldr	r1, [pc, #152]	; (8006a70 <main+0x590>)
 80069d8:	4827      	ldr	r0, [pc, #156]	; (8006a78 <main+0x598>)
 80069da:	f002 fe07 	bl	80095ec <siprintf>
 80069de:	e055      	b.n	8006a8c <main+0x5ac>
	  	    		}
	  	    		else
	  	    		{
	  	    			sprintf(max_frequency_unit,"NA");
 80069e0:	4920      	ldr	r1, [pc, #128]	; (8006a64 <main+0x584>)
 80069e2:	4825      	ldr	r0, [pc, #148]	; (8006a78 <main+0x598>)
 80069e4:	f002 fe02 	bl	80095ec <siprintf>
 80069e8:	e050      	b.n	8006a8c <main+0x5ac>

	  	    	}
	  	    	else
	  	    	{

	  	    		if(method == 0)
 80069ea:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <main+0x544>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d148      	bne.n	8006a84 <main+0x5a4>
	  	    		{
	  	    			sprintf(error,"Waiting for receivedData");
 80069f2:	4922      	ldr	r1, [pc, #136]	; (8006a7c <main+0x59c>)
 80069f4:	4822      	ldr	r0, [pc, #136]	; (8006a80 <main+0x5a0>)
 80069f6:	f002 fdf9 	bl	80095ec <siprintf>
 80069fa:	e047      	b.n	8006a8c <main+0x5ac>
 80069fc:	0800c8f0 	.word	0x0800c8f0
 8006a00:	2000561c 	.word	0x2000561c
 8006a04:	0800c8f4 	.word	0x0800c8f4
 8006a08:	0800c8f8 	.word	0x0800c8f8
 8006a0c:	20005404 	.word	0x20005404
 8006a10:	20003140 	.word	0x20003140
 8006a14:	2000550c 	.word	0x2000550c
 8006a18:	200048a8 	.word	0x200048a8
 8006a1c:	20005550 	.word	0x20005550
 8006a20:	20005514 	.word	0x20005514
 8006a24:	2000021c 	.word	0x2000021c
 8006a28:	20005518 	.word	0x20005518
 8006a2c:	0800c908 	.word	0x0800c908
 8006a30:	20005408 	.word	0x20005408
 8006a34:	20005510 	.word	0x20005510
 8006a38:	20005244 	.word	0x20005244
 8006a3c:	20005620 	.word	0x20005620
 8006a40:	20005544 	.word	0x20005544
 8006a44:	0800c8ec 	.word	0x0800c8ec
 8006a48:	200048b4 	.word	0x200048b4
 8006a4c:	20005484 	.word	0x20005484
 8006a50:	0800c91c 	.word	0x0800c91c
 8006a54:	200048bc 	.word	0x200048bc
 8006a58:	0800c928 	.word	0x0800c928
 8006a5c:	20005548 	.word	0x20005548
 8006a60:	0800c930 	.word	0x0800c930
 8006a64:	0800c938 	.word	0x0800c938
 8006a68:	0800c93c 	.word	0x0800c93c
 8006a6c:	2000541c 	.word	0x2000541c
 8006a70:	0800c940 	.word	0x0800c940
 8006a74:	20005558 	.word	0x20005558
 8006a78:	20005540 	.word	0x20005540
 8006a7c:	0800c944 	.word	0x0800c944
 8006a80:	20005560 	.word	0x20005560
	  	    		}
	  	    		else
	  	    		{
	  	    			sprintf(error,"Error while receiving receivedData");
 8006a84:	49a0      	ldr	r1, [pc, #640]	; (8006d08 <main+0x828>)
 8006a86:	48a1      	ldr	r0, [pc, #644]	; (8006d0c <main+0x82c>)
 8006a88:	f002 fdb0 	bl	80095ec <siprintf>
	  	    		}
	  	    	}
if(rand_count==1)
 8006a8c:	4ba0      	ldr	r3, [pc, #640]	; (8006d10 <main+0x830>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	f040 8387 	bne.w	80071a4 <main+0xcc4>
{
	if((method==1) | (method==2) | (method==4))
 8006a96:	4b9f      	ldr	r3, [pc, #636]	; (8006d14 <main+0x834>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2301      	moveq	r3, #1
 8006aa0:	2300      	movne	r3, #0
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	4b9b      	ldr	r3, [pc, #620]	; (8006d14 <main+0x834>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	4b96      	ldr	r3, [pc, #600]	; (8006d14 <main+0x834>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	bf0c      	ite	eq
 8006ac0:	2301      	moveq	r3, #1
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d016      	beq.n	8006afa <main+0x61a>
	{


		  CV_Flag_Var_Init();
 8006acc:	f7fa fce4 	bl	8001498 <CV_Flag_Var_Init>

		  uint8_t switch_volta=0x14;
 8006ad0:	2314      	movs	r3, #20
 8006ad2:	70fb      	strb	r3, [r7, #3]

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ada:	488f      	ldr	r0, [pc, #572]	; (8006d18 <main+0x838>)
 8006adc:	f7fd f8ac 	bl	8003c38 <HAL_GPIO_WritePin>

		  HAL_SPI_Transmit(&hspi3,&switch_volta,1,100);
 8006ae0:	1cf9      	adds	r1, r7, #3
 8006ae2:	2364      	movs	r3, #100	; 0x64
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	488d      	ldr	r0, [pc, #564]	; (8006d1c <main+0x83c>)
 8006ae8:	f7fe fcd5 	bl	8005496 <HAL_SPI_Transmit>

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8006aec:	2201      	movs	r2, #1
 8006aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006af2:	4889      	ldr	r0, [pc, #548]	; (8006d18 <main+0x838>)
 8006af4:	f7fd f8a0 	bl	8003c38 <HAL_GPIO_WritePin>
 8006af8:	e354      	b.n	80071a4 <main+0xcc4>

	}

	else if(method==3)
 8006afa:	4b86      	ldr	r3, [pc, #536]	; (8006d14 <main+0x834>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	f040 8350 	bne.w	80071a4 <main+0xcc4>
	{

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8006b04:	2200      	movs	r2, #0
 8006b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b0a:	4883      	ldr	r0, [pc, #524]	; (8006d18 <main+0x838>)
 8006b0c:	f7fd f894 	bl	8003c38 <HAL_GPIO_WritePin>

		  HAL_SPI_Transmit(&hspi3,&IS_default_switch_value,1,100);
 8006b10:	2364      	movs	r3, #100	; 0x64
 8006b12:	2201      	movs	r2, #1
 8006b14:	4982      	ldr	r1, [pc, #520]	; (8006d20 <main+0x840>)
 8006b16:	4881      	ldr	r0, [pc, #516]	; (8006d1c <main+0x83c>)
 8006b18:	f7fe fcbd 	bl	8005496 <HAL_SPI_Transmit>

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b22:	487d      	ldr	r0, [pc, #500]	; (8006d18 <main+0x838>)
 8006b24:	f7fd f888 	bl	8003c38 <HAL_GPIO_WritePin>





		if(IST.frequency!=0)
 8006b28:	4b7e      	ldr	r3, [pc, #504]	; (8006d24 <main+0x844>)
 8006b2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8006b2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b36:	d015      	beq.n	8006b64 <main+0x684>
		{
			Frequency_List[0] = (uint16_t)IST.frequency;
 8006b38:	4b7a      	ldr	r3, [pc, #488]	; (8006d24 <main+0x844>)
 8006b3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8006b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b42:	ee17 3a90 	vmov	r3, s15
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	4b77      	ldr	r3, [pc, #476]	; (8006d28 <main+0x848>)
 8006b4a:	801a      	strh	r2, [r3, #0]
			Frequency_List[1] =0;
 8006b4c:	4b76      	ldr	r3, [pc, #472]	; (8006d28 <main+0x848>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	805a      	strh	r2, [r3, #2]
			Frequency_List1[0] = IST.frequency;
 8006b52:	4b74      	ldr	r3, [pc, #464]	; (8006d24 <main+0x844>)
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	4a75      	ldr	r2, [pc, #468]	; (8006d2c <main+0x84c>)
 8006b58:	6013      	str	r3, [r2, #0]
			Frequency_List1[1] =0;
 8006b5a:	4b74      	ldr	r3, [pc, #464]	; (8006d2c <main+0x84c>)
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	e31d      	b.n	80071a0 <main+0xcc0>
		}

		else if(IST.min_frequency==1)
 8006b64:	4b6f      	ldr	r3, [pc, #444]	; (8006d24 <main+0x844>)
 8006b66:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b6e:	eef4 7a47 	vcmp.f32	s15, s14
 8006b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b76:	f040 810b 	bne.w	8006d90 <main+0x8b0>
		{
			Frequency_List[0]=(uint16_t)IST.min_frequency;
 8006b7a:	4b6a      	ldr	r3, [pc, #424]	; (8006d24 <main+0x844>)
 8006b7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b84:	ee17 3a90 	vmov	r3, s15
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	4b67      	ldr	r3, [pc, #412]	; (8006d28 <main+0x848>)
 8006b8c:	801a      	strh	r2, [r3, #0]
			Frequency_List[1]=2;
 8006b8e:	4b66      	ldr	r3, [pc, #408]	; (8006d28 <main+0x848>)
 8006b90:	2202      	movs	r2, #2
 8006b92:	805a      	strh	r2, [r3, #2]
			Frequency_List[2]=5;
 8006b94:	4b64      	ldr	r3, [pc, #400]	; (8006d28 <main+0x848>)
 8006b96:	2205      	movs	r2, #5
 8006b98:	809a      	strh	r2, [r3, #4]
			Frequency_List[3]=10;
 8006b9a:	4b63      	ldr	r3, [pc, #396]	; (8006d28 <main+0x848>)
 8006b9c:	220a      	movs	r2, #10
 8006b9e:	80da      	strh	r2, [r3, #6]
			Frequency_List[4]=25;
 8006ba0:	4b61      	ldr	r3, [pc, #388]	; (8006d28 <main+0x848>)
 8006ba2:	2219      	movs	r2, #25
 8006ba4:	811a      	strh	r2, [r3, #8]
			Frequency_List[5]=50;
 8006ba6:	4b60      	ldr	r3, [pc, #384]	; (8006d28 <main+0x848>)
 8006ba8:	2232      	movs	r2, #50	; 0x32
 8006baa:	815a      	strh	r2, [r3, #10]
			Frequency_List[6]=75;
 8006bac:	4b5e      	ldr	r3, [pc, #376]	; (8006d28 <main+0x848>)
 8006bae:	224b      	movs	r2, #75	; 0x4b
 8006bb0:	819a      	strh	r2, [r3, #12]
			Frequency_List[7]=100;
 8006bb2:	4b5d      	ldr	r3, [pc, #372]	; (8006d28 <main+0x848>)
 8006bb4:	2264      	movs	r2, #100	; 0x64
 8006bb6:	81da      	strh	r2, [r3, #14]
			Frequency_List[8]=150;
 8006bb8:	4b5b      	ldr	r3, [pc, #364]	; (8006d28 <main+0x848>)
 8006bba:	2296      	movs	r2, #150	; 0x96
 8006bbc:	821a      	strh	r2, [r3, #16]
			Frequency_List[9]=200;
 8006bbe:	4b5a      	ldr	r3, [pc, #360]	; (8006d28 <main+0x848>)
 8006bc0:	22c8      	movs	r2, #200	; 0xc8
 8006bc2:	825a      	strh	r2, [r3, #18]
			Frequency_List[10]=250;
 8006bc4:	4b58      	ldr	r3, [pc, #352]	; (8006d28 <main+0x848>)
 8006bc6:	22fa      	movs	r2, #250	; 0xfa
 8006bc8:	829a      	strh	r2, [r3, #20]
			Frequency_List[11]=300;Frequency_List[12]=400;Frequency_List[13]=500;Frequency_List[14]=600;Frequency_List[15]=750;Frequency_List[16]=1000;Frequency_List[17]=1500;Frequency_List[18]=2000;
 8006bca:	4b57      	ldr	r3, [pc, #348]	; (8006d28 <main+0x848>)
 8006bcc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006bd0:	82da      	strh	r2, [r3, #22]
 8006bd2:	4b55      	ldr	r3, [pc, #340]	; (8006d28 <main+0x848>)
 8006bd4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006bd8:	831a      	strh	r2, [r3, #24]
 8006bda:	4b53      	ldr	r3, [pc, #332]	; (8006d28 <main+0x848>)
 8006bdc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006be0:	835a      	strh	r2, [r3, #26]
 8006be2:	4b51      	ldr	r3, [pc, #324]	; (8006d28 <main+0x848>)
 8006be4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006be8:	839a      	strh	r2, [r3, #28]
 8006bea:	4b4f      	ldr	r3, [pc, #316]	; (8006d28 <main+0x848>)
 8006bec:	f240 22ee 	movw	r2, #750	; 0x2ee
 8006bf0:	83da      	strh	r2, [r3, #30]
 8006bf2:	4b4d      	ldr	r3, [pc, #308]	; (8006d28 <main+0x848>)
 8006bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bf8:	841a      	strh	r2, [r3, #32]
 8006bfa:	4b4b      	ldr	r3, [pc, #300]	; (8006d28 <main+0x848>)
 8006bfc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006c00:	845a      	strh	r2, [r3, #34]	; 0x22
 8006c02:	4b49      	ldr	r3, [pc, #292]	; (8006d28 <main+0x848>)
 8006c04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006c08:	849a      	strh	r2, [r3, #36]	; 0x24
			Frequency_List[19]=2500;Frequency_List[20]=3000;Frequency_List[21]=5000;Frequency_List[22]=6000;Frequency_List[23]=7500;Frequency_List[24]=9000;Frequency_List[25]=IST.max_frequency*1000;
 8006c0a:	4b47      	ldr	r3, [pc, #284]	; (8006d28 <main+0x848>)
 8006c0c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006c10:	84da      	strh	r2, [r3, #38]	; 0x26
 8006c12:	4b45      	ldr	r3, [pc, #276]	; (8006d28 <main+0x848>)
 8006c14:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006c18:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c1a:	4b43      	ldr	r3, [pc, #268]	; (8006d28 <main+0x848>)
 8006c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c22:	4b41      	ldr	r3, [pc, #260]	; (8006d28 <main+0x848>)
 8006c24:	f241 7270 	movw	r2, #6000	; 0x1770
 8006c28:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006c2a:	4b3f      	ldr	r3, [pc, #252]	; (8006d28 <main+0x848>)
 8006c2c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8006c30:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006c32:	4b3d      	ldr	r3, [pc, #244]	; (8006d28 <main+0x848>)
 8006c34:	f242 3228 	movw	r2, #9000	; 0x2328
 8006c38:	861a      	strh	r2, [r3, #48]	; 0x30
 8006c3a:	4b3a      	ldr	r3, [pc, #232]	; (8006d24 <main+0x844>)
 8006c3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006c40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006d30 <main+0x850>
 8006c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c4c:	ee17 3a90 	vmov	r3, s15
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	4b35      	ldr	r3, [pc, #212]	; (8006d28 <main+0x848>)
 8006c54:	865a      	strh	r2, [r3, #50]	; 0x32

			Frequency_List1[0]=IST.min_frequency;
 8006c56:	4b33      	ldr	r3, [pc, #204]	; (8006d24 <main+0x844>)
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	4a34      	ldr	r2, [pc, #208]	; (8006d2c <main+0x84c>)
 8006c5c:	6013      	str	r3, [r2, #0]
			Frequency_List1[1]=2;
 8006c5e:	4b33      	ldr	r3, [pc, #204]	; (8006d2c <main+0x84c>)
 8006c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006c64:	605a      	str	r2, [r3, #4]
			Frequency_List1[2]=5;
 8006c66:	4b31      	ldr	r3, [pc, #196]	; (8006d2c <main+0x84c>)
 8006c68:	4a32      	ldr	r2, [pc, #200]	; (8006d34 <main+0x854>)
 8006c6a:	609a      	str	r2, [r3, #8]
			Frequency_List1[3]=10;
 8006c6c:	4b2f      	ldr	r3, [pc, #188]	; (8006d2c <main+0x84c>)
 8006c6e:	4a32      	ldr	r2, [pc, #200]	; (8006d38 <main+0x858>)
 8006c70:	60da      	str	r2, [r3, #12]
			Frequency_List1[4]=25;
 8006c72:	4b2e      	ldr	r3, [pc, #184]	; (8006d2c <main+0x84c>)
 8006c74:	4a31      	ldr	r2, [pc, #196]	; (8006d3c <main+0x85c>)
 8006c76:	611a      	str	r2, [r3, #16]
			Frequency_List1[5]=50;
 8006c78:	4b2c      	ldr	r3, [pc, #176]	; (8006d2c <main+0x84c>)
 8006c7a:	4a31      	ldr	r2, [pc, #196]	; (8006d40 <main+0x860>)
 8006c7c:	615a      	str	r2, [r3, #20]
			Frequency_List1[6]=75;
 8006c7e:	4b2b      	ldr	r3, [pc, #172]	; (8006d2c <main+0x84c>)
 8006c80:	4a30      	ldr	r2, [pc, #192]	; (8006d44 <main+0x864>)
 8006c82:	619a      	str	r2, [r3, #24]
			Frequency_List1[7]=100;
 8006c84:	4b29      	ldr	r3, [pc, #164]	; (8006d2c <main+0x84c>)
 8006c86:	4a30      	ldr	r2, [pc, #192]	; (8006d48 <main+0x868>)
 8006c88:	61da      	str	r2, [r3, #28]
			Frequency_List1[8]=150;
 8006c8a:	4b28      	ldr	r3, [pc, #160]	; (8006d2c <main+0x84c>)
 8006c8c:	4a2f      	ldr	r2, [pc, #188]	; (8006d4c <main+0x86c>)
 8006c8e:	621a      	str	r2, [r3, #32]
			Frequency_List1[9]=200;
 8006c90:	4b26      	ldr	r3, [pc, #152]	; (8006d2c <main+0x84c>)
 8006c92:	4a2f      	ldr	r2, [pc, #188]	; (8006d50 <main+0x870>)
 8006c94:	625a      	str	r2, [r3, #36]	; 0x24
			Frequency_List1[10]=250;
 8006c96:	4b25      	ldr	r3, [pc, #148]	; (8006d2c <main+0x84c>)
 8006c98:	4a2e      	ldr	r2, [pc, #184]	; (8006d54 <main+0x874>)
 8006c9a:	629a      	str	r2, [r3, #40]	; 0x28
			Frequency_List1[11]=300;Frequency_List1[12]=400;Frequency_List1[13]=500;Frequency_List1[14]=600;Frequency_List1[15]=750;Frequency_List1[16]=1000;Frequency_List1[17]=1500;Frequency_List1[18]=2000;
 8006c9c:	4b23      	ldr	r3, [pc, #140]	; (8006d2c <main+0x84c>)
 8006c9e:	4a2e      	ldr	r2, [pc, #184]	; (8006d58 <main+0x878>)
 8006ca0:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ca2:	4b22      	ldr	r3, [pc, #136]	; (8006d2c <main+0x84c>)
 8006ca4:	4a2d      	ldr	r2, [pc, #180]	; (8006d5c <main+0x87c>)
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ca8:	4b20      	ldr	r3, [pc, #128]	; (8006d2c <main+0x84c>)
 8006caa:	4a2d      	ldr	r2, [pc, #180]	; (8006d60 <main+0x880>)
 8006cac:	635a      	str	r2, [r3, #52]	; 0x34
 8006cae:	4b1f      	ldr	r3, [pc, #124]	; (8006d2c <main+0x84c>)
 8006cb0:	4a2c      	ldr	r2, [pc, #176]	; (8006d64 <main+0x884>)
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8006cb4:	4b1d      	ldr	r3, [pc, #116]	; (8006d2c <main+0x84c>)
 8006cb6:	4a2c      	ldr	r2, [pc, #176]	; (8006d68 <main+0x888>)
 8006cb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8006cba:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <main+0x84c>)
 8006cbc:	4a2b      	ldr	r2, [pc, #172]	; (8006d6c <main+0x88c>)
 8006cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8006cc0:	4b1a      	ldr	r3, [pc, #104]	; (8006d2c <main+0x84c>)
 8006cc2:	4a2b      	ldr	r2, [pc, #172]	; (8006d70 <main+0x890>)
 8006cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8006cc6:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <main+0x84c>)
 8006cc8:	4a2a      	ldr	r2, [pc, #168]	; (8006d74 <main+0x894>)
 8006cca:	649a      	str	r2, [r3, #72]	; 0x48
			Frequency_List1[19]=2500;Frequency_List1[20]=3000;Frequency_List1[21]=5000;Frequency_List1[22]=6000;Frequency_List1[23]=7500;Frequency_List1[24]=9000;Frequency_List1[25]=IST.max_frequency*1000;
 8006ccc:	4b17      	ldr	r3, [pc, #92]	; (8006d2c <main+0x84c>)
 8006cce:	4a2a      	ldr	r2, [pc, #168]	; (8006d78 <main+0x898>)
 8006cd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8006cd2:	4b16      	ldr	r3, [pc, #88]	; (8006d2c <main+0x84c>)
 8006cd4:	4a29      	ldr	r2, [pc, #164]	; (8006d7c <main+0x89c>)
 8006cd6:	651a      	str	r2, [r3, #80]	; 0x50
 8006cd8:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <main+0x84c>)
 8006cda:	4a29      	ldr	r2, [pc, #164]	; (8006d80 <main+0x8a0>)
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <main+0x84c>)
 8006ce0:	4a28      	ldr	r2, [pc, #160]	; (8006d84 <main+0x8a4>)
 8006ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8006ce4:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <main+0x84c>)
 8006ce6:	4a28      	ldr	r2, [pc, #160]	; (8006d88 <main+0x8a8>)
 8006ce8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cea:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <main+0x84c>)
 8006cec:	4a27      	ldr	r2, [pc, #156]	; (8006d8c <main+0x8ac>)
 8006cee:	661a      	str	r2, [r3, #96]	; 0x60
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <main+0x844>)
 8006cf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8006cf6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006d30 <main+0x850>
 8006cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <main+0x84c>)
 8006d00:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8006d04:	e24c      	b.n	80071a0 <main+0xcc0>
 8006d06:	bf00      	nop
 8006d08:	0800c960 	.word	0x0800c960
 8006d0c:	20005560 	.word	0x20005560
 8006d10:	2000000c 	.word	0x2000000c
 8006d14:	2000021c 	.word	0x2000021c
 8006d18:	48000c00 	.word	0x48000c00
 8006d1c:	20005420 	.word	0x20005420
 8006d20:	20000010 	.word	0x20000010
 8006d24:	200048bc 	.word	0x200048bc
 8006d28:	20005178 	.word	0x20005178
 8006d2c:	20005270 	.word	0x20005270
 8006d30:	447a0000 	.word	0x447a0000
 8006d34:	40a00000 	.word	0x40a00000
 8006d38:	41200000 	.word	0x41200000
 8006d3c:	41c80000 	.word	0x41c80000
 8006d40:	42480000 	.word	0x42480000
 8006d44:	42960000 	.word	0x42960000
 8006d48:	42c80000 	.word	0x42c80000
 8006d4c:	43160000 	.word	0x43160000
 8006d50:	43480000 	.word	0x43480000
 8006d54:	437a0000 	.word	0x437a0000
 8006d58:	43960000 	.word	0x43960000
 8006d5c:	43c80000 	.word	0x43c80000
 8006d60:	43fa0000 	.word	0x43fa0000
 8006d64:	44160000 	.word	0x44160000
 8006d68:	443b8000 	.word	0x443b8000
 8006d6c:	447a0000 	.word	0x447a0000
 8006d70:	44bb8000 	.word	0x44bb8000
 8006d74:	44fa0000 	.word	0x44fa0000
 8006d78:	451c4000 	.word	0x451c4000
 8006d7c:	453b8000 	.word	0x453b8000
 8006d80:	459c4000 	.word	0x459c4000
 8006d84:	45bb8000 	.word	0x45bb8000
 8006d88:	45ea6000 	.word	0x45ea6000
 8006d8c:	460ca000 	.word	0x460ca000
		}

		else if(IST.min_frequency==10)
 8006d90:	4b60      	ldr	r3, [pc, #384]	; (8006f14 <main+0xa34>)
 8006d92:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d96:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006d9a:	eef4 7a47 	vcmp.f32	s15, s14
 8006d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da2:	f040 80e9 	bne.w	8006f78 <main+0xa98>
		{
			Frequency_List[0]=(uint16_t)IST.min_frequency;
 8006da6:	4b5b      	ldr	r3, [pc, #364]	; (8006f14 <main+0xa34>)
 8006da8:	edd3 7a03 	vldr	s15, [r3, #12]
 8006dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db0:	ee17 3a90 	vmov	r3, s15
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	4b58      	ldr	r3, [pc, #352]	; (8006f18 <main+0xa38>)
 8006db8:	801a      	strh	r2, [r3, #0]
			Frequency_List[1]=25;
 8006dba:	4b57      	ldr	r3, [pc, #348]	; (8006f18 <main+0xa38>)
 8006dbc:	2219      	movs	r2, #25
 8006dbe:	805a      	strh	r2, [r3, #2]
			Frequency_List[2]=50;
 8006dc0:	4b55      	ldr	r3, [pc, #340]	; (8006f18 <main+0xa38>)
 8006dc2:	2232      	movs	r2, #50	; 0x32
 8006dc4:	809a      	strh	r2, [r3, #4]
			Frequency_List[3]=75;
 8006dc6:	4b54      	ldr	r3, [pc, #336]	; (8006f18 <main+0xa38>)
 8006dc8:	224b      	movs	r2, #75	; 0x4b
 8006dca:	80da      	strh	r2, [r3, #6]
			Frequency_List[4]=100;
 8006dcc:	4b52      	ldr	r3, [pc, #328]	; (8006f18 <main+0xa38>)
 8006dce:	2264      	movs	r2, #100	; 0x64
 8006dd0:	811a      	strh	r2, [r3, #8]
			Frequency_List[5]=150;
 8006dd2:	4b51      	ldr	r3, [pc, #324]	; (8006f18 <main+0xa38>)
 8006dd4:	2296      	movs	r2, #150	; 0x96
 8006dd6:	815a      	strh	r2, [r3, #10]
			Frequency_List[6]=200;
 8006dd8:	4b4f      	ldr	r3, [pc, #316]	; (8006f18 <main+0xa38>)
 8006dda:	22c8      	movs	r2, #200	; 0xc8
 8006ddc:	819a      	strh	r2, [r3, #12]
			Frequency_List[7]=250;
 8006dde:	4b4e      	ldr	r3, [pc, #312]	; (8006f18 <main+0xa38>)
 8006de0:	22fa      	movs	r2, #250	; 0xfa
 8006de2:	81da      	strh	r2, [r3, #14]
			Frequency_List[8]=300;Frequency_List[9]=400;Frequency_List[10]=500;Frequency_List[11]=600;Frequency_List[12]=750;Frequency_List[13]=1000;Frequency_List[14]=1500;Frequency_List[15]=2000;
 8006de4:	4b4c      	ldr	r3, [pc, #304]	; (8006f18 <main+0xa38>)
 8006de6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006dea:	821a      	strh	r2, [r3, #16]
 8006dec:	4b4a      	ldr	r3, [pc, #296]	; (8006f18 <main+0xa38>)
 8006dee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006df2:	825a      	strh	r2, [r3, #18]
 8006df4:	4b48      	ldr	r3, [pc, #288]	; (8006f18 <main+0xa38>)
 8006df6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006dfa:	829a      	strh	r2, [r3, #20]
 8006dfc:	4b46      	ldr	r3, [pc, #280]	; (8006f18 <main+0xa38>)
 8006dfe:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006e02:	82da      	strh	r2, [r3, #22]
 8006e04:	4b44      	ldr	r3, [pc, #272]	; (8006f18 <main+0xa38>)
 8006e06:	f240 22ee 	movw	r2, #750	; 0x2ee
 8006e0a:	831a      	strh	r2, [r3, #24]
 8006e0c:	4b42      	ldr	r3, [pc, #264]	; (8006f18 <main+0xa38>)
 8006e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e12:	835a      	strh	r2, [r3, #26]
 8006e14:	4b40      	ldr	r3, [pc, #256]	; (8006f18 <main+0xa38>)
 8006e16:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006e1a:	839a      	strh	r2, [r3, #28]
 8006e1c:	4b3e      	ldr	r3, [pc, #248]	; (8006f18 <main+0xa38>)
 8006e1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e22:	83da      	strh	r2, [r3, #30]
			Frequency_List[16]=2500;Frequency_List[17]=3000;Frequency_List[18]=5000;Frequency_List[19]=6000;Frequency_List[20]=7500;Frequency_List[21]=9000;Frequency_List[22]=(uint16_t)IST.max_frequency*1000;
 8006e24:	4b3c      	ldr	r3, [pc, #240]	; (8006f18 <main+0xa38>)
 8006e26:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006e2a:	841a      	strh	r2, [r3, #32]
 8006e2c:	4b3a      	ldr	r3, [pc, #232]	; (8006f18 <main+0xa38>)
 8006e2e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006e32:	845a      	strh	r2, [r3, #34]	; 0x22
 8006e34:	4b38      	ldr	r3, [pc, #224]	; (8006f18 <main+0xa38>)
 8006e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e3a:	849a      	strh	r2, [r3, #36]	; 0x24
 8006e3c:	4b36      	ldr	r3, [pc, #216]	; (8006f18 <main+0xa38>)
 8006e3e:	f241 7270 	movw	r2, #6000	; 0x1770
 8006e42:	84da      	strh	r2, [r3, #38]	; 0x26
 8006e44:	4b34      	ldr	r3, [pc, #208]	; (8006f18 <main+0xa38>)
 8006e46:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8006e4a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e4c:	4b32      	ldr	r3, [pc, #200]	; (8006f18 <main+0xa38>)
 8006e4e:	f242 3228 	movw	r2, #9000	; 0x2328
 8006e52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e54:	4b2f      	ldr	r3, [pc, #188]	; (8006f14 <main+0xa34>)
 8006e56:	edd3 7a04 	vldr	s15, [r3, #16]
 8006e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e5e:	ee17 3a90 	vmov	r3, s15
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	0152      	lsls	r2, r2, #5
 8006e68:	1ad2      	subs	r2, r2, r3
 8006e6a:	0092      	lsls	r2, r2, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	4b29      	ldr	r3, [pc, #164]	; (8006f18 <main+0xa38>)
 8006e74:	859a      	strh	r2, [r3, #44]	; 0x2c

			Frequency_List1[0]=IST.min_frequency;
 8006e76:	4b27      	ldr	r3, [pc, #156]	; (8006f14 <main+0xa34>)
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	4a28      	ldr	r2, [pc, #160]	; (8006f1c <main+0xa3c>)
 8006e7c:	6013      	str	r3, [r2, #0]
			Frequency_List1[1]=25;
 8006e7e:	4b27      	ldr	r3, [pc, #156]	; (8006f1c <main+0xa3c>)
 8006e80:	4a27      	ldr	r2, [pc, #156]	; (8006f20 <main+0xa40>)
 8006e82:	605a      	str	r2, [r3, #4]
			Frequency_List1[2]=50;
 8006e84:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <main+0xa3c>)
 8006e86:	4a27      	ldr	r2, [pc, #156]	; (8006f24 <main+0xa44>)
 8006e88:	609a      	str	r2, [r3, #8]
			Frequency_List1[3]=75;
 8006e8a:	4b24      	ldr	r3, [pc, #144]	; (8006f1c <main+0xa3c>)
 8006e8c:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <main+0xa48>)
 8006e8e:	60da      	str	r2, [r3, #12]
			Frequency_List1[4]=100;
 8006e90:	4b22      	ldr	r3, [pc, #136]	; (8006f1c <main+0xa3c>)
 8006e92:	4a26      	ldr	r2, [pc, #152]	; (8006f2c <main+0xa4c>)
 8006e94:	611a      	str	r2, [r3, #16]
			Frequency_List1[5]=150;
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <main+0xa3c>)
 8006e98:	4a25      	ldr	r2, [pc, #148]	; (8006f30 <main+0xa50>)
 8006e9a:	615a      	str	r2, [r3, #20]
			Frequency_List1[6]=200;
 8006e9c:	4b1f      	ldr	r3, [pc, #124]	; (8006f1c <main+0xa3c>)
 8006e9e:	4a25      	ldr	r2, [pc, #148]	; (8006f34 <main+0xa54>)
 8006ea0:	619a      	str	r2, [r3, #24]
			Frequency_List1[7]=250;
 8006ea2:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <main+0xa3c>)
 8006ea4:	4a24      	ldr	r2, [pc, #144]	; (8006f38 <main+0xa58>)
 8006ea6:	61da      	str	r2, [r3, #28]
			Frequency_List1[8]=300;Frequency_List1[9]=400;Frequency_List1[10]=500;Frequency_List1[11]=600;Frequency_List1[12]=750;Frequency_List1[13]=1000;Frequency_List1[14]=1500;Frequency_List1[15]=2000;
 8006ea8:	4b1c      	ldr	r3, [pc, #112]	; (8006f1c <main+0xa3c>)
 8006eaa:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <main+0xa5c>)
 8006eac:	621a      	str	r2, [r3, #32]
 8006eae:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <main+0xa3c>)
 8006eb0:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <main+0xa60>)
 8006eb2:	625a      	str	r2, [r3, #36]	; 0x24
 8006eb4:	4b19      	ldr	r3, [pc, #100]	; (8006f1c <main+0xa3c>)
 8006eb6:	4a23      	ldr	r2, [pc, #140]	; (8006f44 <main+0xa64>)
 8006eb8:	629a      	str	r2, [r3, #40]	; 0x28
 8006eba:	4b18      	ldr	r3, [pc, #96]	; (8006f1c <main+0xa3c>)
 8006ebc:	4a22      	ldr	r2, [pc, #136]	; (8006f48 <main+0xa68>)
 8006ebe:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ec0:	4b16      	ldr	r3, [pc, #88]	; (8006f1c <main+0xa3c>)
 8006ec2:	4a22      	ldr	r2, [pc, #136]	; (8006f4c <main+0xa6c>)
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec6:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <main+0xa3c>)
 8006ec8:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <main+0xa70>)
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34
 8006ecc:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <main+0xa3c>)
 8006ece:	4a21      	ldr	r2, [pc, #132]	; (8006f54 <main+0xa74>)
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ed2:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <main+0xa3c>)
 8006ed4:	4a20      	ldr	r2, [pc, #128]	; (8006f58 <main+0xa78>)
 8006ed6:	63da      	str	r2, [r3, #60]	; 0x3c
			Frequency_List1[16]=2500;Frequency_List1[17]=3000;Frequency_List1[18]=5000;Frequency_List1[19]=6000;Frequency_List1[20]=7500;Frequency_List1[21]=9000;Frequency_List1[22]=IST.max_frequency*1000;
 8006ed8:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <main+0xa3c>)
 8006eda:	4a20      	ldr	r2, [pc, #128]	; (8006f5c <main+0xa7c>)
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <main+0xa3c>)
 8006ee0:	4a1f      	ldr	r2, [pc, #124]	; (8006f60 <main+0xa80>)
 8006ee2:	645a      	str	r2, [r3, #68]	; 0x44
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <main+0xa3c>)
 8006ee6:	4a1f      	ldr	r2, [pc, #124]	; (8006f64 <main+0xa84>)
 8006ee8:	649a      	str	r2, [r3, #72]	; 0x48
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <main+0xa3c>)
 8006eec:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <main+0xa88>)
 8006eee:	64da      	str	r2, [r3, #76]	; 0x4c
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <main+0xa3c>)
 8006ef2:	4a1e      	ldr	r2, [pc, #120]	; (8006f6c <main+0xa8c>)
 8006ef4:	651a      	str	r2, [r3, #80]	; 0x50
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <main+0xa3c>)
 8006ef8:	4a1d      	ldr	r2, [pc, #116]	; (8006f70 <main+0xa90>)
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <main+0xa34>)
 8006efe:	edd3 7a04 	vldr	s15, [r3, #16]
 8006f02:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006f74 <main+0xa94>
 8006f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f0a:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <main+0xa3c>)
 8006f0c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 8006f10:	e146      	b.n	80071a0 <main+0xcc0>
 8006f12:	bf00      	nop
 8006f14:	200048bc 	.word	0x200048bc
 8006f18:	20005178 	.word	0x20005178
 8006f1c:	20005270 	.word	0x20005270
 8006f20:	41c80000 	.word	0x41c80000
 8006f24:	42480000 	.word	0x42480000
 8006f28:	42960000 	.word	0x42960000
 8006f2c:	42c80000 	.word	0x42c80000
 8006f30:	43160000 	.word	0x43160000
 8006f34:	43480000 	.word	0x43480000
 8006f38:	437a0000 	.word	0x437a0000
 8006f3c:	43960000 	.word	0x43960000
 8006f40:	43c80000 	.word	0x43c80000
 8006f44:	43fa0000 	.word	0x43fa0000
 8006f48:	44160000 	.word	0x44160000
 8006f4c:	443b8000 	.word	0x443b8000
 8006f50:	447a0000 	.word	0x447a0000
 8006f54:	44bb8000 	.word	0x44bb8000
 8006f58:	44fa0000 	.word	0x44fa0000
 8006f5c:	451c4000 	.word	0x451c4000
 8006f60:	453b8000 	.word	0x453b8000
 8006f64:	459c4000 	.word	0x459c4000
 8006f68:	45bb8000 	.word	0x45bb8000
 8006f6c:	45ea6000 	.word	0x45ea6000
 8006f70:	460ca000 	.word	0x460ca000
 8006f74:	447a0000 	.word	0x447a0000
		}

		else if(IST.min_frequency==100)
 8006f78:	4ba3      	ldr	r3, [pc, #652]	; (8007208 <main+0xd28>)
 8006f7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f7e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800720c <main+0xd2c>
 8006f82:	eef4 7a47 	vcmp.f32	s15, s14
 8006f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8a:	f040 809e 	bne.w	80070ca <main+0xbea>
				{
					Frequency_List[0]=(uint16_t)IST.min_frequency;
 8006f8e:	4b9e      	ldr	r3, [pc, #632]	; (8007208 <main+0xd28>)
 8006f90:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f98:	ee17 3a90 	vmov	r3, s15
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	4b9c      	ldr	r3, [pc, #624]	; (8007210 <main+0xd30>)
 8006fa0:	801a      	strh	r2, [r3, #0]
					Frequency_List[1]=150;
 8006fa2:	4b9b      	ldr	r3, [pc, #620]	; (8007210 <main+0xd30>)
 8006fa4:	2296      	movs	r2, #150	; 0x96
 8006fa6:	805a      	strh	r2, [r3, #2]
					Frequency_List[2]=200;
 8006fa8:	4b99      	ldr	r3, [pc, #612]	; (8007210 <main+0xd30>)
 8006faa:	22c8      	movs	r2, #200	; 0xc8
 8006fac:	809a      	strh	r2, [r3, #4]
					Frequency_List[3]=250;
 8006fae:	4b98      	ldr	r3, [pc, #608]	; (8007210 <main+0xd30>)
 8006fb0:	22fa      	movs	r2, #250	; 0xfa
 8006fb2:	80da      	strh	r2, [r3, #6]
					Frequency_List[4]=300;Frequency_List[5]=400;Frequency_List[6]=500;Frequency_List[7]=600;Frequency_List[8]=750;Frequency_List[9]=1000;Frequency_List[10]=1500;Frequency_List[11]=2000;
 8006fb4:	4b96      	ldr	r3, [pc, #600]	; (8007210 <main+0xd30>)
 8006fb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006fba:	811a      	strh	r2, [r3, #8]
 8006fbc:	4b94      	ldr	r3, [pc, #592]	; (8007210 <main+0xd30>)
 8006fbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006fc2:	815a      	strh	r2, [r3, #10]
 8006fc4:	4b92      	ldr	r3, [pc, #584]	; (8007210 <main+0xd30>)
 8006fc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006fca:	819a      	strh	r2, [r3, #12]
 8006fcc:	4b90      	ldr	r3, [pc, #576]	; (8007210 <main+0xd30>)
 8006fce:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006fd2:	81da      	strh	r2, [r3, #14]
 8006fd4:	4b8e      	ldr	r3, [pc, #568]	; (8007210 <main+0xd30>)
 8006fd6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8006fda:	821a      	strh	r2, [r3, #16]
 8006fdc:	4b8c      	ldr	r3, [pc, #560]	; (8007210 <main+0xd30>)
 8006fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fe2:	825a      	strh	r2, [r3, #18]
 8006fe4:	4b8a      	ldr	r3, [pc, #552]	; (8007210 <main+0xd30>)
 8006fe6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006fea:	829a      	strh	r2, [r3, #20]
 8006fec:	4b88      	ldr	r3, [pc, #544]	; (8007210 <main+0xd30>)
 8006fee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006ff2:	82da      	strh	r2, [r3, #22]
					Frequency_List[12]=2500;Frequency_List[13]=3000;Frequency_List[14]=5000;Frequency_List[15]=6000;Frequency_List[16]=7500;Frequency_List[17]=9000;Frequency_List[18]=(uint16_t)IST.max_frequency*1000;
 8006ff4:	4b86      	ldr	r3, [pc, #536]	; (8007210 <main+0xd30>)
 8006ff6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006ffa:	831a      	strh	r2, [r3, #24]
 8006ffc:	4b84      	ldr	r3, [pc, #528]	; (8007210 <main+0xd30>)
 8006ffe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007002:	835a      	strh	r2, [r3, #26]
 8007004:	4b82      	ldr	r3, [pc, #520]	; (8007210 <main+0xd30>)
 8007006:	f241 3288 	movw	r2, #5000	; 0x1388
 800700a:	839a      	strh	r2, [r3, #28]
 800700c:	4b80      	ldr	r3, [pc, #512]	; (8007210 <main+0xd30>)
 800700e:	f241 7270 	movw	r2, #6000	; 0x1770
 8007012:	83da      	strh	r2, [r3, #30]
 8007014:	4b7e      	ldr	r3, [pc, #504]	; (8007210 <main+0xd30>)
 8007016:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800701a:	841a      	strh	r2, [r3, #32]
 800701c:	4b7c      	ldr	r3, [pc, #496]	; (8007210 <main+0xd30>)
 800701e:	f242 3228 	movw	r2, #9000	; 0x2328
 8007022:	845a      	strh	r2, [r3, #34]	; 0x22
 8007024:	4b78      	ldr	r3, [pc, #480]	; (8007208 <main+0xd28>)
 8007026:	edd3 7a04 	vldr	s15, [r3, #16]
 800702a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800702e:	ee17 3a90 	vmov	r3, s15
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	0152      	lsls	r2, r2, #5
 8007038:	1ad2      	subs	r2, r2, r3
 800703a:	0092      	lsls	r2, r2, #2
 800703c:	4413      	add	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	b29a      	uxth	r2, r3
 8007042:	4b73      	ldr	r3, [pc, #460]	; (8007210 <main+0xd30>)
 8007044:	849a      	strh	r2, [r3, #36]	; 0x24

					Frequency_List1[0]=IST.min_frequency;
 8007046:	4b70      	ldr	r3, [pc, #448]	; (8007208 <main+0xd28>)
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	4a72      	ldr	r2, [pc, #456]	; (8007214 <main+0xd34>)
 800704c:	6013      	str	r3, [r2, #0]
					Frequency_List1[1]=150;
 800704e:	4b71      	ldr	r3, [pc, #452]	; (8007214 <main+0xd34>)
 8007050:	4a71      	ldr	r2, [pc, #452]	; (8007218 <main+0xd38>)
 8007052:	605a      	str	r2, [r3, #4]
					Frequency_List1[2]=200;
 8007054:	4b6f      	ldr	r3, [pc, #444]	; (8007214 <main+0xd34>)
 8007056:	4a71      	ldr	r2, [pc, #452]	; (800721c <main+0xd3c>)
 8007058:	609a      	str	r2, [r3, #8]
					Frequency_List1[3]=250;
 800705a:	4b6e      	ldr	r3, [pc, #440]	; (8007214 <main+0xd34>)
 800705c:	4a70      	ldr	r2, [pc, #448]	; (8007220 <main+0xd40>)
 800705e:	60da      	str	r2, [r3, #12]
					Frequency_List1[4]=300;Frequency_List1[5]=400;Frequency_List1[6]=500;Frequency_List1[7]=600;Frequency_List1[8]=750;Frequency_List1[9]=1000;Frequency_List1[10]=1500;Frequency_List1[11]=2000;
 8007060:	4b6c      	ldr	r3, [pc, #432]	; (8007214 <main+0xd34>)
 8007062:	4a70      	ldr	r2, [pc, #448]	; (8007224 <main+0xd44>)
 8007064:	611a      	str	r2, [r3, #16]
 8007066:	4b6b      	ldr	r3, [pc, #428]	; (8007214 <main+0xd34>)
 8007068:	4a6f      	ldr	r2, [pc, #444]	; (8007228 <main+0xd48>)
 800706a:	615a      	str	r2, [r3, #20]
 800706c:	4b69      	ldr	r3, [pc, #420]	; (8007214 <main+0xd34>)
 800706e:	4a6f      	ldr	r2, [pc, #444]	; (800722c <main+0xd4c>)
 8007070:	619a      	str	r2, [r3, #24]
 8007072:	4b68      	ldr	r3, [pc, #416]	; (8007214 <main+0xd34>)
 8007074:	4a6e      	ldr	r2, [pc, #440]	; (8007230 <main+0xd50>)
 8007076:	61da      	str	r2, [r3, #28]
 8007078:	4b66      	ldr	r3, [pc, #408]	; (8007214 <main+0xd34>)
 800707a:	4a6e      	ldr	r2, [pc, #440]	; (8007234 <main+0xd54>)
 800707c:	621a      	str	r2, [r3, #32]
 800707e:	4b65      	ldr	r3, [pc, #404]	; (8007214 <main+0xd34>)
 8007080:	4a6d      	ldr	r2, [pc, #436]	; (8007238 <main+0xd58>)
 8007082:	625a      	str	r2, [r3, #36]	; 0x24
 8007084:	4b63      	ldr	r3, [pc, #396]	; (8007214 <main+0xd34>)
 8007086:	4a6d      	ldr	r2, [pc, #436]	; (800723c <main+0xd5c>)
 8007088:	629a      	str	r2, [r3, #40]	; 0x28
 800708a:	4b62      	ldr	r3, [pc, #392]	; (8007214 <main+0xd34>)
 800708c:	4a6c      	ldr	r2, [pc, #432]	; (8007240 <main+0xd60>)
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c
					Frequency_List1[12]=2500;Frequency_List1[13]=3000;Frequency_List1[14]=5000;Frequency_List1[15]=6000;Frequency_List1[16]=7500;Frequency_List1[17]=9000;Frequency_List1[18]=IST.max_frequency*1000;
 8007090:	4b60      	ldr	r3, [pc, #384]	; (8007214 <main+0xd34>)
 8007092:	4a6c      	ldr	r2, [pc, #432]	; (8007244 <main+0xd64>)
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
 8007096:	4b5f      	ldr	r3, [pc, #380]	; (8007214 <main+0xd34>)
 8007098:	4a6b      	ldr	r2, [pc, #428]	; (8007248 <main+0xd68>)
 800709a:	635a      	str	r2, [r3, #52]	; 0x34
 800709c:	4b5d      	ldr	r3, [pc, #372]	; (8007214 <main+0xd34>)
 800709e:	4a6b      	ldr	r2, [pc, #428]	; (800724c <main+0xd6c>)
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38
 80070a2:	4b5c      	ldr	r3, [pc, #368]	; (8007214 <main+0xd34>)
 80070a4:	4a6a      	ldr	r2, [pc, #424]	; (8007250 <main+0xd70>)
 80070a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80070a8:	4b5a      	ldr	r3, [pc, #360]	; (8007214 <main+0xd34>)
 80070aa:	4a6a      	ldr	r2, [pc, #424]	; (8007254 <main+0xd74>)
 80070ac:	641a      	str	r2, [r3, #64]	; 0x40
 80070ae:	4b59      	ldr	r3, [pc, #356]	; (8007214 <main+0xd34>)
 80070b0:	4a69      	ldr	r2, [pc, #420]	; (8007258 <main+0xd78>)
 80070b2:	645a      	str	r2, [r3, #68]	; 0x44
 80070b4:	4b54      	ldr	r3, [pc, #336]	; (8007208 <main+0xd28>)
 80070b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80070ba:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800725c <main+0xd7c>
 80070be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070c2:	4b54      	ldr	r3, [pc, #336]	; (8007214 <main+0xd34>)
 80070c4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 80070c8:	e06a      	b.n	80071a0 <main+0xcc0>
				}
		else if(IST.min_frequency==1000)
 80070ca:	4b4f      	ldr	r3, [pc, #316]	; (8007208 <main+0xd28>)
 80070cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80070d0:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800725c <main+0xd7c>
 80070d4:	eef4 7a47 	vcmp.f32	s15, s14
 80070d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070dc:	d160      	bne.n	80071a0 <main+0xcc0>
				{
					Frequency_List[0]=(uint16_t)IST.min_frequency;Frequency_List[1]=1500;Frequency_List[2]=2000;
 80070de:	4b4a      	ldr	r3, [pc, #296]	; (8007208 <main+0xd28>)
 80070e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80070e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070e8:	ee17 3a90 	vmov	r3, s15
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	4b48      	ldr	r3, [pc, #288]	; (8007210 <main+0xd30>)
 80070f0:	801a      	strh	r2, [r3, #0]
 80070f2:	4b47      	ldr	r3, [pc, #284]	; (8007210 <main+0xd30>)
 80070f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80070f8:	805a      	strh	r2, [r3, #2]
 80070fa:	4b45      	ldr	r3, [pc, #276]	; (8007210 <main+0xd30>)
 80070fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007100:	809a      	strh	r2, [r3, #4]
					Frequency_List[3]=2500;Frequency_List[4]=3000;Frequency_List[5]=5000;Frequency_List[6]=6000;Frequency_List[7]=7500;Frequency_List[8]=9000;Frequency_List[9]=(uint16_t)IST.max_frequency*1000;
 8007102:	4b43      	ldr	r3, [pc, #268]	; (8007210 <main+0xd30>)
 8007104:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007108:	80da      	strh	r2, [r3, #6]
 800710a:	4b41      	ldr	r3, [pc, #260]	; (8007210 <main+0xd30>)
 800710c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007110:	811a      	strh	r2, [r3, #8]
 8007112:	4b3f      	ldr	r3, [pc, #252]	; (8007210 <main+0xd30>)
 8007114:	f241 3288 	movw	r2, #5000	; 0x1388
 8007118:	815a      	strh	r2, [r3, #10]
 800711a:	4b3d      	ldr	r3, [pc, #244]	; (8007210 <main+0xd30>)
 800711c:	f241 7270 	movw	r2, #6000	; 0x1770
 8007120:	819a      	strh	r2, [r3, #12]
 8007122:	4b3b      	ldr	r3, [pc, #236]	; (8007210 <main+0xd30>)
 8007124:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8007128:	81da      	strh	r2, [r3, #14]
 800712a:	4b39      	ldr	r3, [pc, #228]	; (8007210 <main+0xd30>)
 800712c:	f242 3228 	movw	r2, #9000	; 0x2328
 8007130:	821a      	strh	r2, [r3, #16]
 8007132:	4b35      	ldr	r3, [pc, #212]	; (8007208 <main+0xd28>)
 8007134:	edd3 7a04 	vldr	s15, [r3, #16]
 8007138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800713c:	ee17 3a90 	vmov	r3, s15
 8007140:	b29b      	uxth	r3, r3
 8007142:	461a      	mov	r2, r3
 8007144:	0152      	lsls	r2, r2, #5
 8007146:	1ad2      	subs	r2, r2, r3
 8007148:	0092      	lsls	r2, r2, #2
 800714a:	4413      	add	r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	b29a      	uxth	r2, r3
 8007150:	4b2f      	ldr	r3, [pc, #188]	; (8007210 <main+0xd30>)
 8007152:	825a      	strh	r2, [r3, #18]

					Frequency_List1[0]=IST.min_frequency;Frequency_List1[1]=1500;Frequency_List1[2]=2000;
 8007154:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <main+0xd28>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	4a2e      	ldr	r2, [pc, #184]	; (8007214 <main+0xd34>)
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	4b2d      	ldr	r3, [pc, #180]	; (8007214 <main+0xd34>)
 800715e:	4a37      	ldr	r2, [pc, #220]	; (800723c <main+0xd5c>)
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	4b2c      	ldr	r3, [pc, #176]	; (8007214 <main+0xd34>)
 8007164:	4a36      	ldr	r2, [pc, #216]	; (8007240 <main+0xd60>)
 8007166:	609a      	str	r2, [r3, #8]
					Frequency_List1[3]=2500;Frequency_List1[4]=3000;Frequency_List1[5]=5000;Frequency_List1[6]=6000;Frequency_List1[7]=7500;Frequency_List1[8]=9000;Frequency_List1[9]=IST.max_frequency*1000;
 8007168:	4b2a      	ldr	r3, [pc, #168]	; (8007214 <main+0xd34>)
 800716a:	4a36      	ldr	r2, [pc, #216]	; (8007244 <main+0xd64>)
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	4b29      	ldr	r3, [pc, #164]	; (8007214 <main+0xd34>)
 8007170:	4a35      	ldr	r2, [pc, #212]	; (8007248 <main+0xd68>)
 8007172:	611a      	str	r2, [r3, #16]
 8007174:	4b27      	ldr	r3, [pc, #156]	; (8007214 <main+0xd34>)
 8007176:	4a35      	ldr	r2, [pc, #212]	; (800724c <main+0xd6c>)
 8007178:	615a      	str	r2, [r3, #20]
 800717a:	4b26      	ldr	r3, [pc, #152]	; (8007214 <main+0xd34>)
 800717c:	4a34      	ldr	r2, [pc, #208]	; (8007250 <main+0xd70>)
 800717e:	619a      	str	r2, [r3, #24]
 8007180:	4b24      	ldr	r3, [pc, #144]	; (8007214 <main+0xd34>)
 8007182:	4a34      	ldr	r2, [pc, #208]	; (8007254 <main+0xd74>)
 8007184:	61da      	str	r2, [r3, #28]
 8007186:	4b23      	ldr	r3, [pc, #140]	; (8007214 <main+0xd34>)
 8007188:	4a33      	ldr	r2, [pc, #204]	; (8007258 <main+0xd78>)
 800718a:	621a      	str	r2, [r3, #32]
 800718c:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <main+0xd28>)
 800718e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007192:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800725c <main+0xd7c>
 8007196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800719a:	4b1e      	ldr	r3, [pc, #120]	; (8007214 <main+0xd34>)
 800719c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				}

		IS_Start();
 80071a0:	f7fb fada 	bl	8002758 <IS_Start>



	}
}
if(method==1)
 80071a4:	4b2e      	ldr	r3, [pc, #184]	; (8007260 <main+0xd80>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d106      	bne.n	80071ba <main+0xcda>
{
	CV_Start();
 80071ac:	f7fa fb22 	bl	80017f4 <CV_Start>
	rand_count=2;
 80071b0:	4b2c      	ldr	r3, [pc, #176]	; (8007264 <main+0xd84>)
 80071b2:	2202      	movs	r2, #2
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	f7ff b9a6 	b.w	8006506 <main+0x26>

}
else if(method==2)
 80071ba:	4b29      	ldr	r3, [pc, #164]	; (8007260 <main+0xd80>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d106      	bne.n	80071d0 <main+0xcf0>
{
	SWV_Start();
 80071c2:	f7fa fd3b 	bl	8001c3c <SWV_Start>
	rand_count=2;
 80071c6:	4b27      	ldr	r3, [pc, #156]	; (8007264 <main+0xd84>)
 80071c8:	2202      	movs	r2, #2
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f7ff b99b 	b.w	8006506 <main+0x26>

}
else if(method==4)
 80071d0:	4b23      	ldr	r3, [pc, #140]	; (8007260 <main+0xd80>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d106      	bne.n	80071e6 <main+0xd06>
{
	DPV_Start();
 80071d8:	f7fc f9c6 	bl	8003568 <DPV_Start>
	rand_count=2;
 80071dc:	4b21      	ldr	r3, [pc, #132]	; (8007264 <main+0xd84>)
 80071de:	2202      	movs	r2, #2
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	f7ff b990 	b.w	8006506 <main+0x26>

}
else if(method==3)
 80071e6:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <main+0xd80>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d106      	bne.n	80071fc <main+0xd1c>
{
	IS_Complete();
 80071ee:	f7fb fd93 	bl	8002d18 <IS_Complete>
	rand_count=2;
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <main+0xd84>)
 80071f4:	2202      	movs	r2, #2
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	f7ff b985 	b.w	8006506 <main+0x26>
}
else
{
	rand_count=1;
 80071fc:	4b19      	ldr	r3, [pc, #100]	; (8007264 <main+0xd84>)
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
  {
 8007202:	f7ff b980 	b.w	8006506 <main+0x26>
 8007206:	bf00      	nop
 8007208:	200048bc 	.word	0x200048bc
 800720c:	42c80000 	.word	0x42c80000
 8007210:	20005178 	.word	0x20005178
 8007214:	20005270 	.word	0x20005270
 8007218:	43160000 	.word	0x43160000
 800721c:	43480000 	.word	0x43480000
 8007220:	437a0000 	.word	0x437a0000
 8007224:	43960000 	.word	0x43960000
 8007228:	43c80000 	.word	0x43c80000
 800722c:	43fa0000 	.word	0x43fa0000
 8007230:	44160000 	.word	0x44160000
 8007234:	443b8000 	.word	0x443b8000
 8007238:	447a0000 	.word	0x447a0000
 800723c:	44bb8000 	.word	0x44bb8000
 8007240:	44fa0000 	.word	0x44fa0000
 8007244:	451c4000 	.word	0x451c4000
 8007248:	453b8000 	.word	0x453b8000
 800724c:	459c4000 	.word	0x459c4000
 8007250:	45bb8000 	.word	0x45bb8000
 8007254:	45ea6000 	.word	0x45ea6000
 8007258:	460ca000 	.word	0x460ca000
 800725c:	447a0000 	.word	0x447a0000
 8007260:	2000021c 	.word	0x2000021c
 8007264:	2000000c 	.word	0x2000000c

08007268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b0a6      	sub	sp, #152	; 0x98
 800726c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800726e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007272:	2228      	movs	r2, #40	; 0x28
 8007274:	2100      	movs	r1, #0
 8007276:	4618      	mov	r0, r3
 8007278:	f001 fc8c 	bl	8008b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800727c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	609a      	str	r2, [r3, #8]
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800728c:	1d3b      	adds	r3, r7, #4
 800728e:	2258      	movs	r2, #88	; 0x58
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f001 fc7e 	bl	8008b94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007298:	2302      	movs	r3, #2
 800729a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800729c:	2301      	movs	r3, #1
 800729e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80072a0:	2310      	movs	r3, #16
 80072a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072a6:	2302      	movs	r3, #2
 80072a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80072ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80072b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80072b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fc fcce 	bl	8003c68 <HAL_RCC_OscConfig>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80072d2:	f000 f92b 	bl	800752c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072d6:	230f      	movs	r3, #15
 80072d8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072da:	2302      	movs	r3, #2
 80072dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072de:	2300      	movs	r3, #0
 80072e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80072e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80072e8:	2300      	movs	r3, #0
 80072ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80072ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80072f0:	2102      	movs	r1, #2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fd fbce 	bl	8004a94 <HAL_RCC_ClockConfig>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80072fe:	f000 f915 	bl	800752c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5;
 8007302:	2318      	movs	r3, #24
 8007304:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007306:	2300      	movs	r3, #0
 8007308:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	4618      	mov	r0, r3
 8007312:	f7fd fdf7 	bl	8004f04 <HAL_RCCEx_PeriphCLKConfig>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800731c:	f000 f906 	bl	800752c <Error_Handler>
  }
}
 8007320:	bf00      	nop
 8007322:	3798      	adds	r7, #152	; 0x98
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800732c:	4b1b      	ldr	r3, [pc, #108]	; (800739c <MX_SPI3_Init+0x74>)
 800732e:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <MX_SPI3_Init+0x78>)
 8007330:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007332:	4b1a      	ldr	r3, [pc, #104]	; (800739c <MX_SPI3_Init+0x74>)
 8007334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007338:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800733a:	4b18      	ldr	r3, [pc, #96]	; (800739c <MX_SPI3_Init+0x74>)
 800733c:	2200      	movs	r2, #0
 800733e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007340:	4b16      	ldr	r3, [pc, #88]	; (800739c <MX_SPI3_Init+0x74>)
 8007342:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007346:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007348:	4b14      	ldr	r3, [pc, #80]	; (800739c <MX_SPI3_Init+0x74>)
 800734a:	2200      	movs	r2, #0
 800734c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <MX_SPI3_Init+0x74>)
 8007350:	2201      	movs	r2, #1
 8007352:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007354:	4b11      	ldr	r3, [pc, #68]	; (800739c <MX_SPI3_Init+0x74>)
 8007356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800735a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800735c:	4b0f      	ldr	r3, [pc, #60]	; (800739c <MX_SPI3_Init+0x74>)
 800735e:	2230      	movs	r2, #48	; 0x30
 8007360:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007362:	4b0e      	ldr	r3, [pc, #56]	; (800739c <MX_SPI3_Init+0x74>)
 8007364:	2200      	movs	r2, #0
 8007366:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007368:	4b0c      	ldr	r3, [pc, #48]	; (800739c <MX_SPI3_Init+0x74>)
 800736a:	2200      	movs	r2, #0
 800736c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <MX_SPI3_Init+0x74>)
 8007370:	2200      	movs	r2, #0
 8007372:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007374:	4b09      	ldr	r3, [pc, #36]	; (800739c <MX_SPI3_Init+0x74>)
 8007376:	2207      	movs	r2, #7
 8007378:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800737a:	4b08      	ldr	r3, [pc, #32]	; (800739c <MX_SPI3_Init+0x74>)
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007380:	4b06      	ldr	r3, [pc, #24]	; (800739c <MX_SPI3_Init+0x74>)
 8007382:	2200      	movs	r2, #0
 8007384:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007386:	4805      	ldr	r0, [pc, #20]	; (800739c <MX_SPI3_Init+0x74>)
 8007388:	f7fd ffda 	bl	8005340 <HAL_SPI_Init>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007392:	f000 f8cb 	bl	800752c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007396:	bf00      	nop
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20005420 	.word	0x20005420
 80073a0:	40003c00 	.word	0x40003c00

080073a4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80073a8:	4b14      	ldr	r3, [pc, #80]	; (80073fc <MX_UART4_Init+0x58>)
 80073aa:	4a15      	ldr	r2, [pc, #84]	; (8007400 <MX_UART4_Init+0x5c>)
 80073ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80073ae:	4b13      	ldr	r3, [pc, #76]	; (80073fc <MX_UART4_Init+0x58>)
 80073b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80073b6:	4b11      	ldr	r3, [pc, #68]	; (80073fc <MX_UART4_Init+0x58>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <MX_UART4_Init+0x58>)
 80073be:	2200      	movs	r2, #0
 80073c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80073c2:	4b0e      	ldr	r3, [pc, #56]	; (80073fc <MX_UART4_Init+0x58>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <MX_UART4_Init+0x58>)
 80073ca:	220c      	movs	r2, #12
 80073cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <MX_UART4_Init+0x58>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80073d4:	4b09      	ldr	r3, [pc, #36]	; (80073fc <MX_UART4_Init+0x58>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80073da:	4b08      	ldr	r3, [pc, #32]	; (80073fc <MX_UART4_Init+0x58>)
 80073dc:	2200      	movs	r2, #0
 80073de:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <MX_UART4_Init+0x58>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80073e6:	4805      	ldr	r0, [pc, #20]	; (80073fc <MX_UART4_Init+0x58>)
 80073e8:	f7fe fb28 	bl	8005a3c <HAL_UART_Init>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80073f2:	f000 f89b 	bl	800752c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80073f6:	bf00      	nop
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20005594 	.word	0x20005594
 8007400:	40004c00 	.word	0x40004c00

08007404 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007408:	4b14      	ldr	r3, [pc, #80]	; (800745c <MX_UART5_Init+0x58>)
 800740a:	4a15      	ldr	r2, [pc, #84]	; (8007460 <MX_UART5_Init+0x5c>)
 800740c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <MX_UART5_Init+0x58>)
 8007410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007414:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007416:	4b11      	ldr	r3, [pc, #68]	; (800745c <MX_UART5_Init+0x58>)
 8007418:	2200      	movs	r2, #0
 800741a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800741c:	4b0f      	ldr	r3, [pc, #60]	; (800745c <MX_UART5_Init+0x58>)
 800741e:	2200      	movs	r2, #0
 8007420:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8007422:	4b0e      	ldr	r3, [pc, #56]	; (800745c <MX_UART5_Init+0x58>)
 8007424:	2200      	movs	r2, #0
 8007426:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <MX_UART5_Init+0x58>)
 800742a:	220c      	movs	r2, #12
 800742c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800742e:	4b0b      	ldr	r3, [pc, #44]	; (800745c <MX_UART5_Init+0x58>)
 8007430:	2200      	movs	r2, #0
 8007432:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007434:	4b09      	ldr	r3, [pc, #36]	; (800745c <MX_UART5_Init+0x58>)
 8007436:	2200      	movs	r2, #0
 8007438:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800743a:	4b08      	ldr	r3, [pc, #32]	; (800745c <MX_UART5_Init+0x58>)
 800743c:	2200      	movs	r2, #0
 800743e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <MX_UART5_Init+0x58>)
 8007442:	2200      	movs	r2, #0
 8007444:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8007446:	4805      	ldr	r0, [pc, #20]	; (800745c <MX_UART5_Init+0x58>)
 8007448:	f7fe faf8 	bl	8005a3c <HAL_UART_Init>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8007452:	f000 f86b 	bl	800752c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007456:	bf00      	nop
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20005488 	.word	0x20005488
 8007460:	40005000 	.word	0x40005000

08007464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	; 0x28
 8007468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800746a:	f107 0314 	add.w	r3, r7, #20
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	605a      	str	r2, [r3, #4]
 8007474:	609a      	str	r2, [r3, #8]
 8007476:	60da      	str	r2, [r3, #12]
 8007478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800747a:	4b2a      	ldr	r3, [pc, #168]	; (8007524 <MX_GPIO_Init+0xc0>)
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	4a29      	ldr	r2, [pc, #164]	; (8007524 <MX_GPIO_Init+0xc0>)
 8007480:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007484:	6153      	str	r3, [r2, #20]
 8007486:	4b27      	ldr	r3, [pc, #156]	; (8007524 <MX_GPIO_Init+0xc0>)
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007492:	4b24      	ldr	r3, [pc, #144]	; (8007524 <MX_GPIO_Init+0xc0>)
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	4a23      	ldr	r2, [pc, #140]	; (8007524 <MX_GPIO_Init+0xc0>)
 8007498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800749c:	6153      	str	r3, [r2, #20]
 800749e:	4b21      	ldr	r3, [pc, #132]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074aa:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b4:	6153      	str	r3, [r2, #20]
 80074b6:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074be:	60bb      	str	r3, [r7, #8]
 80074c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074c2:	4b18      	ldr	r3, [pc, #96]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	4a17      	ldr	r2, [pc, #92]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074cc:	6153      	str	r3, [r2, #20]
 80074ce:	4b15      	ldr	r3, [pc, #84]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074d6:	607b      	str	r3, [r7, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074da:	4b12      	ldr	r3, [pc, #72]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	4a11      	ldr	r2, [pc, #68]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074e4:	6153      	str	r3, [r2, #20]
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <MX_GPIO_Init+0xc0>)
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_RESET);
 80074f2:	2200      	movs	r2, #0
 80074f4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80074f8:	480b      	ldr	r0, [pc, #44]	; (8007528 <MX_GPIO_Init+0xc4>)
 80074fa:	f7fc fb9d 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD9 PD10 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13;
 80074fe:	f44f 531c 	mov.w	r3, #9984	; 0x2700
 8007502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007504:	2301      	movs	r3, #1
 8007506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007508:	2300      	movs	r3, #0
 800750a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800750c:	2300      	movs	r3, #0
 800750e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007510:	f107 0314 	add.w	r3, r7, #20
 8007514:	4619      	mov	r1, r3
 8007516:	4804      	ldr	r0, [pc, #16]	; (8007528 <MX_GPIO_Init+0xc4>)
 8007518:	f7fc fa04 	bl	8003924 <HAL_GPIO_Init>

}
 800751c:	bf00      	nop
 800751e:	3728      	adds	r7, #40	; 0x28
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40021000 	.word	0x40021000
 8007528:	48000c00 	.word	0x48000c00

0800752c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007530:	bf00      	nop
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
	...

0800753c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <HAL_MspInit+0x44>)
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	4a0e      	ldr	r2, [pc, #56]	; (8007580 <HAL_MspInit+0x44>)
 8007548:	f043 0301 	orr.w	r3, r3, #1
 800754c:	6193      	str	r3, [r2, #24]
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <HAL_MspInit+0x44>)
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	607b      	str	r3, [r7, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800755a:	4b09      	ldr	r3, [pc, #36]	; (8007580 <HAL_MspInit+0x44>)
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	4a08      	ldr	r2, [pc, #32]	; (8007580 <HAL_MspInit+0x44>)
 8007560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007564:	61d3      	str	r3, [r2, #28]
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <HAL_MspInit+0x44>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40021000 	.word	0x40021000

08007584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800758c:	f107 0314 	add.w	r3, r7, #20
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	60da      	str	r2, [r3, #12]
 800759a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a17      	ldr	r2, [pc, #92]	; (8007600 <HAL_SPI_MspInit+0x7c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d127      	bne.n	80075f6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80075a6:	4b17      	ldr	r3, [pc, #92]	; (8007604 <HAL_SPI_MspInit+0x80>)
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	4a16      	ldr	r2, [pc, #88]	; (8007604 <HAL_SPI_MspInit+0x80>)
 80075ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b0:	61d3      	str	r3, [r2, #28]
 80075b2:	4b14      	ldr	r3, [pc, #80]	; (8007604 <HAL_SPI_MspInit+0x80>)
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <HAL_SPI_MspInit+0x80>)
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	4a10      	ldr	r2, [pc, #64]	; (8007604 <HAL_SPI_MspInit+0x80>)
 80075c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075c8:	6153      	str	r3, [r2, #20]
 80075ca:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <HAL_SPI_MspInit+0x80>)
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80075d6:	2338      	movs	r3, #56	; 0x38
 80075d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075da:	2302      	movs	r3, #2
 80075dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075e2:	2303      	movs	r3, #3
 80075e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80075e6:	2306      	movs	r3, #6
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075ea:	f107 0314 	add.w	r3, r7, #20
 80075ee:	4619      	mov	r1, r3
 80075f0:	4805      	ldr	r0, [pc, #20]	; (8007608 <HAL_SPI_MspInit+0x84>)
 80075f2:	f7fc f997 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80075f6:	bf00      	nop
 80075f8:	3728      	adds	r7, #40	; 0x28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40003c00 	.word	0x40003c00
 8007604:	40021000 	.word	0x40021000
 8007608:	48000400 	.word	0x48000400

0800760c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08c      	sub	sp, #48	; 0x30
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007614:	f107 031c 	add.w	r3, r7, #28
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	609a      	str	r2, [r3, #8]
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a3d      	ldr	r2, [pc, #244]	; (8007720 <HAL_UART_MspInit+0x114>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d129      	bne.n	8007682 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800762e:	4b3d      	ldr	r3, [pc, #244]	; (8007724 <HAL_UART_MspInit+0x118>)
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	4a3c      	ldr	r2, [pc, #240]	; (8007724 <HAL_UART_MspInit+0x118>)
 8007634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007638:	61d3      	str	r3, [r2, #28]
 800763a:	4b3a      	ldr	r3, [pc, #232]	; (8007724 <HAL_UART_MspInit+0x118>)
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007642:	61bb      	str	r3, [r7, #24]
 8007644:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007646:	4b37      	ldr	r3, [pc, #220]	; (8007724 <HAL_UART_MspInit+0x118>)
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	4a36      	ldr	r2, [pc, #216]	; (8007724 <HAL_UART_MspInit+0x118>)
 800764c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007650:	6153      	str	r3, [r2, #20]
 8007652:	4b34      	ldr	r3, [pc, #208]	; (8007724 <HAL_UART_MspInit+0x118>)
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800765e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007664:	2302      	movs	r3, #2
 8007666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007668:	2300      	movs	r3, #0
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800766c:	2303      	movs	r3, #3
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8007670:	2305      	movs	r3, #5
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007674:	f107 031c 	add.w	r3, r7, #28
 8007678:	4619      	mov	r1, r3
 800767a:	482b      	ldr	r0, [pc, #172]	; (8007728 <HAL_UART_MspInit+0x11c>)
 800767c:	f7fc f952 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8007680:	e049      	b.n	8007716 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==UART5)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a29      	ldr	r2, [pc, #164]	; (800772c <HAL_UART_MspInit+0x120>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d144      	bne.n	8007716 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_UART5_CLK_ENABLE();
 800768c:	4b25      	ldr	r3, [pc, #148]	; (8007724 <HAL_UART_MspInit+0x118>)
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	4a24      	ldr	r2, [pc, #144]	; (8007724 <HAL_UART_MspInit+0x118>)
 8007692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007696:	61d3      	str	r3, [r2, #28]
 8007698:	4b22      	ldr	r3, [pc, #136]	; (8007724 <HAL_UART_MspInit+0x118>)
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80076a4:	4b1f      	ldr	r3, [pc, #124]	; (8007724 <HAL_UART_MspInit+0x118>)
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	4a1e      	ldr	r2, [pc, #120]	; (8007724 <HAL_UART_MspInit+0x118>)
 80076aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076ae:	6153      	str	r3, [r2, #20]
 80076b0:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <HAL_UART_MspInit+0x118>)
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80076bc:	4b19      	ldr	r3, [pc, #100]	; (8007724 <HAL_UART_MspInit+0x118>)
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	4a18      	ldr	r2, [pc, #96]	; (8007724 <HAL_UART_MspInit+0x118>)
 80076c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076c6:	6153      	str	r3, [r2, #20]
 80076c8:	4b16      	ldr	r3, [pc, #88]	; (8007724 <HAL_UART_MspInit+0x118>)
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80076d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076da:	2302      	movs	r3, #2
 80076dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80076e2:	2303      	movs	r3, #3
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80076e6:	2305      	movs	r3, #5
 80076e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076ea:	f107 031c 	add.w	r3, r7, #28
 80076ee:	4619      	mov	r1, r3
 80076f0:	480d      	ldr	r0, [pc, #52]	; (8007728 <HAL_UART_MspInit+0x11c>)
 80076f2:	f7fc f917 	bl	8003924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80076f6:	2304      	movs	r3, #4
 80076f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076fa:	2302      	movs	r3, #2
 80076fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007702:	2303      	movs	r3, #3
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8007706:	2305      	movs	r3, #5
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800770a:	f107 031c 	add.w	r3, r7, #28
 800770e:	4619      	mov	r1, r3
 8007710:	4807      	ldr	r0, [pc, #28]	; (8007730 <HAL_UART_MspInit+0x124>)
 8007712:	f7fc f907 	bl	8003924 <HAL_GPIO_Init>
}
 8007716:	bf00      	nop
 8007718:	3730      	adds	r7, #48	; 0x30
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40004c00 	.word	0x40004c00
 8007724:	40021000 	.word	0x40021000
 8007728:	48000800 	.word	0x48000800
 800772c:	40005000 	.word	0x40005000
 8007730:	48000c00 	.word	0x48000c00

08007734 <voltammetry_FIR_filter>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void voltammetry_FIR_filter(float *current_response, int length_data)
{
 8007734:	b5b0      	push	{r4, r5, r7, lr}
 8007736:	b08c      	sub	sp, #48	; 0x30
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]

int count=0;
 800773e:	2300      	movs	r3, #0
 8007740:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=1;i<length_data;i++)
 8007742:	2301      	movs	r3, #1
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28
 8007746:	e042      	b.n	80077ce <voltammetry_FIR_filter+0x9a>
	{
		volta_filtered_data[0]= 0.5*current_response[0];
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	edd3 7a00 	vldr	s15, [r3]
 800774e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007756:	4bad      	ldr	r3, [pc, #692]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 8007758:	edc3 7a00 	vstr	s15, [r3]

		volta_filtered_data[i] = 0.5*current_response[i] + 0.5*current_response[i-1];
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	4413      	add	r3, r2
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f7f8 fef6 	bl	8000558 <__aeabi_f2d>
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	4ba7      	ldr	r3, [pc, #668]	; (8007a10 <voltammetry_FIR_filter+0x2dc>)
 8007772:	f7f8 ff49 	bl	8000608 <__aeabi_dmul>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4614      	mov	r4, r2
 800777c:	461d      	mov	r5, r3
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007784:	3b01      	subs	r3, #1
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f7f8 fee2 	bl	8000558 <__aeabi_f2d>
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	4b9d      	ldr	r3, [pc, #628]	; (8007a10 <voltammetry_FIR_filter+0x2dc>)
 800779a:	f7f8 ff35 	bl	8000608 <__aeabi_dmul>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4620      	mov	r0, r4
 80077a4:	4629      	mov	r1, r5
 80077a6:	f7f8 fd79 	bl	800029c <__adddf3>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	f7f9 fa21 	bl	8000bf8 <__aeabi_d2f>
 80077b6:	4602      	mov	r2, r0
 80077b8:	4994      	ldr	r1, [pc, #592]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	440b      	add	r3, r1
 80077c0:	601a      	str	r2, [r3, #0]
		count=count+1;
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	3301      	adds	r3, #1
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=1;i<length_data;i++)
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	3301      	adds	r3, #1
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	dbb8      	blt.n	8007748 <voltammetry_FIR_filter+0x14>
	}
	for(int j=0;j<length_data;j=j+1)
 80077d6:	2300      	movs	r3, #0
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
 80077da:	e00f      	b.n	80077fc <voltammetry_FIR_filter+0xc8>
		{
			volta_reverse_filtered_data[j] = volta_filtered_data[count];
 80077dc:	4a8b      	ldr	r2, [pc, #556]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	498b      	ldr	r1, [pc, #556]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	601a      	str	r2, [r3, #0]
			count=count-1;
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	3b01      	subs	r3, #1
 80077f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int j=0;j<length_data;j=j+1)
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	3301      	adds	r3, #1
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
 80077fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	dbeb      	blt.n	80077dc <voltammetry_FIR_filter+0xa8>

		}
	count=0;
 8007804:	2300      	movs	r3, #0
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=1;i<length_data;i++)
 8007808:	2301      	movs	r3, #1
 800780a:	623b      	str	r3, [r7, #32]
 800780c:	e03a      	b.n	8007884 <voltammetry_FIR_filter+0x150>
		{
			volta_filtered_data[0]= volta_reverse_filtered_data[0];
 800780e:	4b81      	ldr	r3, [pc, #516]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a7e      	ldr	r2, [pc, #504]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 8007814:	6013      	str	r3, [r2, #0]
			volta_filtered_data[i] = 0.5*volta_reverse_filtered_data[i] + 0.5*volta_reverse_filtered_data[i-1];
 8007816:	4a7f      	ldr	r2, [pc, #508]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4618      	mov	r0, r3
 8007822:	f7f8 fe99 	bl	8000558 <__aeabi_f2d>
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	4b79      	ldr	r3, [pc, #484]	; (8007a10 <voltammetry_FIR_filter+0x2dc>)
 800782c:	f7f8 feec 	bl	8000608 <__aeabi_dmul>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4614      	mov	r4, r2
 8007836:	461d      	mov	r5, r3
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	3b01      	subs	r3, #1
 800783c:	4a75      	ldr	r2, [pc, #468]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4618      	mov	r0, r3
 8007846:	f7f8 fe87 	bl	8000558 <__aeabi_f2d>
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	4b70      	ldr	r3, [pc, #448]	; (8007a10 <voltammetry_FIR_filter+0x2dc>)
 8007850:	f7f8 feda 	bl	8000608 <__aeabi_dmul>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f8 fd1e 	bl	800029c <__adddf3>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4610      	mov	r0, r2
 8007866:	4619      	mov	r1, r3
 8007868:	f7f9 f9c6 	bl	8000bf8 <__aeabi_d2f>
 800786c:	4602      	mov	r2, r0
 800786e:	4967      	ldr	r1, [pc, #412]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	601a      	str	r2, [r3, #0]
			count=count+1;
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	3301      	adds	r3, #1
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=1;i<length_data;i++)
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	3301      	adds	r3, #1
 8007882:	623b      	str	r3, [r7, #32]
 8007884:	6a3a      	ldr	r2, [r7, #32]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	dbc0      	blt.n	800780e <voltammetry_FIR_filter+0xda>
		}
	for(int i=0;i<length_data;i++)
 800788c:	2300      	movs	r3, #0
 800788e:	61fb      	str	r3, [r7, #28]
 8007890:	e00f      	b.n	80078b2 <voltammetry_FIR_filter+0x17e>
			{
				volta_reverse_filtered_data[i] = volta_filtered_data[count];
 8007892:	4a5e      	ldr	r2, [pc, #376]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	495d      	ldr	r1, [pc, #372]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	601a      	str	r2, [r3, #0]
				count=count-1;
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	3b01      	subs	r3, #1
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=0;i<length_data;i++)
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	3301      	adds	r3, #1
 80078b0:	61fb      	str	r3, [r7, #28]
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	dbeb      	blt.n	8007892 <voltammetry_FIR_filter+0x15e>

			}
	count=0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=1;i<length_data;i++)
 80078be:	2301      	movs	r3, #1
 80078c0:	61bb      	str	r3, [r7, #24]
 80078c2:	e040      	b.n	8007946 <voltammetry_FIR_filter+0x212>
		{
			volta_filtered_data[0]= 0.5*volta_reverse_filtered_data[0];
 80078c4:	4b53      	ldr	r3, [pc, #332]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 80078c6:	edd3 7a00 	vldr	s15, [r3]
 80078ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80078ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078d2:	4b4e      	ldr	r3, [pc, #312]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 80078d4:	edc3 7a00 	vstr	s15, [r3]
			volta_filtered_data[i] = 0.5*volta_reverse_filtered_data[i] + 0.5*volta_reverse_filtered_data[i-1];
 80078d8:	4a4e      	ldr	r2, [pc, #312]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7f8 fe38 	bl	8000558 <__aeabi_f2d>
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	4b48      	ldr	r3, [pc, #288]	; (8007a10 <voltammetry_FIR_filter+0x2dc>)
 80078ee:	f7f8 fe8b 	bl	8000608 <__aeabi_dmul>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4614      	mov	r4, r2
 80078f8:	461d      	mov	r5, r3
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	4a45      	ldr	r2, [pc, #276]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f7f8 fe26 	bl	8000558 <__aeabi_f2d>
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	4b3f      	ldr	r3, [pc, #252]	; (8007a10 <voltammetry_FIR_filter+0x2dc>)
 8007912:	f7f8 fe79 	bl	8000608 <__aeabi_dmul>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4620      	mov	r0, r4
 800791c:	4629      	mov	r1, r5
 800791e:	f7f8 fcbd 	bl	800029c <__adddf3>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4610      	mov	r0, r2
 8007928:	4619      	mov	r1, r3
 800792a:	f7f9 f965 	bl	8000bf8 <__aeabi_d2f>
 800792e:	4602      	mov	r2, r0
 8007930:	4936      	ldr	r1, [pc, #216]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	440b      	add	r3, r1
 8007938:	601a      	str	r2, [r3, #0]
			count=count+1;
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	3301      	adds	r3, #1
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=1;i<length_data;i++)
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	3301      	adds	r3, #1
 8007944:	61bb      	str	r3, [r7, #24]
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	dbba      	blt.n	80078c4 <voltammetry_FIR_filter+0x190>
		}
	for(int i=0;i<length_data;i++)
 800794e:	2300      	movs	r3, #0
 8007950:	617b      	str	r3, [r7, #20]
 8007952:	e00f      	b.n	8007974 <voltammetry_FIR_filter+0x240>
				{
					volta_reverse_filtered_data[i] = volta_filtered_data[count];
 8007954:	4a2d      	ldr	r2, [pc, #180]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	492d      	ldr	r1, [pc, #180]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	601a      	str	r2, [r3, #0]
					count=count-1;
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	3b01      	subs	r3, #1
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=0;i<length_data;i++)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	3301      	adds	r3, #1
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	dbeb      	blt.n	8007954 <voltammetry_FIR_filter+0x220>

				}
	count=0;
 800797c:	2300      	movs	r3, #0
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=1;i<length_data;i++)
 8007980:	2301      	movs	r3, #1
 8007982:	613b      	str	r3, [r7, #16]
 8007984:	e03a      	b.n	80079fc <voltammetry_FIR_filter+0x2c8>
		{
			volta_filtered_data[0]= volta_reverse_filtered_data[0];
 8007986:	4b23      	ldr	r3, [pc, #140]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a20      	ldr	r2, [pc, #128]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 800798c:	6013      	str	r3, [r2, #0]
			volta_filtered_data[i] = 0.5*volta_reverse_filtered_data[i] + 0.5*volta_reverse_filtered_data[i-1];
 800798e:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f7f8 fddd 	bl	8000558 <__aeabi_f2d>
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	4b1b      	ldr	r3, [pc, #108]	; (8007a10 <voltammetry_FIR_filter+0x2dc>)
 80079a4:	f7f8 fe30 	bl	8000608 <__aeabi_dmul>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4614      	mov	r4, r2
 80079ae:	461d      	mov	r5, r3
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	4a17      	ldr	r2, [pc, #92]	; (8007a14 <voltammetry_FIR_filter+0x2e0>)
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7f8 fdcb 	bl	8000558 <__aeabi_f2d>
 80079c2:	f04f 0200 	mov.w	r2, #0
 80079c6:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <voltammetry_FIR_filter+0x2dc>)
 80079c8:	f7f8 fe1e 	bl	8000608 <__aeabi_dmul>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4620      	mov	r0, r4
 80079d2:	4629      	mov	r1, r5
 80079d4:	f7f8 fc62 	bl	800029c <__adddf3>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4610      	mov	r0, r2
 80079de:	4619      	mov	r1, r3
 80079e0:	f7f9 f90a 	bl	8000bf8 <__aeabi_d2f>
 80079e4:	4602      	mov	r2, r0
 80079e6:	4909      	ldr	r1, [pc, #36]	; (8007a0c <voltammetry_FIR_filter+0x2d8>)
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	601a      	str	r2, [r3, #0]
			count=count+1;
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	3301      	adds	r3, #1
 80079f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=1;i<length_data;i++)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	3301      	adds	r3, #1
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	dbc0      	blt.n	8007986 <voltammetry_FIR_filter+0x252>
		}
	for(int i=0;i<length_data;i++)
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	e016      	b.n	8007a38 <voltammetry_FIR_filter+0x304>
 8007a0a:	bf00      	nop
 8007a0c:	2000d1b4 	.word	0x2000d1b4
 8007a10:	3fe00000 	.word	0x3fe00000
 8007a14:	20006c18 	.word	0x20006c18
			{
				volta_reverse_filtered_data[i] = volta_filtered_data[count];
 8007a18:	4a0c      	ldr	r2, [pc, #48]	; (8007a4c <voltammetry_FIR_filter+0x318>)
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	490b      	ldr	r1, [pc, #44]	; (8007a50 <voltammetry_FIR_filter+0x31c>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	601a      	str	r2, [r3, #0]
				count=count-1;
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=0;i<length_data;i++)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3301      	adds	r3, #1
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	dbeb      	blt.n	8007a18 <voltammetry_FIR_filter+0x2e4>
			}
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3730      	adds	r7, #48	; 0x30
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bdb0      	pop	{r4, r5, r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	2000d1b4 	.word	0x2000d1b4
 8007a50:	20006c18 	.word	0x20006c18
 8007a54:	00000000 	.word	0x00000000

08007a58 <TIM4_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TIM4_IRQHandler(void)
{
 8007a58:	b5b0      	push	{r4, r5, r7, lr}
 8007a5a:	b098      	sub	sp, #96	; 0x60
 8007a5c:	af02      	add	r7, sp, #8
	if(TIM4->SR & 0x01)
 8007a5e:	4ba6      	ldr	r3, [pc, #664]	; (8007cf8 <TIM4_IRQHandler+0x2a0>)
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8479 	beq.w	800835e <TIM4_IRQHandler+0x906>
	{
		///// CV /////
	 if(CVFlag.Scan)
 8007a6c:	4ba3      	ldr	r3, [pc, #652]	; (8007cfc <TIM4_IRQHandler+0x2a4>)
 8007a6e:	78db      	ldrb	r3, [r3, #3]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 8167 	beq.w	8007d44 <TIM4_IRQHandler+0x2ec>
	 {
		if(CVFlag.Increment)
 8007a76:	4ba1      	ldr	r3, [pc, #644]	; (8007cfc <TIM4_IRQHandler+0x2a4>)
 8007a78:	791b      	ldrb	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d027      	beq.n	8007ace <TIM4_IRQHandler+0x76>
		{
		 if(DAC1->DHR12R1 < CVVar.DigitalEstop)
 8007a7e:	4ba0      	ldr	r3, [pc, #640]	; (8007d00 <TIM4_IRQHandler+0x2a8>)
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	4aa0      	ldr	r2, [pc, #640]	; (8007d04 <TIM4_IRQHandler+0x2ac>)
 8007a84:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d21a      	bcs.n	8007ac2 <TIM4_IRQHandler+0x6a>
		 {
			 CV_ADC_Volt[CV_ADC_Volt_Count] = DAC1->DHR12R1 + CVVar.DigitalEstep;
 8007a8c:	4b9c      	ldr	r3, [pc, #624]	; (8007d00 <TIM4_IRQHandler+0x2a8>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	4b9c      	ldr	r3, [pc, #624]	; (8007d04 <TIM4_IRQHandler+0x2ac>)
 8007a94:	899b      	ldrh	r3, [r3, #12]
 8007a96:	499c      	ldr	r1, [pc, #624]	; (8007d08 <TIM4_IRQHandler+0x2b0>)
 8007a98:	8809      	ldrh	r1, [r1, #0]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	4b9b      	ldr	r3, [pc, #620]	; (8007d0c <TIM4_IRQHandler+0x2b4>)
 8007aa0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			 DAC1->DHR12R1 = CV_ADC_Volt[CV_ADC_Volt_Count];
 8007aa4:	4b98      	ldr	r3, [pc, #608]	; (8007d08 <TIM4_IRQHandler+0x2b0>)
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4b98      	ldr	r3, [pc, #608]	; (8007d0c <TIM4_IRQHandler+0x2b4>)
 8007aac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007ab0:	4b93      	ldr	r3, [pc, #588]	; (8007d00 <TIM4_IRQHandler+0x2a8>)
 8007ab2:	609a      	str	r2, [r3, #8]

							CV_ADC_Volt_Count++;
 8007ab4:	4b94      	ldr	r3, [pc, #592]	; (8007d08 <TIM4_IRQHandler+0x2b0>)
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	4b92      	ldr	r3, [pc, #584]	; (8007d08 <TIM4_IRQHandler+0x2b0>)
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	e005      	b.n	8007ace <TIM4_IRQHandler+0x76>

		 }

		 else
		 {
			CVFlag.Increment=0;
 8007ac2:	4b8e      	ldr	r3, [pc, #568]	; (8007cfc <TIM4_IRQHandler+0x2a4>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	711a      	strb	r2, [r3, #4]
			CVFlag.Decrement=1;
 8007ac8:	4b8c      	ldr	r3, [pc, #560]	; (8007cfc <TIM4_IRQHandler+0x2a4>)
 8007aca:	2201      	movs	r2, #1
 8007acc:	715a      	strb	r2, [r3, #5]
		//	CVFlag.Scan=0;
		//	CVFlag.RestTime = 1;
		//	TIM4->CR1 &= ~0x01;					// Disable TIM4
		 }
		}
		if(CVFlag.Decrement)
 8007ace:	4b8b      	ldr	r3, [pc, #556]	; (8007cfc <TIM4_IRQHandler+0x2a4>)
 8007ad0:	795b      	ldrb	r3, [r3, #5]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 80fd 	beq.w	8007cd2 <TIM4_IRQHandler+0x27a>
		{
		 if(DAC1->DHR12R1 > CVVar.DigitalEstart)
 8007ad8:	4b89      	ldr	r3, [pc, #548]	; (8007d00 <TIM4_IRQHandler+0x2a8>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	4a89      	ldr	r2, [pc, #548]	; (8007d04 <TIM4_IRQHandler+0x2ac>)
 8007ade:	f9b2 202c 	ldrsh.w	r2, [r2, #44]	; 0x2c
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d91a      	bls.n	8007b1c <TIM4_IRQHandler+0xc4>
		 {
			 CV_ADC_Volt[CV_ADC_Volt_Count] = DAC1->DHR12R1 - CVVar.DigitalEstep;
 8007ae6:	4b86      	ldr	r3, [pc, #536]	; (8007d00 <TIM4_IRQHandler+0x2a8>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	4b85      	ldr	r3, [pc, #532]	; (8007d04 <TIM4_IRQHandler+0x2ac>)
 8007aee:	899b      	ldrh	r3, [r3, #12]
 8007af0:	4985      	ldr	r1, [pc, #532]	; (8007d08 <TIM4_IRQHandler+0x2b0>)
 8007af2:	8809      	ldrh	r1, [r1, #0]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	4b84      	ldr	r3, [pc, #528]	; (8007d0c <TIM4_IRQHandler+0x2b4>)
 8007afa:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			 DAC1->DHR12R1 = CV_ADC_Volt[CV_ADC_Volt_Count];
 8007afe:	4b82      	ldr	r3, [pc, #520]	; (8007d08 <TIM4_IRQHandler+0x2b0>)
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	4b81      	ldr	r3, [pc, #516]	; (8007d0c <TIM4_IRQHandler+0x2b4>)
 8007b06:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007b0a:	4b7d      	ldr	r3, [pc, #500]	; (8007d00 <TIM4_IRQHandler+0x2a8>)
 8007b0c:	609a      	str	r2, [r3, #8]
			 //DAC1->DHR12R1 = DAC1->DHR12R1 - CVVar.DigitalEstep;  // step size
			 CV_ADC_Volt_Count++;
 8007b0e:	4b7e      	ldr	r3, [pc, #504]	; (8007d08 <TIM4_IRQHandler+0x2b0>)
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	4b7c      	ldr	r3, [pc, #496]	; (8007d08 <TIM4_IRQHandler+0x2b0>)
 8007b18:	801a      	strh	r2, [r3, #0]
 8007b1a:	e0da      	b.n	8007cd2 <TIM4_IRQHandler+0x27a>
		 }


		 else
		 {
			 length_CV=(CVT.estop-CVT.estart)/(CVT.estep);
 8007b1c:	4b7c      	ldr	r3, [pc, #496]	; (8007d10 <TIM4_IRQHandler+0x2b8>)
 8007b1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b22:	4b7b      	ldr	r3, [pc, #492]	; (8007d10 <TIM4_IRQHandler+0x2b8>)
 8007b24:	edd3 7a00 	vldr	s15, [r3]
 8007b28:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007b2c:	4b78      	ldr	r3, [pc, #480]	; (8007d10 <TIM4_IRQHandler+0x2b8>)
 8007b2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b3a:	ee17 2a90 	vmov	r2, s15
 8007b3e:	4b75      	ldr	r3, [pc, #468]	; (8007d14 <TIM4_IRQHandler+0x2bc>)
 8007b40:	601a      	str	r2, [r3, #0]
			 length_CV=length_CV*2;
 8007b42:	4b74      	ldr	r3, [pc, #464]	; (8007d14 <TIM4_IRQHandler+0x2bc>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	4a72      	ldr	r2, [pc, #456]	; (8007d14 <TIM4_IRQHandler+0x2bc>)
 8007b4a:	6013      	str	r3, [r2, #0]
				for(int i=0;i<length_CV;i=i+1)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b50:	e063      	b.n	8007c1a <TIM4_IRQHandler+0x1c2>
				{
					float volt_trans=(((CV_ADC_Volt[i]*3.3)/4095)-1.5);
 8007b52:	4a6e      	ldr	r2, [pc, #440]	; (8007d0c <TIM4_IRQHandler+0x2b4>)
 8007b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f8 fcea 	bl	8000534 <__aeabi_i2d>
 8007b60:	a361      	add	r3, pc, #388	; (adr r3, 8007ce8 <TIM4_IRQHandler+0x290>)
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f7f8 fd4f 	bl	8000608 <__aeabi_dmul>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	a35f      	add	r3, pc, #380	; (adr r3, 8007cf0 <TIM4_IRQHandler+0x298>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f7f8 fe70 	bl	800085c <__aeabi_ddiv>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4610      	mov	r0, r2
 8007b82:	4619      	mov	r1, r3
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	4b63      	ldr	r3, [pc, #396]	; (8007d18 <TIM4_IRQHandler+0x2c0>)
 8007b8a:	f7f8 fb85 	bl	8000298 <__aeabi_dsub>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4610      	mov	r0, r2
 8007b94:	4619      	mov	r1, r3
 8007b96:	f7f9 f82f 	bl	8000bf8 <__aeabi_d2f>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	60bb      	str	r3, [r7, #8]
					float current_trans=(((f_read[i]*3.3)/4095)-1.5)/10;
 8007b9e:	4a5f      	ldr	r2, [pc, #380]	; (8007d1c <TIM4_IRQHandler+0x2c4>)
 8007ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7f8 fcc4 	bl	8000534 <__aeabi_i2d>
 8007bac:	a34e      	add	r3, pc, #312	; (adr r3, 8007ce8 <TIM4_IRQHandler+0x290>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 fd29 	bl	8000608 <__aeabi_dmul>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	a34c      	add	r3, pc, #304	; (adr r3, 8007cf0 <TIM4_IRQHandler+0x298>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fe4a 	bl	800085c <__aeabi_ddiv>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4619      	mov	r1, r3
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	4b50      	ldr	r3, [pc, #320]	; (8007d18 <TIM4_IRQHandler+0x2c0>)
 8007bd6:	f7f8 fb5f 	bl	8000298 <__aeabi_dsub>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4610      	mov	r0, r2
 8007be0:	4619      	mov	r1, r3
 8007be2:	f04f 0200 	mov.w	r2, #0
 8007be6:	4b4e      	ldr	r3, [pc, #312]	; (8007d20 <TIM4_IRQHandler+0x2c8>)
 8007be8:	f7f8 fe38 	bl	800085c <__aeabi_ddiv>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	f7f9 f800 	bl	8000bf8 <__aeabi_d2f>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	607b      	str	r3, [r7, #4]
					CV_Voltageval[i]=volt_trans;
 8007bfc:	4a49      	ldr	r2, [pc, #292]	; (8007d24 <TIM4_IRQHandler+0x2cc>)
 8007bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	601a      	str	r2, [r3, #0]
					CV_Currentval[i]=current_trans;
 8007c08:	4a47      	ldr	r2, [pc, #284]	; (8007d28 <TIM4_IRQHandler+0x2d0>)
 8007c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
				for(int i=0;i<length_CV;i=i+1)
 8007c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c16:	3301      	adds	r3, #1
 8007c18:	657b      	str	r3, [r7, #84]	; 0x54
 8007c1a:	4b3e      	ldr	r3, [pc, #248]	; (8007d14 <TIM4_IRQHandler+0x2bc>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c20:	429a      	cmp	r2, r3
 8007c22:	db96      	blt.n	8007b52 <TIM4_IRQHandler+0xfa>
			     }
				voltammetry_FIR_filter(CV_Currentval,length_CV);
 8007c24:	4b3b      	ldr	r3, [pc, #236]	; (8007d14 <TIM4_IRQHandler+0x2bc>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	483f      	ldr	r0, [pc, #252]	; (8007d28 <TIM4_IRQHandler+0x2d0>)
 8007c2c:	f7ff fd82 	bl	8007734 <voltammetry_FIR_filter>
			  	for(int i=0;i<length_CV;i=i+1)
 8007c30:	2300      	movs	r3, #0
 8007c32:	653b      	str	r3, [r7, #80]	; 0x50
 8007c34:	e032      	b.n	8007c9c <TIM4_IRQHandler+0x244>
			  		{
		  			 sprintf((char*)sendingData,"%f %f\n",CV_Voltageval[i],volta_reverse_filtered_data[i]);
 8007c36:	4a3b      	ldr	r2, [pc, #236]	; (8007d24 <TIM4_IRQHandler+0x2cc>)
 8007c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7f8 fc89 	bl	8000558 <__aeabi_f2d>
 8007c46:	4604      	mov	r4, r0
 8007c48:	460d      	mov	r5, r1
 8007c4a:	4a38      	ldr	r2, [pc, #224]	; (8007d2c <TIM4_IRQHandler+0x2d4>)
 8007c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7f8 fc7f 	bl	8000558 <__aeabi_f2d>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	e9cd 2300 	strd	r2, r3, [sp]
 8007c62:	4622      	mov	r2, r4
 8007c64:	462b      	mov	r3, r5
 8007c66:	4932      	ldr	r1, [pc, #200]	; (8007d30 <TIM4_IRQHandler+0x2d8>)
 8007c68:	4832      	ldr	r0, [pc, #200]	; (8007d34 <TIM4_IRQHandler+0x2dc>)
 8007c6a:	f001 fcbf 	bl	80095ec <siprintf>
		  			 HAL_UART_Transmit(&huart5, sendingData, strlen((char*)sendingData),100);
 8007c6e:	4831      	ldr	r0, [pc, #196]	; (8007d34 <TIM4_IRQHandler+0x2dc>)
 8007c70:	f7f8 fab6 	bl	80001e0 <strlen>
 8007c74:	4603      	mov	r3, r0
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	2364      	movs	r3, #100	; 0x64
 8007c7a:	492e      	ldr	r1, [pc, #184]	; (8007d34 <TIM4_IRQHandler+0x2dc>)
 8007c7c:	482e      	ldr	r0, [pc, #184]	; (8007d38 <TIM4_IRQHandler+0x2e0>)
 8007c7e:	f7fd ff2b 	bl	8005ad8 <HAL_UART_Transmit>
		  			 for(int j=0;j<500000;j++)
 8007c82:	2300      	movs	r3, #0
 8007c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c86:	e002      	b.n	8007c8e <TIM4_IRQHandler+0x236>
 8007c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c90:	4a2a      	ldr	r2, [pc, #168]	; (8007d3c <TIM4_IRQHandler+0x2e4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	ddf8      	ble.n	8007c88 <TIM4_IRQHandler+0x230>
			  	for(int i=0;i<length_CV;i=i+1)
 8007c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c98:	3301      	adds	r3, #1
 8007c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c9c:	4b1d      	ldr	r3, [pc, #116]	; (8007d14 <TIM4_IRQHandler+0x2bc>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	dbc7      	blt.n	8007c36 <TIM4_IRQHandler+0x1de>
		  			 {}
			  		}

			CVFlag.Increment=1;
 8007ca6:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <TIM4_IRQHandler+0x2a4>)
 8007ca8:	2201      	movs	r2, #1
 8007caa:	711a      	strb	r2, [r3, #4]
			CVFlag.Decrement = 0;
 8007cac:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <TIM4_IRQHandler+0x2a4>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	715a      	strb	r2, [r3, #5]
			CVFlag.Scan = 0;
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <TIM4_IRQHandler+0x2a4>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	70da      	strb	r2, [r3, #3]
			CVFlag.Busy = 1;  // UART On
 8007cb8:	4b10      	ldr	r3, [pc, #64]	; (8007cfc <TIM4_IRQHandler+0x2a4>)
 8007cba:	2201      	movs	r2, #1
 8007cbc:	709a      	strb	r2, [r3, #2]
			TIM4->CR1 &= ~0x01;	  // Disable TIM4
 8007cbe:	4b0e      	ldr	r3, [pc, #56]	; (8007cf8 <TIM4_IRQHandler+0x2a0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a0d      	ldr	r2, [pc, #52]	; (8007cf8 <TIM4_IRQHandler+0x2a0>)
 8007cc4:	f023 0301 	bic.w	r3, r3, #1
 8007cc8:	6013      	str	r3, [r2, #0]


			*f_read_ptr = (int32_t) f_read;
 8007cca:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <TIM4_IRQHandler+0x2e8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a13      	ldr	r2, [pc, #76]	; (8007d1c <TIM4_IRQHandler+0x2c4>)
 8007cd0:	601a      	str	r2, [r3, #0]

	    }
		//LED_GPIO_Toggle(GPIOB,GPIO_PIN_7);							// Toggle PB7
		//LED_GPIO_Toggle(GPIOE,GPIO_PIN_10);

		TIM2->CR1 |= 0x01;								// Enable TIM2
 8007cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	e336      	b.n	8008352 <TIM4_IRQHandler+0x8fa>
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	66666666 	.word	0x66666666
 8007cec:	400a6666 	.word	0x400a6666
 8007cf0:	00000000 	.word	0x00000000
 8007cf4:	40affe00 	.word	0x40affe00
 8007cf8:	40000800 	.word	0x40000800
 8007cfc:	20002ae4 	.word	0x20002ae4
 8007d00:	40007400 	.word	0x40007400
 8007d04:	20004214 	.word	0x20004214
 8007d08:	20000228 	.word	0x20000228
 8007d0c:	20005624 	.word	0x20005624
 8007d10:	20003140 	.word	0x20003140
 8007d14:	2000c9d8 	.word	0x2000c9d8
 8007d18:	3ff80000 	.word	0x3ff80000
 8007d1c:	200073e8 	.word	0x200073e8
 8007d20:	40240000 	.word	0x40240000
 8007d24:	2000c9e4 	.word	0x2000c9e4
 8007d28:	2000c208 	.word	0x2000c208
 8007d2c:	20006c18 	.word	0x20006c18
 8007d30:	0800c984 	.word	0x0800c984
 8007d34:	20003938 	.word	0x20003938
 8007d38:	20005488 	.word	0x20005488
 8007d3c:	0007a11f 	.word	0x0007a11f
 8007d40:	20000014 	.word	0x20000014
	  }
     ///// SWV /////
	else if(SWVFlag.Scan)
 8007d44:	4ba4      	ldr	r3, [pc, #656]	; (8007fd8 <TIM4_IRQHandler+0x580>)
 8007d46:	78db      	ldrb	r3, [r3, #3]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 8163 	beq.w	8008014 <TIM4_IRQHandler+0x5bc>
	 {
		TIM2->CR1 |= 0x01;	    // Enable TIM2
 8007d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007d58:	f043 0301 	orr.w	r3, r3, #1
 8007d5c:	6013      	str	r3, [r2, #0]
		SWVFlag.Decrement = 1; // For ADC valid_adc = 1;
 8007d5e:	4b9e      	ldr	r3, [pc, #632]	; (8007fd8 <TIM4_IRQHandler+0x580>)
 8007d60:	2201      	movs	r2, #1
 8007d62:	715a      	strb	r2, [r3, #5]
		uint16_t dac1_1_v = 0xFFF & DAC1->DHR12RD;				// Get DAC input data for CH1
 8007d64:	4b9d      	ldr	r3, [pc, #628]	; (8007fdc <TIM4_IRQHandler+0x584>)
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d6e:	82fb      	strh	r3, [r7, #22]
		uint16_t dac1_2_v = DAC1->DHR12RD >> 16;					// Get DAC input data for CH2
 8007d70:	4b9a      	ldr	r3, [pc, #616]	; (8007fdc <TIM4_IRQHandler+0x584>)
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	0c1b      	lsrs	r3, r3, #16
 8007d76:	82bb      	strh	r3, [r7, #20]
		 if(dac1_2_v >= CVVar.SWC_DAC_UpperLimit)
 8007d78:	4b99      	ldr	r3, [pc, #612]	; (8007fe0 <TIM4_IRQHandler+0x588>)
 8007d7a:	f8b3 3688 	ldrh.w	r3, [r3, #1672]	; 0x688
 8007d7e:	8aba      	ldrh	r2, [r7, #20]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d30b      	bcc.n	8007d9c <TIM4_IRQHandler+0x344>
		 {
		 	DAC1->DHR12RD = (CVVar.SWV_DAC_LowerLimit << 16) + dac1_1_v;
 8007d84:	4b96      	ldr	r3, [pc, #600]	; (8007fe0 <TIM4_IRQHandler+0x588>)
 8007d86:	f8b3 3686 	ldrh.w	r3, [r3, #1670]	; 0x686
 8007d8a:	041a      	lsls	r2, r3, #16
 8007d8c:	8afb      	ldrh	r3, [r7, #22]
 8007d8e:	441a      	add	r2, r3
 8007d90:	4b92      	ldr	r3, [pc, #584]	; (8007fdc <TIM4_IRQHandler+0x584>)
 8007d92:	621a      	str	r2, [r3, #32]

		 	SWVFlag.Increment = 0;
 8007d94:	4b90      	ldr	r3, [pc, #576]	; (8007fd8 <TIM4_IRQHandler+0x580>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	711a      	strb	r2, [r3, #4]
 8007d9a:	e00a      	b.n	8007db2 <TIM4_IRQHandler+0x35a>
		 }
		 else
		 {
		  	DAC1->DHR12RD = (CVVar.SWC_DAC_UpperLimit << 16) + dac1_1_v;
 8007d9c:	4b90      	ldr	r3, [pc, #576]	; (8007fe0 <TIM4_IRQHandler+0x588>)
 8007d9e:	f8b3 3688 	ldrh.w	r3, [r3, #1672]	; 0x688
 8007da2:	041a      	lsls	r2, r3, #16
 8007da4:	8afb      	ldrh	r3, [r7, #22]
 8007da6:	441a      	add	r2, r3
 8007da8:	4b8c      	ldr	r3, [pc, #560]	; (8007fdc <TIM4_IRQHandler+0x584>)
 8007daa:	621a      	str	r2, [r3, #32]
		  	SWVFlag.Increment = 1;
 8007dac:	4b8a      	ldr	r3, [pc, #552]	; (8007fd8 <TIM4_IRQHandler+0x580>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	711a      	strb	r2, [r3, #4]
		 }
		 dac1_1_v = 0xFFF & DAC1->DHR12RD;
 8007db2:	4b8a      	ldr	r3, [pc, #552]	; (8007fdc <TIM4_IRQHandler+0x584>)
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dbc:	82fb      	strh	r3, [r7, #22]
		 dac1_2_v = DAC1->DHR12RD >> 16;
 8007dbe:	4b87      	ldr	r3, [pc, #540]	; (8007fdc <TIM4_IRQHandler+0x584>)
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	82bb      	strh	r3, [r7, #20]

		 if(SWVFlag.Increment)
 8007dc6:	4b84      	ldr	r3, [pc, #528]	; (8007fd8 <TIM4_IRQHandler+0x580>)
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 82c1 	beq.w	8008352 <TIM4_IRQHandler+0x8fa>
		 {
		   if(dac1_1_v < CVVar.DigitalEstop)
 8007dd0:	8afb      	ldrh	r3, [r7, #22]
 8007dd2:	4a83      	ldr	r2, [pc, #524]	; (8007fe0 <TIM4_IRQHandler+0x588>)
 8007dd4:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	da09      	bge.n	8007df0 <TIM4_IRQHandler+0x398>
		   DAC1->DHR12RD = (dac1_2_v << 16) + dac1_1_v + CVVar.DigitalEstep;   // 12 is for Estep
 8007ddc:	8abb      	ldrh	r3, [r7, #20]
 8007dde:	041a      	lsls	r2, r3, #16
 8007de0:	8afb      	ldrh	r3, [r7, #22]
 8007de2:	4413      	add	r3, r2
 8007de4:	4a7e      	ldr	r2, [pc, #504]	; (8007fe0 <TIM4_IRQHandler+0x588>)
 8007de6:	8992      	ldrh	r2, [r2, #12]
 8007de8:	441a      	add	r2, r3
 8007dea:	4b7c      	ldr	r3, [pc, #496]	; (8007fdc <TIM4_IRQHandler+0x584>)
 8007dec:	621a      	str	r2, [r3, #32]
 8007dee:	e2b0      	b.n	8008352 <TIM4_IRQHandler+0x8fa>
		   else
		   {
			  SWVFlag.Increment = 0;
 8007df0:	4b79      	ldr	r3, [pc, #484]	; (8007fd8 <TIM4_IRQHandler+0x580>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	711a      	strb	r2, [r3, #4]
			  length_SWV=(CVT.estop-CVT.estart)/(CVT.estep);
 8007df6:	4b7b      	ldr	r3, [pc, #492]	; (8007fe4 <TIM4_IRQHandler+0x58c>)
 8007df8:	ed93 7a01 	vldr	s14, [r3, #4]
 8007dfc:	4b79      	ldr	r3, [pc, #484]	; (8007fe4 <TIM4_IRQHandler+0x58c>)
 8007dfe:	edd3 7a00 	vldr	s15, [r3]
 8007e02:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007e06:	4b77      	ldr	r3, [pc, #476]	; (8007fe4 <TIM4_IRQHandler+0x58c>)
 8007e08:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e14:	ee17 2a90 	vmov	r2, s15
 8007e18:	4b73      	ldr	r3, [pc, #460]	; (8007fe8 <TIM4_IRQHandler+0x590>)
 8007e1a:	601a      	str	r2, [r3, #0]
			  	for(int i=0;i<length_SWV;i=i+1)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e20:	e079      	b.n	8007f16 <TIM4_IRQHandler+0x4be>
			  			{
			  			float c1=f_read[2*i];
 8007e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	4a71      	ldr	r2, [pc, #452]	; (8007fec <TIM4_IRQHandler+0x594>)
 8007e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e34:	edc7 7a04 	vstr	s15, [r7, #16]
			  			float c2=f_read[2*i+1];
 8007e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	4a6b      	ldr	r2, [pc, #428]	; (8007fec <TIM4_IRQHandler+0x594>)
 8007e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e4c:	edc7 7a03 	vstr	s15, [r7, #12]
			  			float c3;
			  			c1=(1.5-(3.3/4095)*c1)/10;
 8007e50:	6938      	ldr	r0, [r7, #16]
 8007e52:	f7f8 fb81 	bl	8000558 <__aeabi_f2d>
 8007e56:	a35e      	add	r3, pc, #376	; (adr r3, 8007fd0 <TIM4_IRQHandler+0x578>)
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	f7f8 fbd4 	bl	8000608 <__aeabi_dmul>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	f04f 0000 	mov.w	r0, #0
 8007e68:	4961      	ldr	r1, [pc, #388]	; (8007ff0 <TIM4_IRQHandler+0x598>)
 8007e6a:	f7f8 fa15 	bl	8000298 <__aeabi_dsub>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4610      	mov	r0, r2
 8007e74:	4619      	mov	r1, r3
 8007e76:	f04f 0200 	mov.w	r2, #0
 8007e7a:	4b5e      	ldr	r3, [pc, #376]	; (8007ff4 <TIM4_IRQHandler+0x59c>)
 8007e7c:	f7f8 fcee 	bl	800085c <__aeabi_ddiv>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4610      	mov	r0, r2
 8007e86:	4619      	mov	r1, r3
 8007e88:	f7f8 feb6 	bl	8000bf8 <__aeabi_d2f>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	613b      	str	r3, [r7, #16]
			  			c2=(1.5-(3.3/4095)*c2)/10;
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7f8 fb61 	bl	8000558 <__aeabi_f2d>
 8007e96:	a34e      	add	r3, pc, #312	; (adr r3, 8007fd0 <TIM4_IRQHandler+0x578>)
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f7f8 fbb4 	bl	8000608 <__aeabi_dmul>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	f04f 0000 	mov.w	r0, #0
 8007ea8:	4951      	ldr	r1, [pc, #324]	; (8007ff0 <TIM4_IRQHandler+0x598>)
 8007eaa:	f7f8 f9f5 	bl	8000298 <__aeabi_dsub>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f04f 0200 	mov.w	r2, #0
 8007eba:	4b4e      	ldr	r3, [pc, #312]	; (8007ff4 <TIM4_IRQHandler+0x59c>)
 8007ebc:	f7f8 fcce 	bl	800085c <__aeabi_ddiv>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	f7f8 fe96 	bl	8000bf8 <__aeabi_d2f>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	60fb      	str	r3, [r7, #12]
			  			if(c1>c2)
 8007ed0:	ed97 7a04 	vldr	s14, [r7, #16]
 8007ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ed8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee0:	dd08      	ble.n	8007ef4 <TIM4_IRQHandler+0x49c>
			  			{
			  				 c3=c1-c2;
 8007ee2:	ed97 7a04 	vldr	s14, [r7, #16]
 8007ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8007eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eee:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8007ef2:	e007      	b.n	8007f04 <TIM4_IRQHandler+0x4ac>
			  			}
			  			else
			  			{
			  				 c3=c2-c1;
 8007ef4:	ed97 7a03 	vldr	s14, [r7, #12]
 8007ef8:	edd7 7a04 	vldr	s15, [r7, #16]
 8007efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f00:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			  			}

			  			SWV_Currentval[i]=c3;
 8007f04:	4a3c      	ldr	r2, [pc, #240]	; (8007ff8 <TIM4_IRQHandler+0x5a0>)
 8007f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f0e:	601a      	str	r2, [r3, #0]
			  	for(int i=0;i<length_SWV;i=i+1)
 8007f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f12:	3301      	adds	r3, #1
 8007f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f16:	4b34      	ldr	r3, [pc, #208]	; (8007fe8 <TIM4_IRQHandler+0x590>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	db80      	blt.n	8007e22 <TIM4_IRQHandler+0x3ca>

			  			 }
			  	voltammetry_FIR_filter(SWV_Currentval,length_SWV);
 8007f20:	4b31      	ldr	r3, [pc, #196]	; (8007fe8 <TIM4_IRQHandler+0x590>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4619      	mov	r1, r3
 8007f26:	4834      	ldr	r0, [pc, #208]	; (8007ff8 <TIM4_IRQHandler+0x5a0>)
 8007f28:	f7ff fc04 	bl	8007734 <voltammetry_FIR_filter>
			  	float volt_SWV=CVT.estart;
 8007f2c:	4b2d      	ldr	r3, [pc, #180]	; (8007fe4 <TIM4_IRQHandler+0x58c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	643b      	str	r3, [r7, #64]	; 0x40
			  	for(int i=0;i<length_SWV;i=i+1)
 8007f32:	2300      	movs	r3, #0
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f36:	e036      	b.n	8007fa6 <TIM4_IRQHandler+0x54e>
			  		{
		  			 sprintf((char*)sendingData,"%f %f\n",volt_SWV,volta_reverse_filtered_data[i]);
 8007f38:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f3a:	f7f8 fb0d 	bl	8000558 <__aeabi_f2d>
 8007f3e:	4604      	mov	r4, r0
 8007f40:	460d      	mov	r5, r1
 8007f42:	4a2e      	ldr	r2, [pc, #184]	; (8007ffc <TIM4_IRQHandler+0x5a4>)
 8007f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7f8 fb03 	bl	8000558 <__aeabi_f2d>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	e9cd 2300 	strd	r2, r3, [sp]
 8007f5a:	4622      	mov	r2, r4
 8007f5c:	462b      	mov	r3, r5
 8007f5e:	4928      	ldr	r1, [pc, #160]	; (8008000 <TIM4_IRQHandler+0x5a8>)
 8007f60:	4828      	ldr	r0, [pc, #160]	; (8008004 <TIM4_IRQHandler+0x5ac>)
 8007f62:	f001 fb43 	bl	80095ec <siprintf>
		  			 HAL_UART_Transmit(&huart5, sendingData, strlen((char*)sendingData),100);
 8007f66:	4827      	ldr	r0, [pc, #156]	; (8008004 <TIM4_IRQHandler+0x5ac>)
 8007f68:	f7f8 f93a 	bl	80001e0 <strlen>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	2364      	movs	r3, #100	; 0x64
 8007f72:	4924      	ldr	r1, [pc, #144]	; (8008004 <TIM4_IRQHandler+0x5ac>)
 8007f74:	4824      	ldr	r0, [pc, #144]	; (8008008 <TIM4_IRQHandler+0x5b0>)
 8007f76:	f7fd fdaf 	bl	8005ad8 <HAL_UART_Transmit>
		  			volt_SWV= volt_SWV+ CVT.estep;
 8007f7a:	4b1a      	ldr	r3, [pc, #104]	; (8007fe4 <TIM4_IRQHandler+0x58c>)
 8007f7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007f80:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f88:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		  			 for(int j=0;j<500000;j++)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f90:	e002      	b.n	8007f98 <TIM4_IRQHandler+0x540>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	3301      	adds	r3, #1
 8007f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	4a1c      	ldr	r2, [pc, #112]	; (800800c <TIM4_IRQHandler+0x5b4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	ddf8      	ble.n	8007f92 <TIM4_IRQHandler+0x53a>
			  	for(int i=0;i<length_SWV;i=i+1)
 8007fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa6:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <TIM4_IRQHandler+0x590>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fac:	429a      	cmp	r2, r3
 8007fae:	dbc3      	blt.n	8007f38 <TIM4_IRQHandler+0x4e0>
		  			 {}
			  		}
		 	  TIM4->CR1 &= ~0x01;				// Disable TIM4
 8007fb0:	4b17      	ldr	r3, [pc, #92]	; (8008010 <TIM4_IRQHandler+0x5b8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a16      	ldr	r2, [pc, #88]	; (8008010 <TIM4_IRQHandler+0x5b8>)
 8007fb6:	f023 0301 	bic.w	r3, r3, #1
 8007fba:	6013      	str	r3, [r2, #0]
		 	  SWVFlag.Scan = 0;
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <TIM4_IRQHandler+0x580>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	70da      	strb	r2, [r3, #3]
		 	  SWVFlag.Busy = 1;
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <TIM4_IRQHandler+0x580>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	709a      	strb	r2, [r3, #2]
 8007fc8:	e1c3      	b.n	8008352 <TIM4_IRQHandler+0x8fa>
 8007fca:	bf00      	nop
 8007fcc:	f3af 8000 	nop.w
 8007fd0:	e734d9b4 	.word	0xe734d9b4
 8007fd4:	3f4a680c 	.word	0x3f4a680c
 8007fd8:	20000b5c 	.word	0x20000b5c
 8007fdc:	40007400 	.word	0x40007400
 8007fe0:	20004214 	.word	0x20004214
 8007fe4:	20003140 	.word	0x20003140
 8007fe8:	2000c9dc 	.word	0x2000c9dc
 8007fec:	200073e8 	.word	0x200073e8
 8007ff0:	3ff80000 	.word	0x3ff80000
 8007ff4:	40240000 	.word	0x40240000
 8007ff8:	20005df4 	.word	0x20005df4
 8007ffc:	20006c18 	.word	0x20006c18
 8008000:	0800c984 	.word	0x0800c984
 8008004:	20003938 	.word	0x20003938
 8008008:	20005488 	.word	0x20005488
 800800c:	0007a11f 	.word	0x0007a11f
 8008010:	40000800 	.word	0x40000800
		// LED_GPIO_Toggle(GPIOB,GPIO_PIN_7);							// Toggle PB7
	 }

//////DPV //////

	else if(DPVFlag.Scan)
 8008014:	4bac      	ldr	r3, [pc, #688]	; (80082c8 <TIM4_IRQHandler+0x870>)
 8008016:	78db      	ldrb	r3, [r3, #3]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 8194 	beq.w	8008346 <TIM4_IRQHandler+0x8ee>
			 {

				DPVFlag.Decrement = 1; // For ADC valid_adc = 1;
 800801e:	4baa      	ldr	r3, [pc, #680]	; (80082c8 <TIM4_IRQHandler+0x870>)
 8008020:	2201      	movs	r2, #1
 8008022:	715a      	strb	r2, [r3, #5]
				uint16_t dac1_1_v = 0xFFF & DAC1->DHR12RD;				// Get DAC input data for CH1
 8008024:	4ba9      	ldr	r3, [pc, #676]	; (80082cc <TIM4_IRQHandler+0x874>)
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	b29b      	uxth	r3, r3
 800802a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800802e:	847b      	strh	r3, [r7, #34]	; 0x22
				uint16_t dac1_2_v = DAC1->DHR12RD >> 16;					// Get DAC input data for CH2
 8008030:	4ba6      	ldr	r3, [pc, #664]	; (80082cc <TIM4_IRQHandler+0x874>)
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	843b      	strh	r3, [r7, #32]
				 if(dac1_2_v >= CVVar.SWC_DAC_UpperLimit)
 8008038:	4ba5      	ldr	r3, [pc, #660]	; (80082d0 <TIM4_IRQHandler+0x878>)
 800803a:	f8b3 3688 	ldrh.w	r3, [r3, #1672]	; 0x688
 800803e:	8c3a      	ldrh	r2, [r7, #32]
 8008040:	429a      	cmp	r2, r3
 8008042:	d327      	bcc.n	8008094 <TIM4_IRQHandler+0x63c>
				 {

					TIM2->ARR= CVVar.ADCTim2Value;
 8008044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008048:	4ba1      	ldr	r3, [pc, #644]	; (80082d0 <TIM4_IRQHandler+0x878>)
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM2->CR1 |= 0x01;    // Enable TIM2
 800804e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008058:	f043 0301 	orr.w	r3, r3, #1
 800805c:	6013      	str	r3, [r2, #0]
					CVVar.SWV_ADCSamples= DPV_Off_ADCSamples;
 800805e:	4b9d      	ldr	r3, [pc, #628]	; (80082d4 <TIM4_IRQHandler+0x87c>)
 8008060:	881a      	ldrh	r2, [r3, #0]
 8008062:	4b9b      	ldr	r3, [pc, #620]	; (80082d0 <TIM4_IRQHandler+0x878>)
 8008064:	f8a3 2684 	strh.w	r2, [r3, #1668]	; 0x684
					TIM4->ARR= CVVar.Tim4Value;;
 8008068:	4b99      	ldr	r3, [pc, #612]	; (80082d0 <TIM4_IRQHandler+0x878>)
 800806a:	8a9a      	ldrh	r2, [r3, #20]
 800806c:	4b9a      	ldr	r3, [pc, #616]	; (80082d8 <TIM4_IRQHandler+0x880>)
 800806e:	62da      	str	r2, [r3, #44]	; 0x2c
					TIM4->CR1 |= 0x01;
 8008070:	4b99      	ldr	r3, [pc, #612]	; (80082d8 <TIM4_IRQHandler+0x880>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a98      	ldr	r2, [pc, #608]	; (80082d8 <TIM4_IRQHandler+0x880>)
 8008076:	f043 0301 	orr.w	r3, r3, #1
 800807a:	6013      	str	r3, [r2, #0]
				 	DAC1->DHR12RD = (CVVar.SWV_DAC_LowerLimit << 16) + dac1_1_v;
 800807c:	4b94      	ldr	r3, [pc, #592]	; (80082d0 <TIM4_IRQHandler+0x878>)
 800807e:	f8b3 3686 	ldrh.w	r3, [r3, #1670]	; 0x686
 8008082:	041a      	lsls	r2, r3, #16
 8008084:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008086:	441a      	add	r2, r3
 8008088:	4b90      	ldr	r3, [pc, #576]	; (80082cc <TIM4_IRQHandler+0x874>)
 800808a:	621a      	str	r2, [r3, #32]
				 	DPVFlag.Increment = 0;
 800808c:	4b8e      	ldr	r3, [pc, #568]	; (80082c8 <TIM4_IRQHandler+0x870>)
 800808e:	2200      	movs	r2, #0
 8008090:	711a      	strb	r2, [r3, #4]
 8008092:	e026      	b.n	80080e2 <TIM4_IRQHandler+0x68a>
				 }
				 else
				 {

					TIM2->ARR= CVVar.ADCTim21Value;
 8008094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008098:	4b8d      	ldr	r3, [pc, #564]	; (80082d0 <TIM4_IRQHandler+0x878>)
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM2->CR1 |= 0x01;    // Enable TIM2
 800809e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
					CVVar.SWV_ADCSamples= DPV_On_ADCSamples;
 80080ae:	4b8b      	ldr	r3, [pc, #556]	; (80082dc <TIM4_IRQHandler+0x884>)
 80080b0:	881a      	ldrh	r2, [r3, #0]
 80080b2:	4b87      	ldr	r3, [pc, #540]	; (80082d0 <TIM4_IRQHandler+0x878>)
 80080b4:	f8a3 2684 	strh.w	r2, [r3, #1668]	; 0x684
					TIM4->ARR= CVVar.Tim41Value;;
 80080b8:	4b85      	ldr	r3, [pc, #532]	; (80082d0 <TIM4_IRQHandler+0x878>)
 80080ba:	8ada      	ldrh	r2, [r3, #22]
 80080bc:	4b86      	ldr	r3, [pc, #536]	; (80082d8 <TIM4_IRQHandler+0x880>)
 80080be:	62da      	str	r2, [r3, #44]	; 0x2c
					TIM4->CR1 |= 0x01;
 80080c0:	4b85      	ldr	r3, [pc, #532]	; (80082d8 <TIM4_IRQHandler+0x880>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a84      	ldr	r2, [pc, #528]	; (80082d8 <TIM4_IRQHandler+0x880>)
 80080c6:	f043 0301 	orr.w	r3, r3, #1
 80080ca:	6013      	str	r3, [r2, #0]
				  	DAC1->DHR12RD = (CVVar.SWC_DAC_UpperLimit << 16) + dac1_1_v;
 80080cc:	4b80      	ldr	r3, [pc, #512]	; (80082d0 <TIM4_IRQHandler+0x878>)
 80080ce:	f8b3 3688 	ldrh.w	r3, [r3, #1672]	; 0x688
 80080d2:	041a      	lsls	r2, r3, #16
 80080d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080d6:	441a      	add	r2, r3
 80080d8:	4b7c      	ldr	r3, [pc, #496]	; (80082cc <TIM4_IRQHandler+0x874>)
 80080da:	621a      	str	r2, [r3, #32]
				  	DPVFlag.Increment = 1;
 80080dc:	4b7a      	ldr	r3, [pc, #488]	; (80082c8 <TIM4_IRQHandler+0x870>)
 80080de:	2201      	movs	r2, #1
 80080e0:	711a      	strb	r2, [r3, #4]
				 }
				 dac1_1_v = 0xFFF & DAC1->DHR12RD;
 80080e2:	4b7a      	ldr	r3, [pc, #488]	; (80082cc <TIM4_IRQHandler+0x874>)
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080ec:	847b      	strh	r3, [r7, #34]	; 0x22
				 dac1_2_v = DAC1->DHR12RD >> 16;
 80080ee:	4b77      	ldr	r3, [pc, #476]	; (80082cc <TIM4_IRQHandler+0x874>)
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	0c1b      	lsrs	r3, r3, #16
 80080f4:	843b      	strh	r3, [r7, #32]
				 if(DPVFlag.Increment)
 80080f6:	4b74      	ldr	r3, [pc, #464]	; (80082c8 <TIM4_IRQHandler+0x870>)
 80080f8:	791b      	ldrb	r3, [r3, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 8129 	beq.w	8008352 <TIM4_IRQHandler+0x8fa>
				 {
				   if(dac1_1_v < CVVar.DigitalEstop)
 8008100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008102:	4a73      	ldr	r2, [pc, #460]	; (80082d0 <TIM4_IRQHandler+0x878>)
 8008104:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 8008108:	4293      	cmp	r3, r2
 800810a:	da09      	bge.n	8008120 <TIM4_IRQHandler+0x6c8>
				   DAC1->DHR12RD = (dac1_2_v << 16) + dac1_1_v + CVVar.DigitalEstep;   // 12 is for Estep
 800810c:	8c3b      	ldrh	r3, [r7, #32]
 800810e:	041a      	lsls	r2, r3, #16
 8008110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008112:	4413      	add	r3, r2
 8008114:	4a6e      	ldr	r2, [pc, #440]	; (80082d0 <TIM4_IRQHandler+0x878>)
 8008116:	8992      	ldrh	r2, [r2, #12]
 8008118:	441a      	add	r2, r3
 800811a:	4b6c      	ldr	r3, [pc, #432]	; (80082cc <TIM4_IRQHandler+0x874>)
 800811c:	621a      	str	r2, [r3, #32]
 800811e:	e118      	b.n	8008352 <TIM4_IRQHandler+0x8fa>
				   else
				   {
						  length_DPV=(CVT.estop-CVT.estart)/(CVT.estep);
 8008120:	4b6f      	ldr	r3, [pc, #444]	; (80082e0 <TIM4_IRQHandler+0x888>)
 8008122:	ed93 7a01 	vldr	s14, [r3, #4]
 8008126:	4b6e      	ldr	r3, [pc, #440]	; (80082e0 <TIM4_IRQHandler+0x888>)
 8008128:	edd3 7a00 	vldr	s15, [r3]
 800812c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008130:	4b6b      	ldr	r3, [pc, #428]	; (80082e0 <TIM4_IRQHandler+0x888>)
 8008132:	ed93 7a02 	vldr	s14, [r3, #8]
 8008136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800813a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800813e:	ee17 2a90 	vmov	r2, s15
 8008142:	4b68      	ldr	r3, [pc, #416]	; (80082e4 <TIM4_IRQHandler+0x88c>)
 8008144:	601a      	str	r2, [r3, #0]
								  	for(int i=0;i<length_DPV;i=i+1)
 8008146:	2300      	movs	r3, #0
 8008148:	637b      	str	r3, [r7, #52]	; 0x34
 800814a:	e079      	b.n	8008240 <TIM4_IRQHandler+0x7e8>
								  			{
								  			float c1=f_read[2*i];
 800814c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	4a65      	ldr	r2, [pc, #404]	; (80082e8 <TIM4_IRQHandler+0x890>)
 8008152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800815e:	edc7 7a07 	vstr	s15, [r7, #28]
								  			float c2=f_read[2*i+1];
 8008162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	3301      	adds	r3, #1
 8008168:	4a5f      	ldr	r2, [pc, #380]	; (80082e8 <TIM4_IRQHandler+0x890>)
 800816a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008176:	edc7 7a06 	vstr	s15, [r7, #24]
								  			float c3;
								  			c1=(1.5-(3.3/4095)*c1)/10;
 800817a:	69f8      	ldr	r0, [r7, #28]
 800817c:	f7f8 f9ec 	bl	8000558 <__aeabi_f2d>
 8008180:	a34f      	add	r3, pc, #316	; (adr r3, 80082c0 <TIM4_IRQHandler+0x868>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 fa3f 	bl	8000608 <__aeabi_dmul>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	f04f 0000 	mov.w	r0, #0
 8008192:	4956      	ldr	r1, [pc, #344]	; (80082ec <TIM4_IRQHandler+0x894>)
 8008194:	f7f8 f880 	bl	8000298 <__aeabi_dsub>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4610      	mov	r0, r2
 800819e:	4619      	mov	r1, r3
 80081a0:	f04f 0200 	mov.w	r2, #0
 80081a4:	4b52      	ldr	r3, [pc, #328]	; (80082f0 <TIM4_IRQHandler+0x898>)
 80081a6:	f7f8 fb59 	bl	800085c <__aeabi_ddiv>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4610      	mov	r0, r2
 80081b0:	4619      	mov	r1, r3
 80081b2:	f7f8 fd21 	bl	8000bf8 <__aeabi_d2f>
 80081b6:	4603      	mov	r3, r0
 80081b8:	61fb      	str	r3, [r7, #28]
								  			c2=(1.5-(3.3/4095)*c2)/10;
 80081ba:	69b8      	ldr	r0, [r7, #24]
 80081bc:	f7f8 f9cc 	bl	8000558 <__aeabi_f2d>
 80081c0:	a33f      	add	r3, pc, #252	; (adr r3, 80082c0 <TIM4_IRQHandler+0x868>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f8 fa1f 	bl	8000608 <__aeabi_dmul>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	f04f 0000 	mov.w	r0, #0
 80081d2:	4946      	ldr	r1, [pc, #280]	; (80082ec <TIM4_IRQHandler+0x894>)
 80081d4:	f7f8 f860 	bl	8000298 <__aeabi_dsub>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4610      	mov	r0, r2
 80081de:	4619      	mov	r1, r3
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	4b42      	ldr	r3, [pc, #264]	; (80082f0 <TIM4_IRQHandler+0x898>)
 80081e6:	f7f8 fb39 	bl	800085c <__aeabi_ddiv>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4610      	mov	r0, r2
 80081f0:	4619      	mov	r1, r3
 80081f2:	f7f8 fd01 	bl	8000bf8 <__aeabi_d2f>
 80081f6:	4603      	mov	r3, r0
 80081f8:	61bb      	str	r3, [r7, #24]
								  			if(c1>c2)
 80081fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80081fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8008202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820a:	dd08      	ble.n	800821e <TIM4_IRQHandler+0x7c6>
								  			{
								  				 c3=c1-c2;
 800820c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008210:	edd7 7a06 	vldr	s15, [r7, #24]
 8008214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008218:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800821c:	e007      	b.n	800822e <TIM4_IRQHandler+0x7d6>
								  			}
								  			else
								  			{
								  				 c3=c2-c1;
 800821e:	ed97 7a06 	vldr	s14, [r7, #24]
 8008222:	edd7 7a07 	vldr	s15, [r7, #28]
 8008226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800822a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
								  			}

								  			SWV_Currentval[i]=c3;
 800822e:	4a31      	ldr	r2, [pc, #196]	; (80082f4 <TIM4_IRQHandler+0x89c>)
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008238:	601a      	str	r2, [r3, #0]
								  	for(int i=0;i<length_DPV;i=i+1)
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	3301      	adds	r3, #1
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
 8008240:	4b28      	ldr	r3, [pc, #160]	; (80082e4 <TIM4_IRQHandler+0x88c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008246:	429a      	cmp	r2, r3
 8008248:	db80      	blt.n	800814c <TIM4_IRQHandler+0x6f4>
								  			 }
								  	voltammetry_FIR_filter(SWV_Currentval,length_DPV);
 800824a:	4b26      	ldr	r3, [pc, #152]	; (80082e4 <TIM4_IRQHandler+0x88c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4619      	mov	r1, r3
 8008250:	4828      	ldr	r0, [pc, #160]	; (80082f4 <TIM4_IRQHandler+0x89c>)
 8008252:	f7ff fa6f 	bl	8007734 <voltammetry_FIR_filter>
								  	float volt_DPV=CVT.estart;
 8008256:	4b22      	ldr	r3, [pc, #136]	; (80082e0 <TIM4_IRQHandler+0x888>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	62fb      	str	r3, [r7, #44]	; 0x2c
								  	for(int i=0;i<length_DPV;i=i+1)
 800825c:	2300      	movs	r3, #0
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008260:	e05c      	b.n	800831c <TIM4_IRQHandler+0x8c4>
								  		{
							  			 sprintf((char*)sendingData,"%f %f\n",volt_DPV,volta_reverse_filtered_data[i]);
 8008262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008264:	f7f8 f978 	bl	8000558 <__aeabi_f2d>
 8008268:	4604      	mov	r4, r0
 800826a:	460d      	mov	r5, r1
 800826c:	4a22      	ldr	r2, [pc, #136]	; (80082f8 <TIM4_IRQHandler+0x8a0>)
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f7f8 f96e 	bl	8000558 <__aeabi_f2d>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	e9cd 2300 	strd	r2, r3, [sp]
 8008284:	4622      	mov	r2, r4
 8008286:	462b      	mov	r3, r5
 8008288:	491c      	ldr	r1, [pc, #112]	; (80082fc <TIM4_IRQHandler+0x8a4>)
 800828a:	481d      	ldr	r0, [pc, #116]	; (8008300 <TIM4_IRQHandler+0x8a8>)
 800828c:	f001 f9ae 	bl	80095ec <siprintf>
							  			 HAL_UART_Transmit(&huart5, sendingData, strlen((char*)sendingData),100);
 8008290:	481b      	ldr	r0, [pc, #108]	; (8008300 <TIM4_IRQHandler+0x8a8>)
 8008292:	f7f7 ffa5 	bl	80001e0 <strlen>
 8008296:	4603      	mov	r3, r0
 8008298:	b29a      	uxth	r2, r3
 800829a:	2364      	movs	r3, #100	; 0x64
 800829c:	4918      	ldr	r1, [pc, #96]	; (8008300 <TIM4_IRQHandler+0x8a8>)
 800829e:	4819      	ldr	r0, [pc, #100]	; (8008304 <TIM4_IRQHandler+0x8ac>)
 80082a0:	f7fd fc1a 	bl	8005ad8 <HAL_UART_Transmit>
							  			volt_DPV= volt_DPV+ CVT.estep;
 80082a4:	4b0e      	ldr	r3, [pc, #56]	; (80082e0 <TIM4_IRQHandler+0x888>)
 80082a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80082aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80082ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082b2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
							  			 for(int j=0;j<500000;j++)
 80082b6:	2300      	movs	r3, #0
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
 80082ba:	e028      	b.n	800830e <TIM4_IRQHandler+0x8b6>
 80082bc:	f3af 8000 	nop.w
 80082c0:	e734d9b4 	.word	0xe734d9b4
 80082c4:	3f4a680c 	.word	0x3f4a680c
 80082c8:	20003928 	.word	0x20003928
 80082cc:	40007400 	.word	0x40007400
 80082d0:	20004214 	.word	0x20004214
 80082d4:	2000023c 	.word	0x2000023c
 80082d8:	40000800 	.word	0x40000800
 80082dc:	2000023a 	.word	0x2000023a
 80082e0:	20003140 	.word	0x20003140
 80082e4:	2000c9e0 	.word	0x2000c9e0
 80082e8:	200073e8 	.word	0x200073e8
 80082ec:	3ff80000 	.word	0x3ff80000
 80082f0:	40240000 	.word	0x40240000
 80082f4:	20005df4 	.word	0x20005df4
 80082f8:	20006c18 	.word	0x20006c18
 80082fc:	0800c984 	.word	0x0800c984
 8008300:	20003938 	.word	0x20003938
 8008304:	20005488 	.word	0x20005488
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	3301      	adds	r3, #1
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	4a15      	ldr	r2, [pc, #84]	; (8008368 <TIM4_IRQHandler+0x910>)
 8008312:	4293      	cmp	r3, r2
 8008314:	ddf8      	ble.n	8008308 <TIM4_IRQHandler+0x8b0>
								  	for(int i=0;i<length_DPV;i=i+1)
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	3301      	adds	r3, #1
 800831a:	62bb      	str	r3, [r7, #40]	; 0x28
 800831c:	4b13      	ldr	r3, [pc, #76]	; (800836c <TIM4_IRQHandler+0x914>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008322:	429a      	cmp	r2, r3
 8008324:	db9d      	blt.n	8008262 <TIM4_IRQHandler+0x80a>
							  			 {}
								  		}

					  DPVFlag.Increment = 0;
 8008326:	4b12      	ldr	r3, [pc, #72]	; (8008370 <TIM4_IRQHandler+0x918>)
 8008328:	2200      	movs	r2, #0
 800832a:	711a      	strb	r2, [r3, #4]
				 	  TIM4->CR1 &= ~0x01;				// Disable TIM4
 800832c:	4b11      	ldr	r3, [pc, #68]	; (8008374 <TIM4_IRQHandler+0x91c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a10      	ldr	r2, [pc, #64]	; (8008374 <TIM4_IRQHandler+0x91c>)
 8008332:	f023 0301 	bic.w	r3, r3, #1
 8008336:	6013      	str	r3, [r2, #0]
				 	  DPVFlag.Scan = 0;
 8008338:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <TIM4_IRQHandler+0x918>)
 800833a:	2200      	movs	r2, #0
 800833c:	70da      	strb	r2, [r3, #3]
				 	  DPVFlag.Busy = 1;
 800833e:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <TIM4_IRQHandler+0x918>)
 8008340:	2201      	movs	r2, #1
 8008342:	709a      	strb	r2, [r3, #2]
 8008344:	e005      	b.n	8008352 <TIM4_IRQHandler+0x8fa>
				// LED_GPIO_Toggle(GPIOB,GPIO_PIN_7);							// Toggle PB7
			 }

     else
	 {	// To set first DAC value and wait for 5 sec
		TIM4->CR1 &= ~0x01;								// Disable TIM4
 8008346:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <TIM4_IRQHandler+0x91c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a0a      	ldr	r2, [pc, #40]	; (8008374 <TIM4_IRQHandler+0x91c>)
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	6013      	str	r3, [r2, #0]
	 }

	 TIM4->SR &=~ 0x01;
 8008352:	4b08      	ldr	r3, [pc, #32]	; (8008374 <TIM4_IRQHandler+0x91c>)
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	4a07      	ldr	r2, [pc, #28]	; (8008374 <TIM4_IRQHandler+0x91c>)
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	6113      	str	r3, [r2, #16]
	}

}
 800835e:	bf00      	nop
 8008360:	3758      	adds	r7, #88	; 0x58
 8008362:	46bd      	mov	sp, r7
 8008364:	bdb0      	pop	{r4, r5, r7, pc}
 8008366:	bf00      	nop
 8008368:	0007a11f 	.word	0x0007a11f
 800836c:	2000c9e0 	.word	0x2000c9e0
 8008370:	20003928 	.word	0x20003928
 8008374:	40000800 	.word	0x40000800

08008378 <TIM3_IRQHandler>:
uint8_t DPVCount=0;
void TIM3_IRQHandler(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
 //if(DPVCount>5)
 //{
	if(DAC1->DHR12R2 < CVVar.DigitalEstop)
 800837c:	4b19      	ldr	r3, [pc, #100]	; (80083e4 <TIM3_IRQHandler+0x6c>)
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	4a19      	ldr	r2, [pc, #100]	; (80083e8 <TIM3_IRQHandler+0x70>)
 8008382:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 8008386:	4293      	cmp	r3, r2
 8008388:	d21c      	bcs.n	80083c4 <TIM3_IRQHandler+0x4c>
	{
	 TIM4->CR1 &= ~0x01;
 800838a:	4b18      	ldr	r3, [pc, #96]	; (80083ec <TIM3_IRQHandler+0x74>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a17      	ldr	r2, [pc, #92]	; (80083ec <TIM3_IRQHandler+0x74>)
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	6013      	str	r3, [r2, #0]
	 DAC1->DHR12R2 = DAC1->DHR12R2 + CVVar.DigitalEstep;
 8008396:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <TIM3_IRQHandler+0x6c>)
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	4a13      	ldr	r2, [pc, #76]	; (80083e8 <TIM3_IRQHandler+0x70>)
 800839c:	8992      	ldrh	r2, [r2, #12]
 800839e:	4611      	mov	r1, r2
 80083a0:	4a10      	ldr	r2, [pc, #64]	; (80083e4 <TIM3_IRQHandler+0x6c>)
 80083a2:	440b      	add	r3, r1
 80083a4:	6153      	str	r3, [r2, #20]
	 TIM4->CR1 |=0x01;
 80083a6:	4b11      	ldr	r3, [pc, #68]	; (80083ec <TIM3_IRQHandler+0x74>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a10      	ldr	r2, [pc, #64]	; (80083ec <TIM3_IRQHandler+0x74>)
 80083ac:	f043 0301 	orr.w	r3, r3, #1
 80083b0:	6013      	str	r3, [r2, #0]
	 //DPVFlag.Increment = 1;
	 TIM2->CR1 |= 0x01;
 80083b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80083bc:	f043 0301 	orr.w	r3, r3, #1
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	e004      	b.n	80083ce <TIM3_IRQHandler+0x56>
	}
	else
	{
	 //DPVCount=0;
	  DAC1->DHR12R2=CVVar.DigitalEstart;
 80083c4:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <TIM3_IRQHandler+0x70>)
 80083c6:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <TIM3_IRQHandler+0x6c>)
 80083cc:	615a      	str	r2, [r3, #20]
 //}
 //LED_GPIO_Toggle(GPIOB,GPIO_PIN_7);
 //DPVCount++;

 //DPVFlag.Decrement = 1;
 TIM3->SR &=~ 0x04;
 80083ce:	4b08      	ldr	r3, [pc, #32]	; (80083f0 <TIM3_IRQHandler+0x78>)
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	4a07      	ldr	r2, [pc, #28]	; (80083f0 <TIM3_IRQHandler+0x78>)
 80083d4:	f023 0304 	bic.w	r3, r3, #4
 80083d8:	6113      	str	r3, [r2, #16]
}
 80083da:	bf00      	nop
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	40007400 	.word	0x40007400
 80083e8:	20004214 	.word	0x20004214
 80083ec:	40000800 	.word	0x40000800
 80083f0:	40000400 	.word	0x40000400

080083f4 <ADC1_2_IRQHandler>:
void ADC1_IRQHandler(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
	if(ADC1->ISR & 0x04)
 80083fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 81bb 	beq.w	8008780 <ADC1_2_IRQHandler+0x38c>
	{
	  if(CVFlag.Scan)
 800840a:	4b94      	ldr	r3, [pc, #592]	; (800865c <ADC1_2_IRQHandler+0x268>)
 800840c:	78db      	ldrb	r3, [r3, #3]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04d      	beq.n	80084ae <ADC1_2_IRQHandler+0xba>
	  {
		  if(CV_ADC_Index >= CV_ADC_Avg_Sample)
 8008412:	4b93      	ldr	r3, [pc, #588]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 8008414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008418:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800841c:	dd38      	ble.n	8008490 <ADC1_2_IRQHandler+0x9c>
		  {
			TIM2->CR1 &= ~0x01;							// Disable TIM2
 800841e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008428:	f023 0301 	bic.w	r3, r3, #1
 800842c:	6013      	str	r3, [r2, #0]
			CV_ADC_Index = 0;
 800842e:	4b8c      	ldr	r3, [pc, #560]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 8008430:	2200      	movs	r2, #0
 8008432:	801a      	strh	r2, [r3, #0]
			average = 0;
 8008434:	4b8b      	ldr	r3, [pc, #556]	; (8008664 <ADC1_2_IRQHandler+0x270>)
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
			for(int i=5;i<CV_ADC_Avg_Sample;i++) average += adc_read[i];
 800843a:	2305      	movs	r3, #5
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	e00b      	b.n	8008458 <ADC1_2_IRQHandler+0x64>
 8008440:	4a89      	ldr	r2, [pc, #548]	; (8008668 <ADC1_2_IRQHandler+0x274>)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008448:	4b86      	ldr	r3, [pc, #536]	; (8008664 <ADC1_2_IRQHandler+0x270>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4413      	add	r3, r2
 800844e:	4a85      	ldr	r2, [pc, #532]	; (8008664 <ADC1_2_IRQHandler+0x270>)
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3301      	adds	r3, #1
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800845e:	ddef      	ble.n	8008440 <ADC1_2_IRQHandler+0x4c>
			*f_read_ptr = average/(CV_ADC_Avg_Sample-5);
 8008460:	4b80      	ldr	r3, [pc, #512]	; (8008664 <ADC1_2_IRQHandler+0x270>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a81      	ldr	r2, [pc, #516]	; (800866c <ADC1_2_IRQHandler+0x278>)
 8008466:	6812      	ldr	r2, [r2, #0]
 8008468:	4981      	ldr	r1, [pc, #516]	; (8008670 <ADC1_2_IRQHandler+0x27c>)
 800846a:	fb81 0103 	smull	r0, r1, r1, r3
 800846e:	11c9      	asrs	r1, r1, #7
 8008470:	17db      	asrs	r3, r3, #31
 8008472:	1acb      	subs	r3, r1, r3
 8008474:	6013      	str	r3, [r2, #0]
			f_read_ptr++;
 8008476:	4b7d      	ldr	r3, [pc, #500]	; (800866c <ADC1_2_IRQHandler+0x278>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3304      	adds	r3, #4
 800847c:	4a7b      	ldr	r2, [pc, #492]	; (800866c <ADC1_2_IRQHandler+0x278>)
 800847e:	6013      	str	r3, [r2, #0]
			CVVar.CV_SWV_Len++;
 8008480:	4b7c      	ldr	r3, [pc, #496]	; (8008674 <ADC1_2_IRQHandler+0x280>)
 8008482:	f8b3 368a 	ldrh.w	r3, [r3, #1674]	; 0x68a
 8008486:	3301      	adds	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	4b7a      	ldr	r3, [pc, #488]	; (8008674 <ADC1_2_IRQHandler+0x280>)
 800848c:	f8a3 268a 	strh.w	r2, [r3, #1674]	; 0x68a
		  }
		  adc_read[CV_ADC_Index++] = ADC1->DR;
 8008490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008494:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008496:	4b72      	ldr	r3, [pc, #456]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 8008498:	f9b3 2000 	ldrsh.w	r2, [r3]
 800849c:	b293      	uxth	r3, r2
 800849e:	3301      	adds	r3, #1
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	b218      	sxth	r0, r3
 80084a4:	4b6e      	ldr	r3, [pc, #440]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 80084a6:	8018      	strh	r0, [r3, #0]
 80084a8:	4b6f      	ldr	r3, [pc, #444]	; (8008668 <ADC1_2_IRQHandler+0x274>)
 80084aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  }

	 if(SWVFlag.Decrement)
 80084ae:	4b72      	ldr	r3, [pc, #456]	; (8008678 <ADC1_2_IRQHandler+0x284>)
 80084b0:	795b      	ldrb	r3, [r3, #5]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 8083 	beq.w	80085be <ADC1_2_IRQHandler+0x1ca>
	  {
	  		if(CV_ADC_Index >= CVVar.SWV_ADCSamples)
 80084b8:	4b69      	ldr	r3, [pc, #420]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 80084ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084be:	461a      	mov	r2, r3
 80084c0:	4b6c      	ldr	r3, [pc, #432]	; (8008674 <ADC1_2_IRQHandler+0x280>)
 80084c2:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 80084c6:	429a      	cmp	r2, r3
 80084c8:	db3d      	blt.n	8008546 <ADC1_2_IRQHandler+0x152>
	  		{
	  			SWVFlag.Decrement = 0;
 80084ca:	4b6b      	ldr	r3, [pc, #428]	; (8008678 <ADC1_2_IRQHandler+0x284>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	715a      	strb	r2, [r3, #5]
	  			CV_ADC_Index = 0;
 80084d0:	4b63      	ldr	r3, [pc, #396]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	801a      	strh	r2, [r3, #0]
	  			average = 0;
 80084d6:	4b63      	ldr	r3, [pc, #396]	; (8008664 <ADC1_2_IRQHandler+0x270>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
	  			for(int i=0; i<CV_ADC_Avg_Sample-5; i++)
 80084dc:	2300      	movs	r3, #0
 80084de:	60bb      	str	r3, [r7, #8]
 80084e0:	e00b      	b.n	80084fa <ADC1_2_IRQHandler+0x106>
	  			{
	  				average += adc_read[i];
 80084e2:	4a61      	ldr	r2, [pc, #388]	; (8008668 <ADC1_2_IRQHandler+0x274>)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80084ea:	4b5e      	ldr	r3, [pc, #376]	; (8008664 <ADC1_2_IRQHandler+0x270>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4413      	add	r3, r2
 80084f0:	4a5c      	ldr	r2, [pc, #368]	; (8008664 <ADC1_2_IRQHandler+0x270>)
 80084f2:	6013      	str	r3, [r2, #0]
	  			for(int i=0; i<CV_ADC_Avg_Sample-5; i++)
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	3301      	adds	r3, #1
 80084f8:	60bb      	str	r3, [r7, #8]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008500:	dbef      	blt.n	80084e2 <ADC1_2_IRQHandler+0xee>
	  			}
	  			*f_read_ptr = average/(CV_ADC_Avg_Sample-5);
 8008502:	4b58      	ldr	r3, [pc, #352]	; (8008664 <ADC1_2_IRQHandler+0x270>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a59      	ldr	r2, [pc, #356]	; (800866c <ADC1_2_IRQHandler+0x278>)
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	4959      	ldr	r1, [pc, #356]	; (8008670 <ADC1_2_IRQHandler+0x27c>)
 800850c:	fb81 0103 	smull	r0, r1, r1, r3
 8008510:	11c9      	asrs	r1, r1, #7
 8008512:	17db      	asrs	r3, r3, #31
 8008514:	1acb      	subs	r3, r1, r3
 8008516:	6013      	str	r3, [r2, #0]
	  			if(f_read_ptr < &f_read[4999])
 8008518:	4b54      	ldr	r3, [pc, #336]	; (800866c <ADC1_2_IRQHandler+0x278>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a57      	ldr	r2, [pc, #348]	; (800867c <ADC1_2_IRQHandler+0x288>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d20d      	bcs.n	800853e <ADC1_2_IRQHandler+0x14a>
	  			{
	  				f_read_ptr++;
 8008522:	4b52      	ldr	r3, [pc, #328]	; (800866c <ADC1_2_IRQHandler+0x278>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3304      	adds	r3, #4
 8008528:	4a50      	ldr	r2, [pc, #320]	; (800866c <ADC1_2_IRQHandler+0x278>)
 800852a:	6013      	str	r3, [r2, #0]
	  				CVVar.CV_SWV_Len++;
 800852c:	4b51      	ldr	r3, [pc, #324]	; (8008674 <ADC1_2_IRQHandler+0x280>)
 800852e:	f8b3 368a 	ldrh.w	r3, [r3, #1674]	; 0x68a
 8008532:	3301      	adds	r3, #1
 8008534:	b29a      	uxth	r2, r3
 8008536:	4b4f      	ldr	r3, [pc, #316]	; (8008674 <ADC1_2_IRQHandler+0x280>)
 8008538:	f8a3 268a 	strh.w	r2, [r3, #1674]	; 0x68a
 800853c:	e003      	b.n	8008546 <ADC1_2_IRQHandler+0x152>
	  			}
	  			else
	  			{
	  				*f_read_ptr = f_read;
 800853e:	4b4b      	ldr	r3, [pc, #300]	; (800866c <ADC1_2_IRQHandler+0x278>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a4f      	ldr	r2, [pc, #316]	; (8008680 <ADC1_2_IRQHandler+0x28c>)
 8008544:	601a      	str	r2, [r3, #0]
	  			}
	  		}
	  		if(CV_ADC_Index >= (CVVar.SWV_ADCSamples-CV_ADC_Avg_Sample+5) && CV_ADC_Index < CVVar.SWV_ADCSamples)
 8008546:	4b46      	ldr	r3, [pc, #280]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 8008548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800854c:	461a      	mov	r2, r3
 800854e:	4b49      	ldr	r3, [pc, #292]	; (8008674 <ADC1_2_IRQHandler+0x280>)
 8008550:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 8008554:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008558:	429a      	cmp	r2, r3
 800855a:	db27      	blt.n	80085ac <ADC1_2_IRQHandler+0x1b8>
 800855c:	4b40      	ldr	r3, [pc, #256]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 800855e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008562:	461a      	mov	r2, r3
 8008564:	4b43      	ldr	r3, [pc, #268]	; (8008674 <ADC1_2_IRQHandler+0x280>)
 8008566:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 800856a:	429a      	cmp	r2, r3
 800856c:	da1e      	bge.n	80085ac <ADC1_2_IRQHandler+0x1b8>
	  		{
	  			LED_GPIO_Toggle(GPIOB,GPIO_PIN_7);
 800856e:	2180      	movs	r1, #128	; 0x80
 8008570:	4844      	ldr	r0, [pc, #272]	; (8008684 <ADC1_2_IRQHandler+0x290>)
 8008572:	f7f8 ff7e 	bl	8001472 <LED_GPIO_Toggle>
	  			adc_read[CV_ADC_Index-(CVVar.SWV_ADCSamples-CV_ADC_Avg_Sample+5)] = ADC1->DR;
 8008576:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800857a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800857c:	4b38      	ldr	r3, [pc, #224]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 800857e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008582:	4619      	mov	r1, r3
 8008584:	4b3b      	ldr	r3, [pc, #236]	; (8008674 <ADC1_2_IRQHandler+0x280>)
 8008586:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 800858a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800858e:	1acb      	subs	r3, r1, r3
 8008590:	4611      	mov	r1, r2
 8008592:	4a35      	ldr	r2, [pc, #212]	; (8008668 <ADC1_2_IRQHandler+0x274>)
 8008594:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			CV_ADC_Index++;
 8008598:	4b31      	ldr	r3, [pc, #196]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 800859a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	3301      	adds	r3, #1
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	b21a      	sxth	r2, r3
 80085a6:	4b2e      	ldr	r3, [pc, #184]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e008      	b.n	80085be <ADC1_2_IRQHandler+0x1ca>
	  		}
	  		else CV_ADC_Index++;
 80085ac:	4b2c      	ldr	r3, [pc, #176]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 80085ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	3301      	adds	r3, #1
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	b21a      	sxth	r2, r3
 80085ba:	4b29      	ldr	r3, [pc, #164]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 80085bc:	801a      	strh	r2, [r3, #0]
	  }

	  if(ISFlag.Scan)
 80085be:	4b32      	ldr	r3, [pc, #200]	; (8008688 <ADC1_2_IRQHandler+0x294>)
 80085c0:	78db      	ldrb	r3, [r3, #3]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d02b      	beq.n	800861e <ADC1_2_IRQHandler+0x22a>
	  {
		  if(IS_ADC_Count >= IS_NoOfSamples)
 80085c6:	4b31      	ldr	r3, [pc, #196]	; (800868c <ADC1_2_IRQHandler+0x298>)
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085ce:	d314      	bcc.n	80085fa <ADC1_2_IRQHandler+0x206>
		  {
			  IS_ADC_Count = 0;
 80085d0:	4b2e      	ldr	r3, [pc, #184]	; (800868c <ADC1_2_IRQHandler+0x298>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	801a      	strh	r2, [r3, #0]
			  TIM4->CR1 &= ~0x01;
 80085d6:	4b2e      	ldr	r3, [pc, #184]	; (8008690 <ADC1_2_IRQHandler+0x29c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2d      	ldr	r2, [pc, #180]	; (8008690 <ADC1_2_IRQHandler+0x29c>)
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	6013      	str	r3, [r2, #0]
			  ISFlag.RestTime = 1;
 80085e2:	4b29      	ldr	r3, [pc, #164]	; (8008688 <ADC1_2_IRQHandler+0x294>)
 80085e4:	2201      	movs	r2, #1
 80085e6:	701a      	strb	r2, [r3, #0]
			TIM2->CR1 &= ~0x01;							// Disable TIM2
 80085e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80085f2:	f023 0301 	bic.w	r3, r3, #1
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	e00b      	b.n	8008612 <ADC1_2_IRQHandler+0x21e>
			//NVIC_DisableIRQ(ADC1_IRQn);
		  }
		  else	IS_ADC_Read[IS_ADC_Count++] = ADC12_COMMON->CDR;
 80085fa:	4a26      	ldr	r2, [pc, #152]	; (8008694 <ADC1_2_IRQHandler+0x2a0>)
 80085fc:	4b23      	ldr	r3, [pc, #140]	; (800868c <ADC1_2_IRQHandler+0x298>)
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	1c59      	adds	r1, r3, #1
 8008602:	b288      	uxth	r0, r1
 8008604:	4921      	ldr	r1, [pc, #132]	; (800868c <ADC1_2_IRQHandler+0x298>)
 8008606:	8008      	strh	r0, [r1, #0]
 8008608:	4619      	mov	r1, r3
 800860a:	68d3      	ldr	r3, [r2, #12]
 800860c:	4a22      	ldr	r2, [pc, #136]	; (8008698 <ADC1_2_IRQHandler+0x2a4>)
 800860e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		  //ADC12_COMMON->CCR |=0x04;
		  ADC2->ISR |= 0x04;
 8008612:	4b22      	ldr	r3, [pc, #136]	; (800869c <ADC1_2_IRQHandler+0x2a8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a21      	ldr	r2, [pc, #132]	; (800869c <ADC1_2_IRQHandler+0x2a8>)
 8008618:	f043 0304 	orr.w	r3, r3, #4
 800861c:	6013      	str	r3, [r2, #0]
	  }

	  if(DPVFlag.Decrement)
 800861e:	4b20      	ldr	r3, [pc, #128]	; (80086a0 <ADC1_2_IRQHandler+0x2ac>)
 8008620:	795b      	ldrb	r3, [r3, #5]
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80a4 	beq.w	8008770 <ADC1_2_IRQHandler+0x37c>
	  	  {
	  		if((CV_ADC_Index >= CVVar.SWV_ADCSamples))
 8008628:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 800862a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800862e:	461a      	mov	r2, r3
 8008630:	4b10      	ldr	r3, [pc, #64]	; (8008674 <ADC1_2_IRQHandler+0x280>)
 8008632:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 8008636:	429a      	cmp	r2, r3
 8008638:	db5e      	blt.n	80086f8 <ADC1_2_IRQHandler+0x304>
	  		{
	  			 TIM2->CR1 &=~0x01;
 800863a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	6013      	str	r3, [r2, #0]
	  			 CV_ADC_Index = 0;
 800864a:	4b05      	ldr	r3, [pc, #20]	; (8008660 <ADC1_2_IRQHandler+0x26c>)
 800864c:	2200      	movs	r2, #0
 800864e:	801a      	strh	r2, [r3, #0]
	  			average = 0;
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <ADC1_2_IRQHandler+0x270>)
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
	  			for(int i=0; i<CV_ADC_Avg_Sample-5; i++)
 8008656:	2300      	movs	r3, #0
 8008658:	607b      	str	r3, [r7, #4]
 800865a:	e02f      	b.n	80086bc <ADC1_2_IRQHandler+0x2c8>
 800865c:	20002ae4 	.word	0x20002ae4
 8008660:	20000220 	.word	0x20000220
 8008664:	20000224 	.word	0x20000224
 8008668:	200065c4 	.word	0x200065c4
 800866c:	20000014 	.word	0x20000014
 8008670:	51eb851f 	.word	0x51eb851f
 8008674:	20004214 	.word	0x20004214
 8008678:	20000b5c 	.word	0x20000b5c
 800867c:	2000c204 	.word	0x2000c204
 8008680:	200073e8 	.word	0x200073e8
 8008684:	48000400 	.word	0x48000400
 8008688:	20003930 	.word	0x20003930
 800868c:	2000022a 	.word	0x2000022a
 8008690:	40000800 	.word	0x40000800
 8008694:	50000300 	.word	0x50000300
 8008698:	20001b44 	.word	0x20001b44
 800869c:	50000100 	.word	0x50000100
 80086a0:	20003928 	.word	0x20003928
	  			{
	  				average += adc_read[i];
 80086a4:	4a38      	ldr	r2, [pc, #224]	; (8008788 <ADC1_2_IRQHandler+0x394>)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086ac:	4b37      	ldr	r3, [pc, #220]	; (800878c <ADC1_2_IRQHandler+0x398>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4413      	add	r3, r2
 80086b2:	4a36      	ldr	r2, [pc, #216]	; (800878c <ADC1_2_IRQHandler+0x398>)
 80086b4:	6013      	str	r3, [r2, #0]
	  			for(int i=0; i<CV_ADC_Avg_Sample-5; i++)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3301      	adds	r3, #1
 80086ba:	607b      	str	r3, [r7, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80086c2:	dbef      	blt.n	80086a4 <ADC1_2_IRQHandler+0x2b0>
	  			}
	  			*f_read_ptr = average/(CV_ADC_Avg_Sample-5);
 80086c4:	4b31      	ldr	r3, [pc, #196]	; (800878c <ADC1_2_IRQHandler+0x398>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a31      	ldr	r2, [pc, #196]	; (8008790 <ADC1_2_IRQHandler+0x39c>)
 80086ca:	6812      	ldr	r2, [r2, #0]
 80086cc:	4931      	ldr	r1, [pc, #196]	; (8008794 <ADC1_2_IRQHandler+0x3a0>)
 80086ce:	fb81 0103 	smull	r0, r1, r1, r3
 80086d2:	11c9      	asrs	r1, r1, #7
 80086d4:	17db      	asrs	r3, r3, #31
 80086d6:	1acb      	subs	r3, r1, r3
 80086d8:	6013      	str	r3, [r2, #0]
	  			if(f_read_ptr < &f_read[4999])
 80086da:	4b2d      	ldr	r3, [pc, #180]	; (8008790 <ADC1_2_IRQHandler+0x39c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a2e      	ldr	r2, [pc, #184]	; (8008798 <ADC1_2_IRQHandler+0x3a4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d205      	bcs.n	80086f0 <ADC1_2_IRQHandler+0x2fc>
	  			{
	  				f_read_ptr++;
 80086e4:	4b2a      	ldr	r3, [pc, #168]	; (8008790 <ADC1_2_IRQHandler+0x39c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3304      	adds	r3, #4
 80086ea:	4a29      	ldr	r2, [pc, #164]	; (8008790 <ADC1_2_IRQHandler+0x39c>)
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	e003      	b.n	80086f8 <ADC1_2_IRQHandler+0x304>
	  			}
	  			else
	  			{
	  				*f_read_ptr = f_read;
 80086f0:	4b27      	ldr	r3, [pc, #156]	; (8008790 <ADC1_2_IRQHandler+0x39c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a29      	ldr	r2, [pc, #164]	; (800879c <ADC1_2_IRQHandler+0x3a8>)
 80086f6:	601a      	str	r2, [r3, #0]
	  			}


	  		 }

	  		     if(CV_ADC_Index >= (CVVar.SWV_ADCSamples-CV_ADC_Avg_Sample+5) && CV_ADC_Index < CVVar.SWV_ADCSamples)
 80086f8:	4b29      	ldr	r3, [pc, #164]	; (80087a0 <ADC1_2_IRQHandler+0x3ac>)
 80086fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086fe:	461a      	mov	r2, r3
 8008700:	4b28      	ldr	r3, [pc, #160]	; (80087a4 <ADC1_2_IRQHandler+0x3b0>)
 8008702:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 8008706:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800870a:	429a      	cmp	r2, r3
 800870c:	db27      	blt.n	800875e <ADC1_2_IRQHandler+0x36a>
 800870e:	4b24      	ldr	r3, [pc, #144]	; (80087a0 <ADC1_2_IRQHandler+0x3ac>)
 8008710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008714:	461a      	mov	r2, r3
 8008716:	4b23      	ldr	r3, [pc, #140]	; (80087a4 <ADC1_2_IRQHandler+0x3b0>)
 8008718:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 800871c:	429a      	cmp	r2, r3
 800871e:	da1e      	bge.n	800875e <ADC1_2_IRQHandler+0x36a>
	  			 {

	  				LED_GPIO_Toggle(GPIOB,GPIO_PIN_7);
 8008720:	2180      	movs	r1, #128	; 0x80
 8008722:	4821      	ldr	r0, [pc, #132]	; (80087a8 <ADC1_2_IRQHandler+0x3b4>)
 8008724:	f7f8 fea5 	bl	8001472 <LED_GPIO_Toggle>
	  				adc_read[CV_ADC_Index-(CVVar.SWV_ADCSamples-CV_ADC_Avg_Sample+5)] = ADC1->DR;
 8008728:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800872c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800872e:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <ADC1_2_IRQHandler+0x3ac>)
 8008730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008734:	4619      	mov	r1, r3
 8008736:	4b1b      	ldr	r3, [pc, #108]	; (80087a4 <ADC1_2_IRQHandler+0x3b0>)
 8008738:	f8b3 3684 	ldrh.w	r3, [r3, #1668]	; 0x684
 800873c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008740:	1acb      	subs	r3, r1, r3
 8008742:	4611      	mov	r1, r2
 8008744:	4a10      	ldr	r2, [pc, #64]	; (8008788 <ADC1_2_IRQHandler+0x394>)
 8008746:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  				CV_ADC_Index++;
 800874a:	4b15      	ldr	r3, [pc, #84]	; (80087a0 <ADC1_2_IRQHandler+0x3ac>)
 800874c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008750:	b29b      	uxth	r3, r3
 8008752:	3301      	adds	r3, #1
 8008754:	b29b      	uxth	r3, r3
 8008756:	b21a      	sxth	r2, r3
 8008758:	4b11      	ldr	r3, [pc, #68]	; (80087a0 <ADC1_2_IRQHandler+0x3ac>)
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	e008      	b.n	8008770 <ADC1_2_IRQHandler+0x37c>
	  			 }
	  		  	 else
	  			 {
	  			  CV_ADC_Index++;
 800875e:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <ADC1_2_IRQHandler+0x3ac>)
 8008760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008764:	b29b      	uxth	r3, r3
 8008766:	3301      	adds	r3, #1
 8008768:	b29b      	uxth	r3, r3
 800876a:	b21a      	sxth	r2, r3
 800876c:	4b0c      	ldr	r3, [pc, #48]	; (80087a0 <ADC1_2_IRQHandler+0x3ac>)
 800876e:	801a      	strh	r2, [r3, #0]
	  			 }
	  	   }


	  ADC1->ISR |= 0x04;								// Clear EOC flag
 8008770:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800877a:	f043 0304 	orr.w	r3, r3, #4
 800877e:	6013      	str	r3, [r2, #0]
	}
}
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	200065c4 	.word	0x200065c4
 800878c:	20000224 	.word	0x20000224
 8008790:	20000014 	.word	0x20000014
 8008794:	51eb851f 	.word	0x51eb851f
 8008798:	2000c204 	.word	0x2000c204
 800879c:	200073e8 	.word	0x200073e8
 80087a0:	20000220 	.word	0x20000220
 80087a4:	20004214 	.word	0x20004214
 80087a8:	48000400 	.word	0x48000400

080087ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80087b0:	bf00      	nop
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80087ba:	b480      	push	{r7}
 80087bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80087be:	e7fe      	b.n	80087be <HardFault_Handler+0x4>

080087c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80087c4:	e7fe      	b.n	80087c4 <MemManage_Handler+0x4>

080087c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80087c6:	b480      	push	{r7}
 80087c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80087ca:	e7fe      	b.n	80087ca <BusFault_Handler+0x4>

080087cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80087d0:	e7fe      	b.n	80087d0 <UsageFault_Handler+0x4>

080087d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80087d2:	b480      	push	{r7}
 80087d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80087d6:	bf00      	nop
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80087e4:	bf00      	nop
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80087ee:	b480      	push	{r7}
 80087f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80087f2:	bf00      	nop
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008800:	f7fa ff66 	bl	80036d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008804:	bf00      	nop
 8008806:	bd80      	pop	{r7, pc}

08008808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008808:	b480      	push	{r7}
 800880a:	af00      	add	r7, sp, #0
	return 1;
 800880c:	2301      	movs	r3, #1
}
 800880e:	4618      	mov	r0, r3
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <_kill>:

int _kill(int pid, int sig)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008822:	f000 f985 	bl	8008b30 <__errno>
 8008826:	4603      	mov	r3, r0
 8008828:	2216      	movs	r2, #22
 800882a:	601a      	str	r2, [r3, #0]
	return -1;
 800882c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <_exit>:

void _exit (int status)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008840:	f04f 31ff 	mov.w	r1, #4294967295
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff ffe7 	bl	8008818 <_kill>
	while (1) {}		/* Make sure we hang here */
 800884a:	e7fe      	b.n	800884a <_exit+0x12>

0800884c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e00a      	b.n	8008874 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800885e:	f3af 8000 	nop.w
 8008862:	4601      	mov	r1, r0
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	60ba      	str	r2, [r7, #8]
 800886a:	b2ca      	uxtb	r2, r1
 800886c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	3301      	adds	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	429a      	cmp	r2, r3
 800887a:	dbf0      	blt.n	800885e <_read+0x12>
	}

return len;
 800887c:	687b      	ldr	r3, [r7, #4]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b086      	sub	sp, #24
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	e009      	b.n	80088ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	60ba      	str	r2, [r7, #8]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	3301      	adds	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	dbf1      	blt.n	8008898 <_write+0x12>
	}
	return len;
 80088b4:	687b      	ldr	r3, [r7, #4]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <_close>:

int _close(int file)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
	return -1;
 80088c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80088e6:	605a      	str	r2, [r3, #4]
	return 0;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <_isatty>:

int _isatty(int file)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
	return 1;
 80088fe:	2301      	movs	r3, #1
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
	return 0;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
	...

08008928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008930:	4a14      	ldr	r2, [pc, #80]	; (8008984 <_sbrk+0x5c>)
 8008932:	4b15      	ldr	r3, [pc, #84]	; (8008988 <_sbrk+0x60>)
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800893c:	4b13      	ldr	r3, [pc, #76]	; (800898c <_sbrk+0x64>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008944:	4b11      	ldr	r3, [pc, #68]	; (800898c <_sbrk+0x64>)
 8008946:	4a12      	ldr	r2, [pc, #72]	; (8008990 <_sbrk+0x68>)
 8008948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800894a:	4b10      	ldr	r3, [pc, #64]	; (800898c <_sbrk+0x64>)
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	429a      	cmp	r2, r3
 8008956:	d207      	bcs.n	8008968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008958:	f000 f8ea 	bl	8008b30 <__errno>
 800895c:	4603      	mov	r3, r0
 800895e:	220c      	movs	r2, #12
 8008960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008962:	f04f 33ff 	mov.w	r3, #4294967295
 8008966:	e009      	b.n	800897c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008968:	4b08      	ldr	r3, [pc, #32]	; (800898c <_sbrk+0x64>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <_sbrk+0x64>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4413      	add	r3, r2
 8008976:	4a05      	ldr	r2, [pc, #20]	; (800898c <_sbrk+0x64>)
 8008978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800897a:	68fb      	ldr	r3, [r7, #12]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	20010000 	.word	0x20010000
 8008988:	00000400 	.word	0x00000400
 800898c:	2000022c 	.word	0x2000022c
 8008990:	2000d998 	.word	0x2000d998

08008994 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008994:	b480      	push	{r7}
 8008996:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008998:	4b08      	ldr	r3, [pc, #32]	; (80089bc <SystemInit+0x28>)
 800899a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899e:	4a07      	ldr	r2, [pc, #28]	; (80089bc <SystemInit+0x28>)
 80089a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80089a8:	4b04      	ldr	r3, [pc, #16]	; (80089bc <SystemInit+0x28>)
 80089aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089ae:	609a      	str	r2, [r3, #8]
#endif
}
 80089b0:	bf00      	nop
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	e000ed00 	.word	0xe000ed00

080089c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80089c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80089f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80089c4:	480d      	ldr	r0, [pc, #52]	; (80089fc <LoopForever+0x6>)
  ldr r1, =_edata
 80089c6:	490e      	ldr	r1, [pc, #56]	; (8008a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80089c8:	4a0e      	ldr	r2, [pc, #56]	; (8008a04 <LoopForever+0xe>)
  movs r3, #0
 80089ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80089cc:	e002      	b.n	80089d4 <LoopCopyDataInit>

080089ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80089ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80089d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80089d2:	3304      	adds	r3, #4

080089d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80089d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089d8:	d3f9      	bcc.n	80089ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80089da:	4a0b      	ldr	r2, [pc, #44]	; (8008a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80089dc:	4c0b      	ldr	r4, [pc, #44]	; (8008a0c <LoopForever+0x16>)
  movs r3, #0
 80089de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089e0:	e001      	b.n	80089e6 <LoopFillZerobss>

080089e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089e4:	3204      	adds	r2, #4

080089e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089e8:	d3fb      	bcc.n	80089e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80089ea:	f7ff ffd3 	bl	8008994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80089ee:	f000 f8a5 	bl	8008b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80089f2:	f7fd fd75 	bl	80064e0 <main>

080089f6 <LoopForever>:

LoopForever:
    b LoopForever
 80089f6:	e7fe      	b.n	80089f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80089f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80089fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a00:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8008a04:	0800d9c8 	.word	0x0800d9c8
  ldr r2, =_sbss
 8008a08:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8008a0c:	2000d994 	.word	0x2000d994

08008a10 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008a10:	e7fe      	b.n	8008a10 <ADC3_IRQHandler>
	...

08008a14 <arm_sin_f32>:
 8008a14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1c:	d42c      	bmi.n	8008a78 <arm_sin_f32+0x64>
 8008a1e:	eddf 7a20 	vldr	s15, [pc, #128]	; 8008aa0 <arm_sin_f32+0x8c>
 8008a22:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a2a:	d432      	bmi.n	8008a92 <arm_sin_f32+0x7e>
 8008a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a30:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8008aa4 <arm_sin_f32+0x90>
 8008a34:	4a1c      	ldr	r2, [pc, #112]	; (8008aa8 <arm_sin_f32+0x94>)
 8008a36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a3e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008a42:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008a46:	ee17 3a90 	vmov	r3, s15
 8008a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008a5a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008a5e:	edd1 6a01 	vldr	s13, [r1, #4]
 8008a62:	ed91 0a00 	vldr	s0, [r1]
 8008a66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008a6e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008a72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a76:	4770      	bx	lr
 8008a78:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8008aac <arm_sin_f32+0x98>
 8008a7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a84:	da0b      	bge.n	8008a9e <arm_sin_f32+0x8a>
 8008a86:	eddf 7a06 	vldr	s15, [pc, #24]	; 8008aa0 <arm_sin_f32+0x8c>
 8008a8a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a8e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a92:	ee17 3a90 	vmov	r3, s15
 8008a96:	3b01      	subs	r3, #1
 8008a98:	ee07 3a90 	vmov	s15, r3
 8008a9c:	e7c6      	b.n	8008a2c <arm_sin_f32+0x18>
 8008a9e:	4770      	bx	lr
 8008aa0:	3e22f983 	.word	0x3e22f983
 8008aa4:	44000000 	.word	0x44000000
 8008aa8:	0800c9c4 	.word	0x0800c9c4
 8008aac:	b44c02cd 	.word	0xb44c02cd

08008ab0 <arm_cos_f32>:
 8008ab0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008b24 <arm_cos_f32+0x74>
 8008ab4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008ab8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008abc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ac0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008acc:	d504      	bpl.n	8008ad8 <arm_cos_f32+0x28>
 8008ace:	ee17 3a90 	vmov	r3, s15
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	ee07 3a90 	vmov	s15, r3
 8008ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008adc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8008b28 <arm_cos_f32+0x78>
 8008ae0:	4a12      	ldr	r2, [pc, #72]	; (8008b2c <arm_cos_f32+0x7c>)
 8008ae2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aea:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008aee:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008af2:	ee17 3a90 	vmov	r3, s15
 8008af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b02:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008b06:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008b0a:	edd1 6a01 	vldr	s13, [r1, #4]
 8008b0e:	ed91 0a00 	vldr	s0, [r1]
 8008b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b1a:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008b1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b22:	4770      	bx	lr
 8008b24:	3e22f983 	.word	0x3e22f983
 8008b28:	44000000 	.word	0x44000000
 8008b2c:	0800c9c4 	.word	0x0800c9c4

08008b30 <__errno>:
 8008b30:	4b01      	ldr	r3, [pc, #4]	; (8008b38 <__errno+0x8>)
 8008b32:	6818      	ldr	r0, [r3, #0]
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	2000001c 	.word	0x2000001c

08008b3c <__libc_init_array>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	4d0d      	ldr	r5, [pc, #52]	; (8008b74 <__libc_init_array+0x38>)
 8008b40:	4c0d      	ldr	r4, [pc, #52]	; (8008b78 <__libc_init_array+0x3c>)
 8008b42:	1b64      	subs	r4, r4, r5
 8008b44:	10a4      	asrs	r4, r4, #2
 8008b46:	2600      	movs	r6, #0
 8008b48:	42a6      	cmp	r6, r4
 8008b4a:	d109      	bne.n	8008b60 <__libc_init_array+0x24>
 8008b4c:	4d0b      	ldr	r5, [pc, #44]	; (8008b7c <__libc_init_array+0x40>)
 8008b4e:	4c0c      	ldr	r4, [pc, #48]	; (8008b80 <__libc_init_array+0x44>)
 8008b50:	f003 feb4 	bl	800c8bc <_init>
 8008b54:	1b64      	subs	r4, r4, r5
 8008b56:	10a4      	asrs	r4, r4, #2
 8008b58:	2600      	movs	r6, #0
 8008b5a:	42a6      	cmp	r6, r4
 8008b5c:	d105      	bne.n	8008b6a <__libc_init_array+0x2e>
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b64:	4798      	blx	r3
 8008b66:	3601      	adds	r6, #1
 8008b68:	e7ee      	b.n	8008b48 <__libc_init_array+0xc>
 8008b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b6e:	4798      	blx	r3
 8008b70:	3601      	adds	r6, #1
 8008b72:	e7f2      	b.n	8008b5a <__libc_init_array+0x1e>
 8008b74:	0800d9c0 	.word	0x0800d9c0
 8008b78:	0800d9c0 	.word	0x0800d9c0
 8008b7c:	0800d9c0 	.word	0x0800d9c0
 8008b80:	0800d9c4 	.word	0x0800d9c4

08008b84 <malloc>:
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <malloc+0xc>)
 8008b86:	4601      	mov	r1, r0
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f000 b85b 	b.w	8008c44 <_malloc_r>
 8008b8e:	bf00      	nop
 8008b90:	2000001c 	.word	0x2000001c

08008b94 <memset>:
 8008b94:	4402      	add	r2, r0
 8008b96:	4603      	mov	r3, r0
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d100      	bne.n	8008b9e <memset+0xa>
 8008b9c:	4770      	bx	lr
 8008b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008ba2:	e7f9      	b.n	8008b98 <memset+0x4>

08008ba4 <_free_r>:
 8008ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ba6:	2900      	cmp	r1, #0
 8008ba8:	d048      	beq.n	8008c3c <_free_r+0x98>
 8008baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bae:	9001      	str	r0, [sp, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8008bb6:	bfb8      	it	lt
 8008bb8:	18e4      	addlt	r4, r4, r3
 8008bba:	f001 fbc3 	bl	800a344 <__malloc_lock>
 8008bbe:	4a20      	ldr	r2, [pc, #128]	; (8008c40 <_free_r+0x9c>)
 8008bc0:	9801      	ldr	r0, [sp, #4]
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	4615      	mov	r5, r2
 8008bc6:	b933      	cbnz	r3, 8008bd6 <_free_r+0x32>
 8008bc8:	6063      	str	r3, [r4, #4]
 8008bca:	6014      	str	r4, [r2, #0]
 8008bcc:	b003      	add	sp, #12
 8008bce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bd2:	f001 bbbd 	b.w	800a350 <__malloc_unlock>
 8008bd6:	42a3      	cmp	r3, r4
 8008bd8:	d90b      	bls.n	8008bf2 <_free_r+0x4e>
 8008bda:	6821      	ldr	r1, [r4, #0]
 8008bdc:	1862      	adds	r2, r4, r1
 8008bde:	4293      	cmp	r3, r2
 8008be0:	bf04      	itt	eq
 8008be2:	681a      	ldreq	r2, [r3, #0]
 8008be4:	685b      	ldreq	r3, [r3, #4]
 8008be6:	6063      	str	r3, [r4, #4]
 8008be8:	bf04      	itt	eq
 8008bea:	1852      	addeq	r2, r2, r1
 8008bec:	6022      	streq	r2, [r4, #0]
 8008bee:	602c      	str	r4, [r5, #0]
 8008bf0:	e7ec      	b.n	8008bcc <_free_r+0x28>
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	b10b      	cbz	r3, 8008bfc <_free_r+0x58>
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	d9fa      	bls.n	8008bf2 <_free_r+0x4e>
 8008bfc:	6811      	ldr	r1, [r2, #0]
 8008bfe:	1855      	adds	r5, r2, r1
 8008c00:	42a5      	cmp	r5, r4
 8008c02:	d10b      	bne.n	8008c1c <_free_r+0x78>
 8008c04:	6824      	ldr	r4, [r4, #0]
 8008c06:	4421      	add	r1, r4
 8008c08:	1854      	adds	r4, r2, r1
 8008c0a:	42a3      	cmp	r3, r4
 8008c0c:	6011      	str	r1, [r2, #0]
 8008c0e:	d1dd      	bne.n	8008bcc <_free_r+0x28>
 8008c10:	681c      	ldr	r4, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	6053      	str	r3, [r2, #4]
 8008c16:	4421      	add	r1, r4
 8008c18:	6011      	str	r1, [r2, #0]
 8008c1a:	e7d7      	b.n	8008bcc <_free_r+0x28>
 8008c1c:	d902      	bls.n	8008c24 <_free_r+0x80>
 8008c1e:	230c      	movs	r3, #12
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	e7d3      	b.n	8008bcc <_free_r+0x28>
 8008c24:	6825      	ldr	r5, [r4, #0]
 8008c26:	1961      	adds	r1, r4, r5
 8008c28:	428b      	cmp	r3, r1
 8008c2a:	bf04      	itt	eq
 8008c2c:	6819      	ldreq	r1, [r3, #0]
 8008c2e:	685b      	ldreq	r3, [r3, #4]
 8008c30:	6063      	str	r3, [r4, #4]
 8008c32:	bf04      	itt	eq
 8008c34:	1949      	addeq	r1, r1, r5
 8008c36:	6021      	streq	r1, [r4, #0]
 8008c38:	6054      	str	r4, [r2, #4]
 8008c3a:	e7c7      	b.n	8008bcc <_free_r+0x28>
 8008c3c:	b003      	add	sp, #12
 8008c3e:	bd30      	pop	{r4, r5, pc}
 8008c40:	20000230 	.word	0x20000230

08008c44 <_malloc_r>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	1ccd      	adds	r5, r1, #3
 8008c48:	f025 0503 	bic.w	r5, r5, #3
 8008c4c:	3508      	adds	r5, #8
 8008c4e:	2d0c      	cmp	r5, #12
 8008c50:	bf38      	it	cc
 8008c52:	250c      	movcc	r5, #12
 8008c54:	2d00      	cmp	r5, #0
 8008c56:	4606      	mov	r6, r0
 8008c58:	db01      	blt.n	8008c5e <_malloc_r+0x1a>
 8008c5a:	42a9      	cmp	r1, r5
 8008c5c:	d903      	bls.n	8008c66 <_malloc_r+0x22>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	6033      	str	r3, [r6, #0]
 8008c62:	2000      	movs	r0, #0
 8008c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c66:	f001 fb6d 	bl	800a344 <__malloc_lock>
 8008c6a:	4921      	ldr	r1, [pc, #132]	; (8008cf0 <_malloc_r+0xac>)
 8008c6c:	680a      	ldr	r2, [r1, #0]
 8008c6e:	4614      	mov	r4, r2
 8008c70:	b99c      	cbnz	r4, 8008c9a <_malloc_r+0x56>
 8008c72:	4f20      	ldr	r7, [pc, #128]	; (8008cf4 <_malloc_r+0xb0>)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	b923      	cbnz	r3, 8008c82 <_malloc_r+0x3e>
 8008c78:	4621      	mov	r1, r4
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f000 fca6 	bl	80095cc <_sbrk_r>
 8008c80:	6038      	str	r0, [r7, #0]
 8008c82:	4629      	mov	r1, r5
 8008c84:	4630      	mov	r0, r6
 8008c86:	f000 fca1 	bl	80095cc <_sbrk_r>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d123      	bne.n	8008cd6 <_malloc_r+0x92>
 8008c8e:	230c      	movs	r3, #12
 8008c90:	6033      	str	r3, [r6, #0]
 8008c92:	4630      	mov	r0, r6
 8008c94:	f001 fb5c 	bl	800a350 <__malloc_unlock>
 8008c98:	e7e3      	b.n	8008c62 <_malloc_r+0x1e>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	1b5b      	subs	r3, r3, r5
 8008c9e:	d417      	bmi.n	8008cd0 <_malloc_r+0x8c>
 8008ca0:	2b0b      	cmp	r3, #11
 8008ca2:	d903      	bls.n	8008cac <_malloc_r+0x68>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	441c      	add	r4, r3
 8008ca8:	6025      	str	r5, [r4, #0]
 8008caa:	e004      	b.n	8008cb6 <_malloc_r+0x72>
 8008cac:	6863      	ldr	r3, [r4, #4]
 8008cae:	42a2      	cmp	r2, r4
 8008cb0:	bf0c      	ite	eq
 8008cb2:	600b      	streq	r3, [r1, #0]
 8008cb4:	6053      	strne	r3, [r2, #4]
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f001 fb4a 	bl	800a350 <__malloc_unlock>
 8008cbc:	f104 000b 	add.w	r0, r4, #11
 8008cc0:	1d23      	adds	r3, r4, #4
 8008cc2:	f020 0007 	bic.w	r0, r0, #7
 8008cc6:	1ac2      	subs	r2, r0, r3
 8008cc8:	d0cc      	beq.n	8008c64 <_malloc_r+0x20>
 8008cca:	1a1b      	subs	r3, r3, r0
 8008ccc:	50a3      	str	r3, [r4, r2]
 8008cce:	e7c9      	b.n	8008c64 <_malloc_r+0x20>
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	6864      	ldr	r4, [r4, #4]
 8008cd4:	e7cc      	b.n	8008c70 <_malloc_r+0x2c>
 8008cd6:	1cc4      	adds	r4, r0, #3
 8008cd8:	f024 0403 	bic.w	r4, r4, #3
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d0e3      	beq.n	8008ca8 <_malloc_r+0x64>
 8008ce0:	1a21      	subs	r1, r4, r0
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f000 fc72 	bl	80095cc <_sbrk_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d1dd      	bne.n	8008ca8 <_malloc_r+0x64>
 8008cec:	e7cf      	b.n	8008c8e <_malloc_r+0x4a>
 8008cee:	bf00      	nop
 8008cf0:	20000230 	.word	0x20000230
 8008cf4:	20000234 	.word	0x20000234

08008cf8 <__cvt>:
 8008cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfc:	ec55 4b10 	vmov	r4, r5, d0
 8008d00:	2d00      	cmp	r5, #0
 8008d02:	460e      	mov	r6, r1
 8008d04:	4619      	mov	r1, r3
 8008d06:	462b      	mov	r3, r5
 8008d08:	bfbb      	ittet	lt
 8008d0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d0e:	461d      	movlt	r5, r3
 8008d10:	2300      	movge	r3, #0
 8008d12:	232d      	movlt	r3, #45	; 0x2d
 8008d14:	700b      	strb	r3, [r1, #0]
 8008d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d1c:	4691      	mov	r9, r2
 8008d1e:	f023 0820 	bic.w	r8, r3, #32
 8008d22:	bfbc      	itt	lt
 8008d24:	4622      	movlt	r2, r4
 8008d26:	4614      	movlt	r4, r2
 8008d28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d2c:	d005      	beq.n	8008d3a <__cvt+0x42>
 8008d2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d32:	d100      	bne.n	8008d36 <__cvt+0x3e>
 8008d34:	3601      	adds	r6, #1
 8008d36:	2102      	movs	r1, #2
 8008d38:	e000      	b.n	8008d3c <__cvt+0x44>
 8008d3a:	2103      	movs	r1, #3
 8008d3c:	ab03      	add	r3, sp, #12
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	ab02      	add	r3, sp, #8
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	ec45 4b10 	vmov	d0, r4, r5
 8008d48:	4653      	mov	r3, sl
 8008d4a:	4632      	mov	r2, r6
 8008d4c:	f000 fcfc 	bl	8009748 <_dtoa_r>
 8008d50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d54:	4607      	mov	r7, r0
 8008d56:	d102      	bne.n	8008d5e <__cvt+0x66>
 8008d58:	f019 0f01 	tst.w	r9, #1
 8008d5c:	d022      	beq.n	8008da4 <__cvt+0xac>
 8008d5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d62:	eb07 0906 	add.w	r9, r7, r6
 8008d66:	d110      	bne.n	8008d8a <__cvt+0x92>
 8008d68:	783b      	ldrb	r3, [r7, #0]
 8008d6a:	2b30      	cmp	r3, #48	; 0x30
 8008d6c:	d10a      	bne.n	8008d84 <__cvt+0x8c>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	2300      	movs	r3, #0
 8008d72:	4620      	mov	r0, r4
 8008d74:	4629      	mov	r1, r5
 8008d76:	f7f7 feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d7a:	b918      	cbnz	r0, 8008d84 <__cvt+0x8c>
 8008d7c:	f1c6 0601 	rsb	r6, r6, #1
 8008d80:	f8ca 6000 	str.w	r6, [sl]
 8008d84:	f8da 3000 	ldr.w	r3, [sl]
 8008d88:	4499      	add	r9, r3
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	f7f7 fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d96:	b108      	cbz	r0, 8008d9c <__cvt+0xa4>
 8008d98:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d9c:	2230      	movs	r2, #48	; 0x30
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	454b      	cmp	r3, r9
 8008da2:	d307      	bcc.n	8008db4 <__cvt+0xbc>
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008da8:	1bdb      	subs	r3, r3, r7
 8008daa:	4638      	mov	r0, r7
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	b004      	add	sp, #16
 8008db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db4:	1c59      	adds	r1, r3, #1
 8008db6:	9103      	str	r1, [sp, #12]
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	e7f0      	b.n	8008d9e <__cvt+0xa6>

08008dbc <__exponent>:
 8008dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	bfb8      	it	lt
 8008dc4:	4249      	neglt	r1, r1
 8008dc6:	f803 2b02 	strb.w	r2, [r3], #2
 8008dca:	bfb4      	ite	lt
 8008dcc:	222d      	movlt	r2, #45	; 0x2d
 8008dce:	222b      	movge	r2, #43	; 0x2b
 8008dd0:	2909      	cmp	r1, #9
 8008dd2:	7042      	strb	r2, [r0, #1]
 8008dd4:	dd2a      	ble.n	8008e2c <__exponent+0x70>
 8008dd6:	f10d 0407 	add.w	r4, sp, #7
 8008dda:	46a4      	mov	ip, r4
 8008ddc:	270a      	movs	r7, #10
 8008dde:	46a6      	mov	lr, r4
 8008de0:	460a      	mov	r2, r1
 8008de2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008de6:	fb07 1516 	mls	r5, r7, r6, r1
 8008dea:	3530      	adds	r5, #48	; 0x30
 8008dec:	2a63      	cmp	r2, #99	; 0x63
 8008dee:	f104 34ff 	add.w	r4, r4, #4294967295
 8008df2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008df6:	4631      	mov	r1, r6
 8008df8:	dcf1      	bgt.n	8008dde <__exponent+0x22>
 8008dfa:	3130      	adds	r1, #48	; 0x30
 8008dfc:	f1ae 0502 	sub.w	r5, lr, #2
 8008e00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e04:	1c44      	adds	r4, r0, #1
 8008e06:	4629      	mov	r1, r5
 8008e08:	4561      	cmp	r1, ip
 8008e0a:	d30a      	bcc.n	8008e22 <__exponent+0x66>
 8008e0c:	f10d 0209 	add.w	r2, sp, #9
 8008e10:	eba2 020e 	sub.w	r2, r2, lr
 8008e14:	4565      	cmp	r5, ip
 8008e16:	bf88      	it	hi
 8008e18:	2200      	movhi	r2, #0
 8008e1a:	4413      	add	r3, r2
 8008e1c:	1a18      	subs	r0, r3, r0
 8008e1e:	b003      	add	sp, #12
 8008e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e2a:	e7ed      	b.n	8008e08 <__exponent+0x4c>
 8008e2c:	2330      	movs	r3, #48	; 0x30
 8008e2e:	3130      	adds	r1, #48	; 0x30
 8008e30:	7083      	strb	r3, [r0, #2]
 8008e32:	70c1      	strb	r1, [r0, #3]
 8008e34:	1d03      	adds	r3, r0, #4
 8008e36:	e7f1      	b.n	8008e1c <__exponent+0x60>

08008e38 <_printf_float>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	ed2d 8b02 	vpush	{d8}
 8008e40:	b08d      	sub	sp, #52	; 0x34
 8008e42:	460c      	mov	r4, r1
 8008e44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e48:	4616      	mov	r6, r2
 8008e4a:	461f      	mov	r7, r3
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	f001 fa67 	bl	800a320 <_localeconv_r>
 8008e52:	f8d0 a000 	ldr.w	sl, [r0]
 8008e56:	4650      	mov	r0, sl
 8008e58:	f7f7 f9c2 	bl	80001e0 <strlen>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	9305      	str	r3, [sp, #20]
 8008e64:	f8d8 3000 	ldr.w	r3, [r8]
 8008e68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e6c:	3307      	adds	r3, #7
 8008e6e:	f023 0307 	bic.w	r3, r3, #7
 8008e72:	f103 0208 	add.w	r2, r3, #8
 8008e76:	f8c8 2000 	str.w	r2, [r8]
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e8a:	9307      	str	r3, [sp, #28]
 8008e8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e90:	ee08 0a10 	vmov	s16, r0
 8008e94:	4b9f      	ldr	r3, [pc, #636]	; (8009114 <_printf_float+0x2dc>)
 8008e96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	f7f7 fe4d 	bl	8000b3c <__aeabi_dcmpun>
 8008ea2:	bb88      	cbnz	r0, 8008f08 <_printf_float+0xd0>
 8008ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ea8:	4b9a      	ldr	r3, [pc, #616]	; (8009114 <_printf_float+0x2dc>)
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008eae:	f7f7 fe27 	bl	8000b00 <__aeabi_dcmple>
 8008eb2:	bb48      	cbnz	r0, 8008f08 <_printf_float+0xd0>
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	4640      	mov	r0, r8
 8008eba:	4649      	mov	r1, r9
 8008ebc:	f7f7 fe16 	bl	8000aec <__aeabi_dcmplt>
 8008ec0:	b110      	cbz	r0, 8008ec8 <_printf_float+0x90>
 8008ec2:	232d      	movs	r3, #45	; 0x2d
 8008ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec8:	4b93      	ldr	r3, [pc, #588]	; (8009118 <_printf_float+0x2e0>)
 8008eca:	4894      	ldr	r0, [pc, #592]	; (800911c <_printf_float+0x2e4>)
 8008ecc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ed0:	bf94      	ite	ls
 8008ed2:	4698      	movls	r8, r3
 8008ed4:	4680      	movhi	r8, r0
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	6123      	str	r3, [r4, #16]
 8008eda:	9b05      	ldr	r3, [sp, #20]
 8008edc:	f023 0204 	bic.w	r2, r3, #4
 8008ee0:	6022      	str	r2, [r4, #0]
 8008ee2:	f04f 0900 	mov.w	r9, #0
 8008ee6:	9700      	str	r7, [sp, #0]
 8008ee8:	4633      	mov	r3, r6
 8008eea:	aa0b      	add	r2, sp, #44	; 0x2c
 8008eec:	4621      	mov	r1, r4
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f9d8 	bl	80092a4 <_printf_common>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f040 8090 	bne.w	800901a <_printf_float+0x1e2>
 8008efa:	f04f 30ff 	mov.w	r0, #4294967295
 8008efe:	b00d      	add	sp, #52	; 0x34
 8008f00:	ecbd 8b02 	vpop	{d8}
 8008f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f08:	4642      	mov	r2, r8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	4649      	mov	r1, r9
 8008f10:	f7f7 fe14 	bl	8000b3c <__aeabi_dcmpun>
 8008f14:	b140      	cbz	r0, 8008f28 <_printf_float+0xf0>
 8008f16:	464b      	mov	r3, r9
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bfbc      	itt	lt
 8008f1c:	232d      	movlt	r3, #45	; 0x2d
 8008f1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f22:	487f      	ldr	r0, [pc, #508]	; (8009120 <_printf_float+0x2e8>)
 8008f24:	4b7f      	ldr	r3, [pc, #508]	; (8009124 <_printf_float+0x2ec>)
 8008f26:	e7d1      	b.n	8008ecc <_printf_float+0x94>
 8008f28:	6863      	ldr	r3, [r4, #4]
 8008f2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f2e:	9206      	str	r2, [sp, #24]
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	d13f      	bne.n	8008fb4 <_printf_float+0x17c>
 8008f34:	2306      	movs	r3, #6
 8008f36:	6063      	str	r3, [r4, #4]
 8008f38:	9b05      	ldr	r3, [sp, #20]
 8008f3a:	6861      	ldr	r1, [r4, #4]
 8008f3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f40:	2300      	movs	r3, #0
 8008f42:	9303      	str	r3, [sp, #12]
 8008f44:	ab0a      	add	r3, sp, #40	; 0x28
 8008f46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f4a:	ab09      	add	r3, sp, #36	; 0x24
 8008f4c:	ec49 8b10 	vmov	d0, r8, r9
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	6022      	str	r2, [r4, #0]
 8008f54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f7ff fecd 	bl	8008cf8 <__cvt>
 8008f5e:	9b06      	ldr	r3, [sp, #24]
 8008f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f62:	2b47      	cmp	r3, #71	; 0x47
 8008f64:	4680      	mov	r8, r0
 8008f66:	d108      	bne.n	8008f7a <_printf_float+0x142>
 8008f68:	1cc8      	adds	r0, r1, #3
 8008f6a:	db02      	blt.n	8008f72 <_printf_float+0x13a>
 8008f6c:	6863      	ldr	r3, [r4, #4]
 8008f6e:	4299      	cmp	r1, r3
 8008f70:	dd41      	ble.n	8008ff6 <_printf_float+0x1be>
 8008f72:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f76:	fa5f fb8b 	uxtb.w	fp, fp
 8008f7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f7e:	d820      	bhi.n	8008fc2 <_printf_float+0x18a>
 8008f80:	3901      	subs	r1, #1
 8008f82:	465a      	mov	r2, fp
 8008f84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f88:	9109      	str	r1, [sp, #36]	; 0x24
 8008f8a:	f7ff ff17 	bl	8008dbc <__exponent>
 8008f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f90:	1813      	adds	r3, r2, r0
 8008f92:	2a01      	cmp	r2, #1
 8008f94:	4681      	mov	r9, r0
 8008f96:	6123      	str	r3, [r4, #16]
 8008f98:	dc02      	bgt.n	8008fa0 <_printf_float+0x168>
 8008f9a:	6822      	ldr	r2, [r4, #0]
 8008f9c:	07d2      	lsls	r2, r2, #31
 8008f9e:	d501      	bpl.n	8008fa4 <_printf_float+0x16c>
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	6123      	str	r3, [r4, #16]
 8008fa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d09c      	beq.n	8008ee6 <_printf_float+0xae>
 8008fac:	232d      	movs	r3, #45	; 0x2d
 8008fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fb2:	e798      	b.n	8008ee6 <_printf_float+0xae>
 8008fb4:	9a06      	ldr	r2, [sp, #24]
 8008fb6:	2a47      	cmp	r2, #71	; 0x47
 8008fb8:	d1be      	bne.n	8008f38 <_printf_float+0x100>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1bc      	bne.n	8008f38 <_printf_float+0x100>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e7b9      	b.n	8008f36 <_printf_float+0xfe>
 8008fc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fc6:	d118      	bne.n	8008ffa <_printf_float+0x1c2>
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	6863      	ldr	r3, [r4, #4]
 8008fcc:	dd0b      	ble.n	8008fe6 <_printf_float+0x1ae>
 8008fce:	6121      	str	r1, [r4, #16]
 8008fd0:	b913      	cbnz	r3, 8008fd8 <_printf_float+0x1a0>
 8008fd2:	6822      	ldr	r2, [r4, #0]
 8008fd4:	07d0      	lsls	r0, r2, #31
 8008fd6:	d502      	bpl.n	8008fde <_printf_float+0x1a6>
 8008fd8:	3301      	adds	r3, #1
 8008fda:	440b      	add	r3, r1
 8008fdc:	6123      	str	r3, [r4, #16]
 8008fde:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fe0:	f04f 0900 	mov.w	r9, #0
 8008fe4:	e7de      	b.n	8008fa4 <_printf_float+0x16c>
 8008fe6:	b913      	cbnz	r3, 8008fee <_printf_float+0x1b6>
 8008fe8:	6822      	ldr	r2, [r4, #0]
 8008fea:	07d2      	lsls	r2, r2, #31
 8008fec:	d501      	bpl.n	8008ff2 <_printf_float+0x1ba>
 8008fee:	3302      	adds	r3, #2
 8008ff0:	e7f4      	b.n	8008fdc <_printf_float+0x1a4>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e7f2      	b.n	8008fdc <_printf_float+0x1a4>
 8008ff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ffc:	4299      	cmp	r1, r3
 8008ffe:	db05      	blt.n	800900c <_printf_float+0x1d4>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	6121      	str	r1, [r4, #16]
 8009004:	07d8      	lsls	r0, r3, #31
 8009006:	d5ea      	bpl.n	8008fde <_printf_float+0x1a6>
 8009008:	1c4b      	adds	r3, r1, #1
 800900a:	e7e7      	b.n	8008fdc <_printf_float+0x1a4>
 800900c:	2900      	cmp	r1, #0
 800900e:	bfd4      	ite	le
 8009010:	f1c1 0202 	rsble	r2, r1, #2
 8009014:	2201      	movgt	r2, #1
 8009016:	4413      	add	r3, r2
 8009018:	e7e0      	b.n	8008fdc <_printf_float+0x1a4>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	055a      	lsls	r2, r3, #21
 800901e:	d407      	bmi.n	8009030 <_printf_float+0x1f8>
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	4642      	mov	r2, r8
 8009024:	4631      	mov	r1, r6
 8009026:	4628      	mov	r0, r5
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	d12c      	bne.n	8009088 <_printf_float+0x250>
 800902e:	e764      	b.n	8008efa <_printf_float+0xc2>
 8009030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009034:	f240 80e0 	bls.w	80091f8 <_printf_float+0x3c0>
 8009038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800903c:	2200      	movs	r2, #0
 800903e:	2300      	movs	r3, #0
 8009040:	f7f7 fd4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009044:	2800      	cmp	r0, #0
 8009046:	d034      	beq.n	80090b2 <_printf_float+0x27a>
 8009048:	4a37      	ldr	r2, [pc, #220]	; (8009128 <_printf_float+0x2f0>)
 800904a:	2301      	movs	r3, #1
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	47b8      	blx	r7
 8009052:	3001      	adds	r0, #1
 8009054:	f43f af51 	beq.w	8008efa <_printf_float+0xc2>
 8009058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800905c:	429a      	cmp	r2, r3
 800905e:	db02      	blt.n	8009066 <_printf_float+0x22e>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	07d8      	lsls	r0, r3, #31
 8009064:	d510      	bpl.n	8009088 <_printf_float+0x250>
 8009066:	ee18 3a10 	vmov	r3, s16
 800906a:	4652      	mov	r2, sl
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	f43f af41 	beq.w	8008efa <_printf_float+0xc2>
 8009078:	f04f 0800 	mov.w	r8, #0
 800907c:	f104 091a 	add.w	r9, r4, #26
 8009080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009082:	3b01      	subs	r3, #1
 8009084:	4543      	cmp	r3, r8
 8009086:	dc09      	bgt.n	800909c <_printf_float+0x264>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	079b      	lsls	r3, r3, #30
 800908c:	f100 8105 	bmi.w	800929a <_printf_float+0x462>
 8009090:	68e0      	ldr	r0, [r4, #12]
 8009092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009094:	4298      	cmp	r0, r3
 8009096:	bfb8      	it	lt
 8009098:	4618      	movlt	r0, r3
 800909a:	e730      	b.n	8008efe <_printf_float+0xc6>
 800909c:	2301      	movs	r3, #1
 800909e:	464a      	mov	r2, r9
 80090a0:	4631      	mov	r1, r6
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b8      	blx	r7
 80090a6:	3001      	adds	r0, #1
 80090a8:	f43f af27 	beq.w	8008efa <_printf_float+0xc2>
 80090ac:	f108 0801 	add.w	r8, r8, #1
 80090b0:	e7e6      	b.n	8009080 <_printf_float+0x248>
 80090b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dc39      	bgt.n	800912c <_printf_float+0x2f4>
 80090b8:	4a1b      	ldr	r2, [pc, #108]	; (8009128 <_printf_float+0x2f0>)
 80090ba:	2301      	movs	r3, #1
 80090bc:	4631      	mov	r1, r6
 80090be:	4628      	mov	r0, r5
 80090c0:	47b8      	blx	r7
 80090c2:	3001      	adds	r0, #1
 80090c4:	f43f af19 	beq.w	8008efa <_printf_float+0xc2>
 80090c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090cc:	4313      	orrs	r3, r2
 80090ce:	d102      	bne.n	80090d6 <_printf_float+0x29e>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	07d9      	lsls	r1, r3, #31
 80090d4:	d5d8      	bpl.n	8009088 <_printf_float+0x250>
 80090d6:	ee18 3a10 	vmov	r3, s16
 80090da:	4652      	mov	r2, sl
 80090dc:	4631      	mov	r1, r6
 80090de:	4628      	mov	r0, r5
 80090e0:	47b8      	blx	r7
 80090e2:	3001      	adds	r0, #1
 80090e4:	f43f af09 	beq.w	8008efa <_printf_float+0xc2>
 80090e8:	f04f 0900 	mov.w	r9, #0
 80090ec:	f104 0a1a 	add.w	sl, r4, #26
 80090f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f2:	425b      	negs	r3, r3
 80090f4:	454b      	cmp	r3, r9
 80090f6:	dc01      	bgt.n	80090fc <_printf_float+0x2c4>
 80090f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fa:	e792      	b.n	8009022 <_printf_float+0x1ea>
 80090fc:	2301      	movs	r3, #1
 80090fe:	4652      	mov	r2, sl
 8009100:	4631      	mov	r1, r6
 8009102:	4628      	mov	r0, r5
 8009104:	47b8      	blx	r7
 8009106:	3001      	adds	r0, #1
 8009108:	f43f aef7 	beq.w	8008efa <_printf_float+0xc2>
 800910c:	f109 0901 	add.w	r9, r9, #1
 8009110:	e7ee      	b.n	80090f0 <_printf_float+0x2b8>
 8009112:	bf00      	nop
 8009114:	7fefffff 	.word	0x7fefffff
 8009118:	0800d1cc 	.word	0x0800d1cc
 800911c:	0800d1d0 	.word	0x0800d1d0
 8009120:	0800d1d8 	.word	0x0800d1d8
 8009124:	0800d1d4 	.word	0x0800d1d4
 8009128:	0800d1dc 	.word	0x0800d1dc
 800912c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800912e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009130:	429a      	cmp	r2, r3
 8009132:	bfa8      	it	ge
 8009134:	461a      	movge	r2, r3
 8009136:	2a00      	cmp	r2, #0
 8009138:	4691      	mov	r9, r2
 800913a:	dc37      	bgt.n	80091ac <_printf_float+0x374>
 800913c:	f04f 0b00 	mov.w	fp, #0
 8009140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009144:	f104 021a 	add.w	r2, r4, #26
 8009148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800914a:	9305      	str	r3, [sp, #20]
 800914c:	eba3 0309 	sub.w	r3, r3, r9
 8009150:	455b      	cmp	r3, fp
 8009152:	dc33      	bgt.n	80091bc <_printf_float+0x384>
 8009154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009158:	429a      	cmp	r2, r3
 800915a:	db3b      	blt.n	80091d4 <_printf_float+0x39c>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	07da      	lsls	r2, r3, #31
 8009160:	d438      	bmi.n	80091d4 <_printf_float+0x39c>
 8009162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009164:	9b05      	ldr	r3, [sp, #20]
 8009166:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	eba2 0901 	sub.w	r9, r2, r1
 800916e:	4599      	cmp	r9, r3
 8009170:	bfa8      	it	ge
 8009172:	4699      	movge	r9, r3
 8009174:	f1b9 0f00 	cmp.w	r9, #0
 8009178:	dc35      	bgt.n	80091e6 <_printf_float+0x3ae>
 800917a:	f04f 0800 	mov.w	r8, #0
 800917e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009182:	f104 0a1a 	add.w	sl, r4, #26
 8009186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	eba3 0309 	sub.w	r3, r3, r9
 8009190:	4543      	cmp	r3, r8
 8009192:	f77f af79 	ble.w	8009088 <_printf_float+0x250>
 8009196:	2301      	movs	r3, #1
 8009198:	4652      	mov	r2, sl
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	f43f aeaa 	beq.w	8008efa <_printf_float+0xc2>
 80091a6:	f108 0801 	add.w	r8, r8, #1
 80091aa:	e7ec      	b.n	8009186 <_printf_float+0x34e>
 80091ac:	4613      	mov	r3, r2
 80091ae:	4631      	mov	r1, r6
 80091b0:	4642      	mov	r2, r8
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	d1c0      	bne.n	800913c <_printf_float+0x304>
 80091ba:	e69e      	b.n	8008efa <_printf_float+0xc2>
 80091bc:	2301      	movs	r3, #1
 80091be:	4631      	mov	r1, r6
 80091c0:	4628      	mov	r0, r5
 80091c2:	9205      	str	r2, [sp, #20]
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	f43f ae97 	beq.w	8008efa <_printf_float+0xc2>
 80091cc:	9a05      	ldr	r2, [sp, #20]
 80091ce:	f10b 0b01 	add.w	fp, fp, #1
 80091d2:	e7b9      	b.n	8009148 <_printf_float+0x310>
 80091d4:	ee18 3a10 	vmov	r3, s16
 80091d8:	4652      	mov	r2, sl
 80091da:	4631      	mov	r1, r6
 80091dc:	4628      	mov	r0, r5
 80091de:	47b8      	blx	r7
 80091e0:	3001      	adds	r0, #1
 80091e2:	d1be      	bne.n	8009162 <_printf_float+0x32a>
 80091e4:	e689      	b.n	8008efa <_printf_float+0xc2>
 80091e6:	9a05      	ldr	r2, [sp, #20]
 80091e8:	464b      	mov	r3, r9
 80091ea:	4442      	add	r2, r8
 80091ec:	4631      	mov	r1, r6
 80091ee:	4628      	mov	r0, r5
 80091f0:	47b8      	blx	r7
 80091f2:	3001      	adds	r0, #1
 80091f4:	d1c1      	bne.n	800917a <_printf_float+0x342>
 80091f6:	e680      	b.n	8008efa <_printf_float+0xc2>
 80091f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091fa:	2a01      	cmp	r2, #1
 80091fc:	dc01      	bgt.n	8009202 <_printf_float+0x3ca>
 80091fe:	07db      	lsls	r3, r3, #31
 8009200:	d538      	bpl.n	8009274 <_printf_float+0x43c>
 8009202:	2301      	movs	r3, #1
 8009204:	4642      	mov	r2, r8
 8009206:	4631      	mov	r1, r6
 8009208:	4628      	mov	r0, r5
 800920a:	47b8      	blx	r7
 800920c:	3001      	adds	r0, #1
 800920e:	f43f ae74 	beq.w	8008efa <_printf_float+0xc2>
 8009212:	ee18 3a10 	vmov	r3, s16
 8009216:	4652      	mov	r2, sl
 8009218:	4631      	mov	r1, r6
 800921a:	4628      	mov	r0, r5
 800921c:	47b8      	blx	r7
 800921e:	3001      	adds	r0, #1
 8009220:	f43f ae6b 	beq.w	8008efa <_printf_float+0xc2>
 8009224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009228:	2200      	movs	r2, #0
 800922a:	2300      	movs	r3, #0
 800922c:	f7f7 fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 8009230:	b9d8      	cbnz	r0, 800926a <_printf_float+0x432>
 8009232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009234:	f108 0201 	add.w	r2, r8, #1
 8009238:	3b01      	subs	r3, #1
 800923a:	4631      	mov	r1, r6
 800923c:	4628      	mov	r0, r5
 800923e:	47b8      	blx	r7
 8009240:	3001      	adds	r0, #1
 8009242:	d10e      	bne.n	8009262 <_printf_float+0x42a>
 8009244:	e659      	b.n	8008efa <_printf_float+0xc2>
 8009246:	2301      	movs	r3, #1
 8009248:	4652      	mov	r2, sl
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	47b8      	blx	r7
 8009250:	3001      	adds	r0, #1
 8009252:	f43f ae52 	beq.w	8008efa <_printf_float+0xc2>
 8009256:	f108 0801 	add.w	r8, r8, #1
 800925a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925c:	3b01      	subs	r3, #1
 800925e:	4543      	cmp	r3, r8
 8009260:	dcf1      	bgt.n	8009246 <_printf_float+0x40e>
 8009262:	464b      	mov	r3, r9
 8009264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009268:	e6dc      	b.n	8009024 <_printf_float+0x1ec>
 800926a:	f04f 0800 	mov.w	r8, #0
 800926e:	f104 0a1a 	add.w	sl, r4, #26
 8009272:	e7f2      	b.n	800925a <_printf_float+0x422>
 8009274:	2301      	movs	r3, #1
 8009276:	4642      	mov	r2, r8
 8009278:	e7df      	b.n	800923a <_printf_float+0x402>
 800927a:	2301      	movs	r3, #1
 800927c:	464a      	mov	r2, r9
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	f43f ae38 	beq.w	8008efa <_printf_float+0xc2>
 800928a:	f108 0801 	add.w	r8, r8, #1
 800928e:	68e3      	ldr	r3, [r4, #12]
 8009290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009292:	1a5b      	subs	r3, r3, r1
 8009294:	4543      	cmp	r3, r8
 8009296:	dcf0      	bgt.n	800927a <_printf_float+0x442>
 8009298:	e6fa      	b.n	8009090 <_printf_float+0x258>
 800929a:	f04f 0800 	mov.w	r8, #0
 800929e:	f104 0919 	add.w	r9, r4, #25
 80092a2:	e7f4      	b.n	800928e <_printf_float+0x456>

080092a4 <_printf_common>:
 80092a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	4616      	mov	r6, r2
 80092aa:	4699      	mov	r9, r3
 80092ac:	688a      	ldr	r2, [r1, #8]
 80092ae:	690b      	ldr	r3, [r1, #16]
 80092b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092b4:	4293      	cmp	r3, r2
 80092b6:	bfb8      	it	lt
 80092b8:	4613      	movlt	r3, r2
 80092ba:	6033      	str	r3, [r6, #0]
 80092bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092c0:	4607      	mov	r7, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	b10a      	cbz	r2, 80092ca <_printf_common+0x26>
 80092c6:	3301      	adds	r3, #1
 80092c8:	6033      	str	r3, [r6, #0]
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	0699      	lsls	r1, r3, #26
 80092ce:	bf42      	ittt	mi
 80092d0:	6833      	ldrmi	r3, [r6, #0]
 80092d2:	3302      	addmi	r3, #2
 80092d4:	6033      	strmi	r3, [r6, #0]
 80092d6:	6825      	ldr	r5, [r4, #0]
 80092d8:	f015 0506 	ands.w	r5, r5, #6
 80092dc:	d106      	bne.n	80092ec <_printf_common+0x48>
 80092de:	f104 0a19 	add.w	sl, r4, #25
 80092e2:	68e3      	ldr	r3, [r4, #12]
 80092e4:	6832      	ldr	r2, [r6, #0]
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	42ab      	cmp	r3, r5
 80092ea:	dc26      	bgt.n	800933a <_printf_common+0x96>
 80092ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092f0:	1e13      	subs	r3, r2, #0
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	bf18      	it	ne
 80092f6:	2301      	movne	r3, #1
 80092f8:	0692      	lsls	r2, r2, #26
 80092fa:	d42b      	bmi.n	8009354 <_printf_common+0xb0>
 80092fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009300:	4649      	mov	r1, r9
 8009302:	4638      	mov	r0, r7
 8009304:	47c0      	blx	r8
 8009306:	3001      	adds	r0, #1
 8009308:	d01e      	beq.n	8009348 <_printf_common+0xa4>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	68e5      	ldr	r5, [r4, #12]
 800930e:	6832      	ldr	r2, [r6, #0]
 8009310:	f003 0306 	and.w	r3, r3, #6
 8009314:	2b04      	cmp	r3, #4
 8009316:	bf08      	it	eq
 8009318:	1aad      	subeq	r5, r5, r2
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	6922      	ldr	r2, [r4, #16]
 800931e:	bf0c      	ite	eq
 8009320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009324:	2500      	movne	r5, #0
 8009326:	4293      	cmp	r3, r2
 8009328:	bfc4      	itt	gt
 800932a:	1a9b      	subgt	r3, r3, r2
 800932c:	18ed      	addgt	r5, r5, r3
 800932e:	2600      	movs	r6, #0
 8009330:	341a      	adds	r4, #26
 8009332:	42b5      	cmp	r5, r6
 8009334:	d11a      	bne.n	800936c <_printf_common+0xc8>
 8009336:	2000      	movs	r0, #0
 8009338:	e008      	b.n	800934c <_printf_common+0xa8>
 800933a:	2301      	movs	r3, #1
 800933c:	4652      	mov	r2, sl
 800933e:	4649      	mov	r1, r9
 8009340:	4638      	mov	r0, r7
 8009342:	47c0      	blx	r8
 8009344:	3001      	adds	r0, #1
 8009346:	d103      	bne.n	8009350 <_printf_common+0xac>
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009350:	3501      	adds	r5, #1
 8009352:	e7c6      	b.n	80092e2 <_printf_common+0x3e>
 8009354:	18e1      	adds	r1, r4, r3
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	2030      	movs	r0, #48	; 0x30
 800935a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800935e:	4422      	add	r2, r4
 8009360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009368:	3302      	adds	r3, #2
 800936a:	e7c7      	b.n	80092fc <_printf_common+0x58>
 800936c:	2301      	movs	r3, #1
 800936e:	4622      	mov	r2, r4
 8009370:	4649      	mov	r1, r9
 8009372:	4638      	mov	r0, r7
 8009374:	47c0      	blx	r8
 8009376:	3001      	adds	r0, #1
 8009378:	d0e6      	beq.n	8009348 <_printf_common+0xa4>
 800937a:	3601      	adds	r6, #1
 800937c:	e7d9      	b.n	8009332 <_printf_common+0x8e>
	...

08009380 <_printf_i>:
 8009380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009384:	460c      	mov	r4, r1
 8009386:	4691      	mov	r9, r2
 8009388:	7e27      	ldrb	r7, [r4, #24]
 800938a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800938c:	2f78      	cmp	r7, #120	; 0x78
 800938e:	4680      	mov	r8, r0
 8009390:	469a      	mov	sl, r3
 8009392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009396:	d807      	bhi.n	80093a8 <_printf_i+0x28>
 8009398:	2f62      	cmp	r7, #98	; 0x62
 800939a:	d80a      	bhi.n	80093b2 <_printf_i+0x32>
 800939c:	2f00      	cmp	r7, #0
 800939e:	f000 80d8 	beq.w	8009552 <_printf_i+0x1d2>
 80093a2:	2f58      	cmp	r7, #88	; 0x58
 80093a4:	f000 80a3 	beq.w	80094ee <_printf_i+0x16e>
 80093a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093b0:	e03a      	b.n	8009428 <_printf_i+0xa8>
 80093b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093b6:	2b15      	cmp	r3, #21
 80093b8:	d8f6      	bhi.n	80093a8 <_printf_i+0x28>
 80093ba:	a001      	add	r0, pc, #4	; (adr r0, 80093c0 <_printf_i+0x40>)
 80093bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093c0:	08009419 	.word	0x08009419
 80093c4:	0800942d 	.word	0x0800942d
 80093c8:	080093a9 	.word	0x080093a9
 80093cc:	080093a9 	.word	0x080093a9
 80093d0:	080093a9 	.word	0x080093a9
 80093d4:	080093a9 	.word	0x080093a9
 80093d8:	0800942d 	.word	0x0800942d
 80093dc:	080093a9 	.word	0x080093a9
 80093e0:	080093a9 	.word	0x080093a9
 80093e4:	080093a9 	.word	0x080093a9
 80093e8:	080093a9 	.word	0x080093a9
 80093ec:	08009539 	.word	0x08009539
 80093f0:	0800945d 	.word	0x0800945d
 80093f4:	0800951b 	.word	0x0800951b
 80093f8:	080093a9 	.word	0x080093a9
 80093fc:	080093a9 	.word	0x080093a9
 8009400:	0800955b 	.word	0x0800955b
 8009404:	080093a9 	.word	0x080093a9
 8009408:	0800945d 	.word	0x0800945d
 800940c:	080093a9 	.word	0x080093a9
 8009410:	080093a9 	.word	0x080093a9
 8009414:	08009523 	.word	0x08009523
 8009418:	680b      	ldr	r3, [r1, #0]
 800941a:	1d1a      	adds	r2, r3, #4
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	600a      	str	r2, [r1, #0]
 8009420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009428:	2301      	movs	r3, #1
 800942a:	e0a3      	b.n	8009574 <_printf_i+0x1f4>
 800942c:	6825      	ldr	r5, [r4, #0]
 800942e:	6808      	ldr	r0, [r1, #0]
 8009430:	062e      	lsls	r6, r5, #24
 8009432:	f100 0304 	add.w	r3, r0, #4
 8009436:	d50a      	bpl.n	800944e <_printf_i+0xce>
 8009438:	6805      	ldr	r5, [r0, #0]
 800943a:	600b      	str	r3, [r1, #0]
 800943c:	2d00      	cmp	r5, #0
 800943e:	da03      	bge.n	8009448 <_printf_i+0xc8>
 8009440:	232d      	movs	r3, #45	; 0x2d
 8009442:	426d      	negs	r5, r5
 8009444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009448:	485e      	ldr	r0, [pc, #376]	; (80095c4 <_printf_i+0x244>)
 800944a:	230a      	movs	r3, #10
 800944c:	e019      	b.n	8009482 <_printf_i+0x102>
 800944e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009452:	6805      	ldr	r5, [r0, #0]
 8009454:	600b      	str	r3, [r1, #0]
 8009456:	bf18      	it	ne
 8009458:	b22d      	sxthne	r5, r5
 800945a:	e7ef      	b.n	800943c <_printf_i+0xbc>
 800945c:	680b      	ldr	r3, [r1, #0]
 800945e:	6825      	ldr	r5, [r4, #0]
 8009460:	1d18      	adds	r0, r3, #4
 8009462:	6008      	str	r0, [r1, #0]
 8009464:	0628      	lsls	r0, r5, #24
 8009466:	d501      	bpl.n	800946c <_printf_i+0xec>
 8009468:	681d      	ldr	r5, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0xf2>
 800946c:	0669      	lsls	r1, r5, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0xe8>
 8009470:	881d      	ldrh	r5, [r3, #0]
 8009472:	4854      	ldr	r0, [pc, #336]	; (80095c4 <_printf_i+0x244>)
 8009474:	2f6f      	cmp	r7, #111	; 0x6f
 8009476:	bf0c      	ite	eq
 8009478:	2308      	moveq	r3, #8
 800947a:	230a      	movne	r3, #10
 800947c:	2100      	movs	r1, #0
 800947e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009482:	6866      	ldr	r6, [r4, #4]
 8009484:	60a6      	str	r6, [r4, #8]
 8009486:	2e00      	cmp	r6, #0
 8009488:	bfa2      	ittt	ge
 800948a:	6821      	ldrge	r1, [r4, #0]
 800948c:	f021 0104 	bicge.w	r1, r1, #4
 8009490:	6021      	strge	r1, [r4, #0]
 8009492:	b90d      	cbnz	r5, 8009498 <_printf_i+0x118>
 8009494:	2e00      	cmp	r6, #0
 8009496:	d04d      	beq.n	8009534 <_printf_i+0x1b4>
 8009498:	4616      	mov	r6, r2
 800949a:	fbb5 f1f3 	udiv	r1, r5, r3
 800949e:	fb03 5711 	mls	r7, r3, r1, r5
 80094a2:	5dc7      	ldrb	r7, [r0, r7]
 80094a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094a8:	462f      	mov	r7, r5
 80094aa:	42bb      	cmp	r3, r7
 80094ac:	460d      	mov	r5, r1
 80094ae:	d9f4      	bls.n	800949a <_printf_i+0x11a>
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d10b      	bne.n	80094cc <_printf_i+0x14c>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	07df      	lsls	r7, r3, #31
 80094b8:	d508      	bpl.n	80094cc <_printf_i+0x14c>
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	6861      	ldr	r1, [r4, #4]
 80094be:	4299      	cmp	r1, r3
 80094c0:	bfde      	ittt	le
 80094c2:	2330      	movle	r3, #48	; 0x30
 80094c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094cc:	1b92      	subs	r2, r2, r6
 80094ce:	6122      	str	r2, [r4, #16]
 80094d0:	f8cd a000 	str.w	sl, [sp]
 80094d4:	464b      	mov	r3, r9
 80094d6:	aa03      	add	r2, sp, #12
 80094d8:	4621      	mov	r1, r4
 80094da:	4640      	mov	r0, r8
 80094dc:	f7ff fee2 	bl	80092a4 <_printf_common>
 80094e0:	3001      	adds	r0, #1
 80094e2:	d14c      	bne.n	800957e <_printf_i+0x1fe>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	b004      	add	sp, #16
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	4835      	ldr	r0, [pc, #212]	; (80095c4 <_printf_i+0x244>)
 80094f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	680e      	ldr	r6, [r1, #0]
 80094f8:	061f      	lsls	r7, r3, #24
 80094fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80094fe:	600e      	str	r6, [r1, #0]
 8009500:	d514      	bpl.n	800952c <_printf_i+0x1ac>
 8009502:	07d9      	lsls	r1, r3, #31
 8009504:	bf44      	itt	mi
 8009506:	f043 0320 	orrmi.w	r3, r3, #32
 800950a:	6023      	strmi	r3, [r4, #0]
 800950c:	b91d      	cbnz	r5, 8009516 <_printf_i+0x196>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	f023 0320 	bic.w	r3, r3, #32
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	2310      	movs	r3, #16
 8009518:	e7b0      	b.n	800947c <_printf_i+0xfc>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	f043 0320 	orr.w	r3, r3, #32
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	2378      	movs	r3, #120	; 0x78
 8009524:	4828      	ldr	r0, [pc, #160]	; (80095c8 <_printf_i+0x248>)
 8009526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800952a:	e7e3      	b.n	80094f4 <_printf_i+0x174>
 800952c:	065e      	lsls	r6, r3, #25
 800952e:	bf48      	it	mi
 8009530:	b2ad      	uxthmi	r5, r5
 8009532:	e7e6      	b.n	8009502 <_printf_i+0x182>
 8009534:	4616      	mov	r6, r2
 8009536:	e7bb      	b.n	80094b0 <_printf_i+0x130>
 8009538:	680b      	ldr	r3, [r1, #0]
 800953a:	6826      	ldr	r6, [r4, #0]
 800953c:	6960      	ldr	r0, [r4, #20]
 800953e:	1d1d      	adds	r5, r3, #4
 8009540:	600d      	str	r5, [r1, #0]
 8009542:	0635      	lsls	r5, r6, #24
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	d501      	bpl.n	800954c <_printf_i+0x1cc>
 8009548:	6018      	str	r0, [r3, #0]
 800954a:	e002      	b.n	8009552 <_printf_i+0x1d2>
 800954c:	0671      	lsls	r1, r6, #25
 800954e:	d5fb      	bpl.n	8009548 <_printf_i+0x1c8>
 8009550:	8018      	strh	r0, [r3, #0]
 8009552:	2300      	movs	r3, #0
 8009554:	6123      	str	r3, [r4, #16]
 8009556:	4616      	mov	r6, r2
 8009558:	e7ba      	b.n	80094d0 <_printf_i+0x150>
 800955a:	680b      	ldr	r3, [r1, #0]
 800955c:	1d1a      	adds	r2, r3, #4
 800955e:	600a      	str	r2, [r1, #0]
 8009560:	681e      	ldr	r6, [r3, #0]
 8009562:	6862      	ldr	r2, [r4, #4]
 8009564:	2100      	movs	r1, #0
 8009566:	4630      	mov	r0, r6
 8009568:	f7f6 fe42 	bl	80001f0 <memchr>
 800956c:	b108      	cbz	r0, 8009572 <_printf_i+0x1f2>
 800956e:	1b80      	subs	r0, r0, r6
 8009570:	6060      	str	r0, [r4, #4]
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	6123      	str	r3, [r4, #16]
 8009576:	2300      	movs	r3, #0
 8009578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800957c:	e7a8      	b.n	80094d0 <_printf_i+0x150>
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	4632      	mov	r2, r6
 8009582:	4649      	mov	r1, r9
 8009584:	4640      	mov	r0, r8
 8009586:	47d0      	blx	sl
 8009588:	3001      	adds	r0, #1
 800958a:	d0ab      	beq.n	80094e4 <_printf_i+0x164>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	079b      	lsls	r3, r3, #30
 8009590:	d413      	bmi.n	80095ba <_printf_i+0x23a>
 8009592:	68e0      	ldr	r0, [r4, #12]
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	4298      	cmp	r0, r3
 8009598:	bfb8      	it	lt
 800959a:	4618      	movlt	r0, r3
 800959c:	e7a4      	b.n	80094e8 <_printf_i+0x168>
 800959e:	2301      	movs	r3, #1
 80095a0:	4632      	mov	r2, r6
 80095a2:	4649      	mov	r1, r9
 80095a4:	4640      	mov	r0, r8
 80095a6:	47d0      	blx	sl
 80095a8:	3001      	adds	r0, #1
 80095aa:	d09b      	beq.n	80094e4 <_printf_i+0x164>
 80095ac:	3501      	adds	r5, #1
 80095ae:	68e3      	ldr	r3, [r4, #12]
 80095b0:	9903      	ldr	r1, [sp, #12]
 80095b2:	1a5b      	subs	r3, r3, r1
 80095b4:	42ab      	cmp	r3, r5
 80095b6:	dcf2      	bgt.n	800959e <_printf_i+0x21e>
 80095b8:	e7eb      	b.n	8009592 <_printf_i+0x212>
 80095ba:	2500      	movs	r5, #0
 80095bc:	f104 0619 	add.w	r6, r4, #25
 80095c0:	e7f5      	b.n	80095ae <_printf_i+0x22e>
 80095c2:	bf00      	nop
 80095c4:	0800d1de 	.word	0x0800d1de
 80095c8:	0800d1ef 	.word	0x0800d1ef

080095cc <_sbrk_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d06      	ldr	r5, [pc, #24]	; (80095e8 <_sbrk_r+0x1c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7ff f9a6 	bl	8008928 <_sbrk>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_sbrk_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_sbrk_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	2000d984 	.word	0x2000d984

080095ec <siprintf>:
 80095ec:	b40e      	push	{r1, r2, r3}
 80095ee:	b500      	push	{lr}
 80095f0:	b09c      	sub	sp, #112	; 0x70
 80095f2:	ab1d      	add	r3, sp, #116	; 0x74
 80095f4:	9002      	str	r0, [sp, #8]
 80095f6:	9006      	str	r0, [sp, #24]
 80095f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095fc:	4809      	ldr	r0, [pc, #36]	; (8009624 <siprintf+0x38>)
 80095fe:	9107      	str	r1, [sp, #28]
 8009600:	9104      	str	r1, [sp, #16]
 8009602:	4909      	ldr	r1, [pc, #36]	; (8009628 <siprintf+0x3c>)
 8009604:	f853 2b04 	ldr.w	r2, [r3], #4
 8009608:	9105      	str	r1, [sp, #20]
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	a902      	add	r1, sp, #8
 8009610:	f001 fa8c 	bl	800ab2c <_svfiprintf_r>
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	b01c      	add	sp, #112	; 0x70
 800961c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009620:	b003      	add	sp, #12
 8009622:	4770      	bx	lr
 8009624:	2000001c 	.word	0x2000001c
 8009628:	ffff0208 	.word	0xffff0208

0800962c <quorem>:
 800962c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	6903      	ldr	r3, [r0, #16]
 8009632:	690c      	ldr	r4, [r1, #16]
 8009634:	42a3      	cmp	r3, r4
 8009636:	4607      	mov	r7, r0
 8009638:	f2c0 8081 	blt.w	800973e <quorem+0x112>
 800963c:	3c01      	subs	r4, #1
 800963e:	f101 0814 	add.w	r8, r1, #20
 8009642:	f100 0514 	add.w	r5, r0, #20
 8009646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009654:	3301      	adds	r3, #1
 8009656:	429a      	cmp	r2, r3
 8009658:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800965c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009660:	fbb2 f6f3 	udiv	r6, r2, r3
 8009664:	d331      	bcc.n	80096ca <quorem+0x9e>
 8009666:	f04f 0e00 	mov.w	lr, #0
 800966a:	4640      	mov	r0, r8
 800966c:	46ac      	mov	ip, r5
 800966e:	46f2      	mov	sl, lr
 8009670:	f850 2b04 	ldr.w	r2, [r0], #4
 8009674:	b293      	uxth	r3, r2
 8009676:	fb06 e303 	mla	r3, r6, r3, lr
 800967a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800967e:	b29b      	uxth	r3, r3
 8009680:	ebaa 0303 	sub.w	r3, sl, r3
 8009684:	0c12      	lsrs	r2, r2, #16
 8009686:	f8dc a000 	ldr.w	sl, [ip]
 800968a:	fb06 e202 	mla	r2, r6, r2, lr
 800968e:	fa13 f38a 	uxtah	r3, r3, sl
 8009692:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009696:	fa1f fa82 	uxth.w	sl, r2
 800969a:	f8dc 2000 	ldr.w	r2, [ip]
 800969e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80096a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096ac:	4581      	cmp	r9, r0
 80096ae:	f84c 3b04 	str.w	r3, [ip], #4
 80096b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80096b6:	d2db      	bcs.n	8009670 <quorem+0x44>
 80096b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80096bc:	b92b      	cbnz	r3, 80096ca <quorem+0x9e>
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	3b04      	subs	r3, #4
 80096c2:	429d      	cmp	r5, r3
 80096c4:	461a      	mov	r2, r3
 80096c6:	d32e      	bcc.n	8009726 <quorem+0xfa>
 80096c8:	613c      	str	r4, [r7, #16]
 80096ca:	4638      	mov	r0, r7
 80096cc:	f001 f8c4 	bl	800a858 <__mcmp>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	db24      	blt.n	800971e <quorem+0xf2>
 80096d4:	3601      	adds	r6, #1
 80096d6:	4628      	mov	r0, r5
 80096d8:	f04f 0c00 	mov.w	ip, #0
 80096dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80096e0:	f8d0 e000 	ldr.w	lr, [r0]
 80096e4:	b293      	uxth	r3, r2
 80096e6:	ebac 0303 	sub.w	r3, ip, r3
 80096ea:	0c12      	lsrs	r2, r2, #16
 80096ec:	fa13 f38e 	uxtah	r3, r3, lr
 80096f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80096f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096fe:	45c1      	cmp	r9, r8
 8009700:	f840 3b04 	str.w	r3, [r0], #4
 8009704:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009708:	d2e8      	bcs.n	80096dc <quorem+0xb0>
 800970a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800970e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009712:	b922      	cbnz	r2, 800971e <quorem+0xf2>
 8009714:	3b04      	subs	r3, #4
 8009716:	429d      	cmp	r5, r3
 8009718:	461a      	mov	r2, r3
 800971a:	d30a      	bcc.n	8009732 <quorem+0x106>
 800971c:	613c      	str	r4, [r7, #16]
 800971e:	4630      	mov	r0, r6
 8009720:	b003      	add	sp, #12
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	3b04      	subs	r3, #4
 800972a:	2a00      	cmp	r2, #0
 800972c:	d1cc      	bne.n	80096c8 <quorem+0x9c>
 800972e:	3c01      	subs	r4, #1
 8009730:	e7c7      	b.n	80096c2 <quorem+0x96>
 8009732:	6812      	ldr	r2, [r2, #0]
 8009734:	3b04      	subs	r3, #4
 8009736:	2a00      	cmp	r2, #0
 8009738:	d1f0      	bne.n	800971c <quorem+0xf0>
 800973a:	3c01      	subs	r4, #1
 800973c:	e7eb      	b.n	8009716 <quorem+0xea>
 800973e:	2000      	movs	r0, #0
 8009740:	e7ee      	b.n	8009720 <quorem+0xf4>
 8009742:	0000      	movs	r0, r0
 8009744:	0000      	movs	r0, r0
	...

08009748 <_dtoa_r>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	ed2d 8b02 	vpush	{d8}
 8009750:	ec57 6b10 	vmov	r6, r7, d0
 8009754:	b095      	sub	sp, #84	; 0x54
 8009756:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009758:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800975c:	9105      	str	r1, [sp, #20]
 800975e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009762:	4604      	mov	r4, r0
 8009764:	9209      	str	r2, [sp, #36]	; 0x24
 8009766:	930f      	str	r3, [sp, #60]	; 0x3c
 8009768:	b975      	cbnz	r5, 8009788 <_dtoa_r+0x40>
 800976a:	2010      	movs	r0, #16
 800976c:	f7ff fa0a 	bl	8008b84 <malloc>
 8009770:	4602      	mov	r2, r0
 8009772:	6260      	str	r0, [r4, #36]	; 0x24
 8009774:	b920      	cbnz	r0, 8009780 <_dtoa_r+0x38>
 8009776:	4bb2      	ldr	r3, [pc, #712]	; (8009a40 <_dtoa_r+0x2f8>)
 8009778:	21ea      	movs	r1, #234	; 0xea
 800977a:	48b2      	ldr	r0, [pc, #712]	; (8009a44 <_dtoa_r+0x2fc>)
 800977c:	f001 fad6 	bl	800ad2c <__assert_func>
 8009780:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009784:	6005      	str	r5, [r0, #0]
 8009786:	60c5      	str	r5, [r0, #12]
 8009788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800978a:	6819      	ldr	r1, [r3, #0]
 800978c:	b151      	cbz	r1, 80097a4 <_dtoa_r+0x5c>
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	604a      	str	r2, [r1, #4]
 8009792:	2301      	movs	r3, #1
 8009794:	4093      	lsls	r3, r2
 8009796:	608b      	str	r3, [r1, #8]
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fe1f 	bl	800a3dc <_Bfree>
 800979e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	1e3b      	subs	r3, r7, #0
 80097a6:	bfb9      	ittee	lt
 80097a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097ac:	9303      	strlt	r3, [sp, #12]
 80097ae:	2300      	movge	r3, #0
 80097b0:	f8c8 3000 	strge.w	r3, [r8]
 80097b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80097b8:	4ba3      	ldr	r3, [pc, #652]	; (8009a48 <_dtoa_r+0x300>)
 80097ba:	bfbc      	itt	lt
 80097bc:	2201      	movlt	r2, #1
 80097be:	f8c8 2000 	strlt.w	r2, [r8]
 80097c2:	ea33 0309 	bics.w	r3, r3, r9
 80097c6:	d11b      	bne.n	8009800 <_dtoa_r+0xb8>
 80097c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097d4:	4333      	orrs	r3, r6
 80097d6:	f000 857a 	beq.w	800a2ce <_dtoa_r+0xb86>
 80097da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097dc:	b963      	cbnz	r3, 80097f8 <_dtoa_r+0xb0>
 80097de:	4b9b      	ldr	r3, [pc, #620]	; (8009a4c <_dtoa_r+0x304>)
 80097e0:	e024      	b.n	800982c <_dtoa_r+0xe4>
 80097e2:	4b9b      	ldr	r3, [pc, #620]	; (8009a50 <_dtoa_r+0x308>)
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	3308      	adds	r3, #8
 80097e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	9800      	ldr	r0, [sp, #0]
 80097ee:	b015      	add	sp, #84	; 0x54
 80097f0:	ecbd 8b02 	vpop	{d8}
 80097f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f8:	4b94      	ldr	r3, [pc, #592]	; (8009a4c <_dtoa_r+0x304>)
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	3303      	adds	r3, #3
 80097fe:	e7f3      	b.n	80097e8 <_dtoa_r+0xa0>
 8009800:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009804:	2200      	movs	r2, #0
 8009806:	ec51 0b17 	vmov	r0, r1, d7
 800980a:	2300      	movs	r3, #0
 800980c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009810:	f7f7 f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8009814:	4680      	mov	r8, r0
 8009816:	b158      	cbz	r0, 8009830 <_dtoa_r+0xe8>
 8009818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800981a:	2301      	movs	r3, #1
 800981c:	6013      	str	r3, [r2, #0]
 800981e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 8551 	beq.w	800a2c8 <_dtoa_r+0xb80>
 8009826:	488b      	ldr	r0, [pc, #556]	; (8009a54 <_dtoa_r+0x30c>)
 8009828:	6018      	str	r0, [r3, #0]
 800982a:	1e43      	subs	r3, r0, #1
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	e7dd      	b.n	80097ec <_dtoa_r+0xa4>
 8009830:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009834:	aa12      	add	r2, sp, #72	; 0x48
 8009836:	a913      	add	r1, sp, #76	; 0x4c
 8009838:	4620      	mov	r0, r4
 800983a:	f001 f8b1 	bl	800a9a0 <__d2b>
 800983e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009842:	4683      	mov	fp, r0
 8009844:	2d00      	cmp	r5, #0
 8009846:	d07c      	beq.n	8009942 <_dtoa_r+0x1fa>
 8009848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800984a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800984e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009852:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009856:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800985a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800985e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009862:	4b7d      	ldr	r3, [pc, #500]	; (8009a58 <_dtoa_r+0x310>)
 8009864:	2200      	movs	r2, #0
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f6 fd15 	bl	8000298 <__aeabi_dsub>
 800986e:	a36e      	add	r3, pc, #440	; (adr r3, 8009a28 <_dtoa_r+0x2e0>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	f7f6 fec8 	bl	8000608 <__aeabi_dmul>
 8009878:	a36d      	add	r3, pc, #436	; (adr r3, 8009a30 <_dtoa_r+0x2e8>)
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	f7f6 fd0d 	bl	800029c <__adddf3>
 8009882:	4606      	mov	r6, r0
 8009884:	4628      	mov	r0, r5
 8009886:	460f      	mov	r7, r1
 8009888:	f7f6 fe54 	bl	8000534 <__aeabi_i2d>
 800988c:	a36a      	add	r3, pc, #424	; (adr r3, 8009a38 <_dtoa_r+0x2f0>)
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	f7f6 feb9 	bl	8000608 <__aeabi_dmul>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4630      	mov	r0, r6
 800989c:	4639      	mov	r1, r7
 800989e:	f7f6 fcfd 	bl	800029c <__adddf3>
 80098a2:	4606      	mov	r6, r0
 80098a4:	460f      	mov	r7, r1
 80098a6:	f7f7 f95f 	bl	8000b68 <__aeabi_d2iz>
 80098aa:	2200      	movs	r2, #0
 80098ac:	4682      	mov	sl, r0
 80098ae:	2300      	movs	r3, #0
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f7 f91a 	bl	8000aec <__aeabi_dcmplt>
 80098b8:	b148      	cbz	r0, 80098ce <_dtoa_r+0x186>
 80098ba:	4650      	mov	r0, sl
 80098bc:	f7f6 fe3a 	bl	8000534 <__aeabi_i2d>
 80098c0:	4632      	mov	r2, r6
 80098c2:	463b      	mov	r3, r7
 80098c4:	f7f7 f908 	bl	8000ad8 <__aeabi_dcmpeq>
 80098c8:	b908      	cbnz	r0, 80098ce <_dtoa_r+0x186>
 80098ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098ce:	f1ba 0f16 	cmp.w	sl, #22
 80098d2:	d854      	bhi.n	800997e <_dtoa_r+0x236>
 80098d4:	4b61      	ldr	r3, [pc, #388]	; (8009a5c <_dtoa_r+0x314>)
 80098d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098e2:	f7f7 f903 	bl	8000aec <__aeabi_dcmplt>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d04b      	beq.n	8009982 <_dtoa_r+0x23a>
 80098ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098ee:	2300      	movs	r3, #0
 80098f0:	930e      	str	r3, [sp, #56]	; 0x38
 80098f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098f4:	1b5d      	subs	r5, r3, r5
 80098f6:	1e6b      	subs	r3, r5, #1
 80098f8:	9304      	str	r3, [sp, #16]
 80098fa:	bf43      	ittte	mi
 80098fc:	2300      	movmi	r3, #0
 80098fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8009902:	9304      	strmi	r3, [sp, #16]
 8009904:	f04f 0800 	movpl.w	r8, #0
 8009908:	f1ba 0f00 	cmp.w	sl, #0
 800990c:	db3b      	blt.n	8009986 <_dtoa_r+0x23e>
 800990e:	9b04      	ldr	r3, [sp, #16]
 8009910:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009914:	4453      	add	r3, sl
 8009916:	9304      	str	r3, [sp, #16]
 8009918:	2300      	movs	r3, #0
 800991a:	9306      	str	r3, [sp, #24]
 800991c:	9b05      	ldr	r3, [sp, #20]
 800991e:	2b09      	cmp	r3, #9
 8009920:	d869      	bhi.n	80099f6 <_dtoa_r+0x2ae>
 8009922:	2b05      	cmp	r3, #5
 8009924:	bfc4      	itt	gt
 8009926:	3b04      	subgt	r3, #4
 8009928:	9305      	strgt	r3, [sp, #20]
 800992a:	9b05      	ldr	r3, [sp, #20]
 800992c:	f1a3 0302 	sub.w	r3, r3, #2
 8009930:	bfcc      	ite	gt
 8009932:	2500      	movgt	r5, #0
 8009934:	2501      	movle	r5, #1
 8009936:	2b03      	cmp	r3, #3
 8009938:	d869      	bhi.n	8009a0e <_dtoa_r+0x2c6>
 800993a:	e8df f003 	tbb	[pc, r3]
 800993e:	4e2c      	.short	0x4e2c
 8009940:	5a4c      	.short	0x5a4c
 8009942:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009946:	441d      	add	r5, r3
 8009948:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800994c:	2b20      	cmp	r3, #32
 800994e:	bfc1      	itttt	gt
 8009950:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009954:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009958:	fa09 f303 	lslgt.w	r3, r9, r3
 800995c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009960:	bfda      	itte	le
 8009962:	f1c3 0320 	rsble	r3, r3, #32
 8009966:	fa06 f003 	lslle.w	r0, r6, r3
 800996a:	4318      	orrgt	r0, r3
 800996c:	f7f6 fdd2 	bl	8000514 <__aeabi_ui2d>
 8009970:	2301      	movs	r3, #1
 8009972:	4606      	mov	r6, r0
 8009974:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009978:	3d01      	subs	r5, #1
 800997a:	9310      	str	r3, [sp, #64]	; 0x40
 800997c:	e771      	b.n	8009862 <_dtoa_r+0x11a>
 800997e:	2301      	movs	r3, #1
 8009980:	e7b6      	b.n	80098f0 <_dtoa_r+0x1a8>
 8009982:	900e      	str	r0, [sp, #56]	; 0x38
 8009984:	e7b5      	b.n	80098f2 <_dtoa_r+0x1aa>
 8009986:	f1ca 0300 	rsb	r3, sl, #0
 800998a:	9306      	str	r3, [sp, #24]
 800998c:	2300      	movs	r3, #0
 800998e:	eba8 080a 	sub.w	r8, r8, sl
 8009992:	930d      	str	r3, [sp, #52]	; 0x34
 8009994:	e7c2      	b.n	800991c <_dtoa_r+0x1d4>
 8009996:	2300      	movs	r3, #0
 8009998:	9308      	str	r3, [sp, #32]
 800999a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800999c:	2b00      	cmp	r3, #0
 800999e:	dc39      	bgt.n	8009a14 <_dtoa_r+0x2cc>
 80099a0:	f04f 0901 	mov.w	r9, #1
 80099a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80099a8:	464b      	mov	r3, r9
 80099aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80099ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80099b0:	2200      	movs	r2, #0
 80099b2:	6042      	str	r2, [r0, #4]
 80099b4:	2204      	movs	r2, #4
 80099b6:	f102 0614 	add.w	r6, r2, #20
 80099ba:	429e      	cmp	r6, r3
 80099bc:	6841      	ldr	r1, [r0, #4]
 80099be:	d92f      	bls.n	8009a20 <_dtoa_r+0x2d8>
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fccb 	bl	800a35c <_Balloc>
 80099c6:	9000      	str	r0, [sp, #0]
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d14b      	bne.n	8009a64 <_dtoa_r+0x31c>
 80099cc:	4b24      	ldr	r3, [pc, #144]	; (8009a60 <_dtoa_r+0x318>)
 80099ce:	4602      	mov	r2, r0
 80099d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099d4:	e6d1      	b.n	800977a <_dtoa_r+0x32>
 80099d6:	2301      	movs	r3, #1
 80099d8:	e7de      	b.n	8009998 <_dtoa_r+0x250>
 80099da:	2300      	movs	r3, #0
 80099dc:	9308      	str	r3, [sp, #32]
 80099de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e0:	eb0a 0903 	add.w	r9, sl, r3
 80099e4:	f109 0301 	add.w	r3, r9, #1
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	bfb8      	it	lt
 80099ee:	2301      	movlt	r3, #1
 80099f0:	e7dd      	b.n	80099ae <_dtoa_r+0x266>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e7f2      	b.n	80099dc <_dtoa_r+0x294>
 80099f6:	2501      	movs	r5, #1
 80099f8:	2300      	movs	r3, #0
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	9508      	str	r5, [sp, #32]
 80099fe:	f04f 39ff 	mov.w	r9, #4294967295
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a08:	2312      	movs	r3, #18
 8009a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a0c:	e7cf      	b.n	80099ae <_dtoa_r+0x266>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	9308      	str	r3, [sp, #32]
 8009a12:	e7f4      	b.n	80099fe <_dtoa_r+0x2b6>
 8009a14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009a18:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a1c:	464b      	mov	r3, r9
 8009a1e:	e7c6      	b.n	80099ae <_dtoa_r+0x266>
 8009a20:	3101      	adds	r1, #1
 8009a22:	6041      	str	r1, [r0, #4]
 8009a24:	0052      	lsls	r2, r2, #1
 8009a26:	e7c6      	b.n	80099b6 <_dtoa_r+0x26e>
 8009a28:	636f4361 	.word	0x636f4361
 8009a2c:	3fd287a7 	.word	0x3fd287a7
 8009a30:	8b60c8b3 	.word	0x8b60c8b3
 8009a34:	3fc68a28 	.word	0x3fc68a28
 8009a38:	509f79fb 	.word	0x509f79fb
 8009a3c:	3fd34413 	.word	0x3fd34413
 8009a40:	0800d20d 	.word	0x0800d20d
 8009a44:	0800d224 	.word	0x0800d224
 8009a48:	7ff00000 	.word	0x7ff00000
 8009a4c:	0800d209 	.word	0x0800d209
 8009a50:	0800d200 	.word	0x0800d200
 8009a54:	0800d1dd 	.word	0x0800d1dd
 8009a58:	3ff80000 	.word	0x3ff80000
 8009a5c:	0800d320 	.word	0x0800d320
 8009a60:	0800d283 	.word	0x0800d283
 8009a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a66:	9a00      	ldr	r2, [sp, #0]
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	2b0e      	cmp	r3, #14
 8009a6e:	f200 80ad 	bhi.w	8009bcc <_dtoa_r+0x484>
 8009a72:	2d00      	cmp	r5, #0
 8009a74:	f000 80aa 	beq.w	8009bcc <_dtoa_r+0x484>
 8009a78:	f1ba 0f00 	cmp.w	sl, #0
 8009a7c:	dd36      	ble.n	8009aec <_dtoa_r+0x3a4>
 8009a7e:	4ac3      	ldr	r2, [pc, #780]	; (8009d8c <_dtoa_r+0x644>)
 8009a80:	f00a 030f 	and.w	r3, sl, #15
 8009a84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a88:	ed93 7b00 	vldr	d7, [r3]
 8009a8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009a90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009a94:	eeb0 8a47 	vmov.f32	s16, s14
 8009a98:	eef0 8a67 	vmov.f32	s17, s15
 8009a9c:	d016      	beq.n	8009acc <_dtoa_r+0x384>
 8009a9e:	4bbc      	ldr	r3, [pc, #752]	; (8009d90 <_dtoa_r+0x648>)
 8009aa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009aa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009aa8:	f7f6 fed8 	bl	800085c <__aeabi_ddiv>
 8009aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ab0:	f007 070f 	and.w	r7, r7, #15
 8009ab4:	2503      	movs	r5, #3
 8009ab6:	4eb6      	ldr	r6, [pc, #728]	; (8009d90 <_dtoa_r+0x648>)
 8009ab8:	b957      	cbnz	r7, 8009ad0 <_dtoa_r+0x388>
 8009aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009abe:	ec53 2b18 	vmov	r2, r3, d8
 8009ac2:	f7f6 fecb 	bl	800085c <__aeabi_ddiv>
 8009ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aca:	e029      	b.n	8009b20 <_dtoa_r+0x3d8>
 8009acc:	2502      	movs	r5, #2
 8009ace:	e7f2      	b.n	8009ab6 <_dtoa_r+0x36e>
 8009ad0:	07f9      	lsls	r1, r7, #31
 8009ad2:	d508      	bpl.n	8009ae6 <_dtoa_r+0x39e>
 8009ad4:	ec51 0b18 	vmov	r0, r1, d8
 8009ad8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009adc:	f7f6 fd94 	bl	8000608 <__aeabi_dmul>
 8009ae0:	ec41 0b18 	vmov	d8, r0, r1
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	107f      	asrs	r7, r7, #1
 8009ae8:	3608      	adds	r6, #8
 8009aea:	e7e5      	b.n	8009ab8 <_dtoa_r+0x370>
 8009aec:	f000 80a6 	beq.w	8009c3c <_dtoa_r+0x4f4>
 8009af0:	f1ca 0600 	rsb	r6, sl, #0
 8009af4:	4ba5      	ldr	r3, [pc, #660]	; (8009d8c <_dtoa_r+0x644>)
 8009af6:	4fa6      	ldr	r7, [pc, #664]	; (8009d90 <_dtoa_r+0x648>)
 8009af8:	f006 020f 	and.w	r2, r6, #15
 8009afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b08:	f7f6 fd7e 	bl	8000608 <__aeabi_dmul>
 8009b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b10:	1136      	asrs	r6, r6, #4
 8009b12:	2300      	movs	r3, #0
 8009b14:	2502      	movs	r5, #2
 8009b16:	2e00      	cmp	r6, #0
 8009b18:	f040 8085 	bne.w	8009c26 <_dtoa_r+0x4de>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1d2      	bne.n	8009ac6 <_dtoa_r+0x37e>
 8009b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 808c 	beq.w	8009c40 <_dtoa_r+0x4f8>
 8009b28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b2c:	4b99      	ldr	r3, [pc, #612]	; (8009d94 <_dtoa_r+0x64c>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f6 ffda 	bl	8000aec <__aeabi_dcmplt>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	f000 8081 	beq.w	8009c40 <_dtoa_r+0x4f8>
 8009b3e:	9b01      	ldr	r3, [sp, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d07d      	beq.n	8009c40 <_dtoa_r+0x4f8>
 8009b44:	f1b9 0f00 	cmp.w	r9, #0
 8009b48:	dd3c      	ble.n	8009bc4 <_dtoa_r+0x47c>
 8009b4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009b4e:	9307      	str	r3, [sp, #28]
 8009b50:	2200      	movs	r2, #0
 8009b52:	4b91      	ldr	r3, [pc, #580]	; (8009d98 <_dtoa_r+0x650>)
 8009b54:	4630      	mov	r0, r6
 8009b56:	4639      	mov	r1, r7
 8009b58:	f7f6 fd56 	bl	8000608 <__aeabi_dmul>
 8009b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b60:	3501      	adds	r5, #1
 8009b62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009b66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f7f6 fce2 	bl	8000534 <__aeabi_i2d>
 8009b70:	4632      	mov	r2, r6
 8009b72:	463b      	mov	r3, r7
 8009b74:	f7f6 fd48 	bl	8000608 <__aeabi_dmul>
 8009b78:	4b88      	ldr	r3, [pc, #544]	; (8009d9c <_dtoa_r+0x654>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f7f6 fb8e 	bl	800029c <__adddf3>
 8009b80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b88:	9303      	str	r3, [sp, #12]
 8009b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d15c      	bne.n	8009c4a <_dtoa_r+0x502>
 8009b90:	4b83      	ldr	r3, [pc, #524]	; (8009da0 <_dtoa_r+0x658>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	4630      	mov	r0, r6
 8009b96:	4639      	mov	r1, r7
 8009b98:	f7f6 fb7e 	bl	8000298 <__aeabi_dsub>
 8009b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	460f      	mov	r7, r1
 8009ba4:	f7f6 ffc0 	bl	8000b28 <__aeabi_dcmpgt>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f040 8296 	bne.w	800a0da <_dtoa_r+0x992>
 8009bae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bb8:	4639      	mov	r1, r7
 8009bba:	f7f6 ff97 	bl	8000aec <__aeabi_dcmplt>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	f040 8288 	bne.w	800a0d4 <_dtoa_r+0x98c>
 8009bc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f2c0 8158 	blt.w	8009e84 <_dtoa_r+0x73c>
 8009bd4:	f1ba 0f0e 	cmp.w	sl, #14
 8009bd8:	f300 8154 	bgt.w	8009e84 <_dtoa_r+0x73c>
 8009bdc:	4b6b      	ldr	r3, [pc, #428]	; (8009d8c <_dtoa_r+0x644>)
 8009bde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009be2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f280 80e3 	bge.w	8009db4 <_dtoa_r+0x66c>
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f300 80df 	bgt.w	8009db4 <_dtoa_r+0x66c>
 8009bf6:	f040 826d 	bne.w	800a0d4 <_dtoa_r+0x98c>
 8009bfa:	4b69      	ldr	r3, [pc, #420]	; (8009da0 <_dtoa_r+0x658>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	4640      	mov	r0, r8
 8009c00:	4649      	mov	r1, r9
 8009c02:	f7f6 fd01 	bl	8000608 <__aeabi_dmul>
 8009c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c0a:	f7f6 ff83 	bl	8000b14 <__aeabi_dcmpge>
 8009c0e:	9e01      	ldr	r6, [sp, #4]
 8009c10:	4637      	mov	r7, r6
 8009c12:	2800      	cmp	r0, #0
 8009c14:	f040 8243 	bne.w	800a09e <_dtoa_r+0x956>
 8009c18:	9d00      	ldr	r5, [sp, #0]
 8009c1a:	2331      	movs	r3, #49	; 0x31
 8009c1c:	f805 3b01 	strb.w	r3, [r5], #1
 8009c20:	f10a 0a01 	add.w	sl, sl, #1
 8009c24:	e23f      	b.n	800a0a6 <_dtoa_r+0x95e>
 8009c26:	07f2      	lsls	r2, r6, #31
 8009c28:	d505      	bpl.n	8009c36 <_dtoa_r+0x4ee>
 8009c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c2e:	f7f6 fceb 	bl	8000608 <__aeabi_dmul>
 8009c32:	3501      	adds	r5, #1
 8009c34:	2301      	movs	r3, #1
 8009c36:	1076      	asrs	r6, r6, #1
 8009c38:	3708      	adds	r7, #8
 8009c3a:	e76c      	b.n	8009b16 <_dtoa_r+0x3ce>
 8009c3c:	2502      	movs	r5, #2
 8009c3e:	e76f      	b.n	8009b20 <_dtoa_r+0x3d8>
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	f8cd a01c 	str.w	sl, [sp, #28]
 8009c46:	930c      	str	r3, [sp, #48]	; 0x30
 8009c48:	e78d      	b.n	8009b66 <_dtoa_r+0x41e>
 8009c4a:	9900      	ldr	r1, [sp, #0]
 8009c4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c50:	4b4e      	ldr	r3, [pc, #312]	; (8009d8c <_dtoa_r+0x644>)
 8009c52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c56:	4401      	add	r1, r0
 8009c58:	9102      	str	r1, [sp, #8]
 8009c5a:	9908      	ldr	r1, [sp, #32]
 8009c5c:	eeb0 8a47 	vmov.f32	s16, s14
 8009c60:	eef0 8a67 	vmov.f32	s17, s15
 8009c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	d045      	beq.n	8009cfc <_dtoa_r+0x5b4>
 8009c70:	494c      	ldr	r1, [pc, #304]	; (8009da4 <_dtoa_r+0x65c>)
 8009c72:	2000      	movs	r0, #0
 8009c74:	f7f6 fdf2 	bl	800085c <__aeabi_ddiv>
 8009c78:	ec53 2b18 	vmov	r2, r3, d8
 8009c7c:	f7f6 fb0c 	bl	8000298 <__aeabi_dsub>
 8009c80:	9d00      	ldr	r5, [sp, #0]
 8009c82:	ec41 0b18 	vmov	d8, r0, r1
 8009c86:	4639      	mov	r1, r7
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7f6 ff6d 	bl	8000b68 <__aeabi_d2iz>
 8009c8e:	900c      	str	r0, [sp, #48]	; 0x30
 8009c90:	f7f6 fc50 	bl	8000534 <__aeabi_i2d>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7f6 fafc 	bl	8000298 <__aeabi_dsub>
 8009ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ca2:	3330      	adds	r3, #48	; 0x30
 8009ca4:	f805 3b01 	strb.w	r3, [r5], #1
 8009ca8:	ec53 2b18 	vmov	r2, r3, d8
 8009cac:	4606      	mov	r6, r0
 8009cae:	460f      	mov	r7, r1
 8009cb0:	f7f6 ff1c 	bl	8000aec <__aeabi_dcmplt>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d165      	bne.n	8009d84 <_dtoa_r+0x63c>
 8009cb8:	4632      	mov	r2, r6
 8009cba:	463b      	mov	r3, r7
 8009cbc:	4935      	ldr	r1, [pc, #212]	; (8009d94 <_dtoa_r+0x64c>)
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	f7f6 faea 	bl	8000298 <__aeabi_dsub>
 8009cc4:	ec53 2b18 	vmov	r2, r3, d8
 8009cc8:	f7f6 ff10 	bl	8000aec <__aeabi_dcmplt>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	f040 80b9 	bne.w	8009e44 <_dtoa_r+0x6fc>
 8009cd2:	9b02      	ldr	r3, [sp, #8]
 8009cd4:	429d      	cmp	r5, r3
 8009cd6:	f43f af75 	beq.w	8009bc4 <_dtoa_r+0x47c>
 8009cda:	4b2f      	ldr	r3, [pc, #188]	; (8009d98 <_dtoa_r+0x650>)
 8009cdc:	ec51 0b18 	vmov	r0, r1, d8
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f7f6 fc91 	bl	8000608 <__aeabi_dmul>
 8009ce6:	4b2c      	ldr	r3, [pc, #176]	; (8009d98 <_dtoa_r+0x650>)
 8009ce8:	ec41 0b18 	vmov	d8, r0, r1
 8009cec:	2200      	movs	r2, #0
 8009cee:	4630      	mov	r0, r6
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	f7f6 fc89 	bl	8000608 <__aeabi_dmul>
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	460f      	mov	r7, r1
 8009cfa:	e7c4      	b.n	8009c86 <_dtoa_r+0x53e>
 8009cfc:	ec51 0b17 	vmov	r0, r1, d7
 8009d00:	f7f6 fc82 	bl	8000608 <__aeabi_dmul>
 8009d04:	9b02      	ldr	r3, [sp, #8]
 8009d06:	9d00      	ldr	r5, [sp, #0]
 8009d08:	930c      	str	r3, [sp, #48]	; 0x30
 8009d0a:	ec41 0b18 	vmov	d8, r0, r1
 8009d0e:	4639      	mov	r1, r7
 8009d10:	4630      	mov	r0, r6
 8009d12:	f7f6 ff29 	bl	8000b68 <__aeabi_d2iz>
 8009d16:	9011      	str	r0, [sp, #68]	; 0x44
 8009d18:	f7f6 fc0c 	bl	8000534 <__aeabi_i2d>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f6 fab8 	bl	8000298 <__aeabi_dsub>
 8009d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d2a:	3330      	adds	r3, #48	; 0x30
 8009d2c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d30:	9b02      	ldr	r3, [sp, #8]
 8009d32:	429d      	cmp	r5, r3
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	f04f 0200 	mov.w	r2, #0
 8009d3c:	d134      	bne.n	8009da8 <_dtoa_r+0x660>
 8009d3e:	4b19      	ldr	r3, [pc, #100]	; (8009da4 <_dtoa_r+0x65c>)
 8009d40:	ec51 0b18 	vmov	r0, r1, d8
 8009d44:	f7f6 faaa 	bl	800029c <__adddf3>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	4639      	mov	r1, r7
 8009d50:	f7f6 feea 	bl	8000b28 <__aeabi_dcmpgt>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d175      	bne.n	8009e44 <_dtoa_r+0x6fc>
 8009d58:	ec53 2b18 	vmov	r2, r3, d8
 8009d5c:	4911      	ldr	r1, [pc, #68]	; (8009da4 <_dtoa_r+0x65c>)
 8009d5e:	2000      	movs	r0, #0
 8009d60:	f7f6 fa9a 	bl	8000298 <__aeabi_dsub>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4630      	mov	r0, r6
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	f7f6 febe 	bl	8000aec <__aeabi_dcmplt>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	f43f af27 	beq.w	8009bc4 <_dtoa_r+0x47c>
 8009d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d78:	1e6b      	subs	r3, r5, #1
 8009d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8009d7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d80:	2b30      	cmp	r3, #48	; 0x30
 8009d82:	d0f8      	beq.n	8009d76 <_dtoa_r+0x62e>
 8009d84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d88:	e04a      	b.n	8009e20 <_dtoa_r+0x6d8>
 8009d8a:	bf00      	nop
 8009d8c:	0800d320 	.word	0x0800d320
 8009d90:	0800d2f8 	.word	0x0800d2f8
 8009d94:	3ff00000 	.word	0x3ff00000
 8009d98:	40240000 	.word	0x40240000
 8009d9c:	401c0000 	.word	0x401c0000
 8009da0:	40140000 	.word	0x40140000
 8009da4:	3fe00000 	.word	0x3fe00000
 8009da8:	4baf      	ldr	r3, [pc, #700]	; (800a068 <_dtoa_r+0x920>)
 8009daa:	f7f6 fc2d 	bl	8000608 <__aeabi_dmul>
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	e7ac      	b.n	8009d0e <_dtoa_r+0x5c6>
 8009db4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009db8:	9d00      	ldr	r5, [sp, #0]
 8009dba:	4642      	mov	r2, r8
 8009dbc:	464b      	mov	r3, r9
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	f7f6 fd4b 	bl	800085c <__aeabi_ddiv>
 8009dc6:	f7f6 fecf 	bl	8000b68 <__aeabi_d2iz>
 8009dca:	9002      	str	r0, [sp, #8]
 8009dcc:	f7f6 fbb2 	bl	8000534 <__aeabi_i2d>
 8009dd0:	4642      	mov	r2, r8
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	f7f6 fc18 	bl	8000608 <__aeabi_dmul>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4630      	mov	r0, r6
 8009dde:	4639      	mov	r1, r7
 8009de0:	f7f6 fa5a 	bl	8000298 <__aeabi_dsub>
 8009de4:	9e02      	ldr	r6, [sp, #8]
 8009de6:	9f01      	ldr	r7, [sp, #4]
 8009de8:	3630      	adds	r6, #48	; 0x30
 8009dea:	f805 6b01 	strb.w	r6, [r5], #1
 8009dee:	9e00      	ldr	r6, [sp, #0]
 8009df0:	1bae      	subs	r6, r5, r6
 8009df2:	42b7      	cmp	r7, r6
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	d137      	bne.n	8009e6a <_dtoa_r+0x722>
 8009dfa:	f7f6 fa4f 	bl	800029c <__adddf3>
 8009dfe:	4642      	mov	r2, r8
 8009e00:	464b      	mov	r3, r9
 8009e02:	4606      	mov	r6, r0
 8009e04:	460f      	mov	r7, r1
 8009e06:	f7f6 fe8f 	bl	8000b28 <__aeabi_dcmpgt>
 8009e0a:	b9c8      	cbnz	r0, 8009e40 <_dtoa_r+0x6f8>
 8009e0c:	4642      	mov	r2, r8
 8009e0e:	464b      	mov	r3, r9
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	f7f6 fe60 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e18:	b110      	cbz	r0, 8009e20 <_dtoa_r+0x6d8>
 8009e1a:	9b02      	ldr	r3, [sp, #8]
 8009e1c:	07d9      	lsls	r1, r3, #31
 8009e1e:	d40f      	bmi.n	8009e40 <_dtoa_r+0x6f8>
 8009e20:	4620      	mov	r0, r4
 8009e22:	4659      	mov	r1, fp
 8009e24:	f000 fada 	bl	800a3dc <_Bfree>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	702b      	strb	r3, [r5, #0]
 8009e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e2e:	f10a 0001 	add.w	r0, sl, #1
 8009e32:	6018      	str	r0, [r3, #0]
 8009e34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f43f acd8 	beq.w	80097ec <_dtoa_r+0xa4>
 8009e3c:	601d      	str	r5, [r3, #0]
 8009e3e:	e4d5      	b.n	80097ec <_dtoa_r+0xa4>
 8009e40:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e44:	462b      	mov	r3, r5
 8009e46:	461d      	mov	r5, r3
 8009e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e4c:	2a39      	cmp	r2, #57	; 0x39
 8009e4e:	d108      	bne.n	8009e62 <_dtoa_r+0x71a>
 8009e50:	9a00      	ldr	r2, [sp, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d1f7      	bne.n	8009e46 <_dtoa_r+0x6fe>
 8009e56:	9a07      	ldr	r2, [sp, #28]
 8009e58:	9900      	ldr	r1, [sp, #0]
 8009e5a:	3201      	adds	r2, #1
 8009e5c:	9207      	str	r2, [sp, #28]
 8009e5e:	2230      	movs	r2, #48	; 0x30
 8009e60:	700a      	strb	r2, [r1, #0]
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	3201      	adds	r2, #1
 8009e66:	701a      	strb	r2, [r3, #0]
 8009e68:	e78c      	b.n	8009d84 <_dtoa_r+0x63c>
 8009e6a:	4b7f      	ldr	r3, [pc, #508]	; (800a068 <_dtoa_r+0x920>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f7f6 fbcb 	bl	8000608 <__aeabi_dmul>
 8009e72:	2200      	movs	r2, #0
 8009e74:	2300      	movs	r3, #0
 8009e76:	4606      	mov	r6, r0
 8009e78:	460f      	mov	r7, r1
 8009e7a:	f7f6 fe2d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d09b      	beq.n	8009dba <_dtoa_r+0x672>
 8009e82:	e7cd      	b.n	8009e20 <_dtoa_r+0x6d8>
 8009e84:	9a08      	ldr	r2, [sp, #32]
 8009e86:	2a00      	cmp	r2, #0
 8009e88:	f000 80c4 	beq.w	800a014 <_dtoa_r+0x8cc>
 8009e8c:	9a05      	ldr	r2, [sp, #20]
 8009e8e:	2a01      	cmp	r2, #1
 8009e90:	f300 80a8 	bgt.w	8009fe4 <_dtoa_r+0x89c>
 8009e94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e96:	2a00      	cmp	r2, #0
 8009e98:	f000 80a0 	beq.w	8009fdc <_dtoa_r+0x894>
 8009e9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ea0:	9e06      	ldr	r6, [sp, #24]
 8009ea2:	4645      	mov	r5, r8
 8009ea4:	9a04      	ldr	r2, [sp, #16]
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	441a      	add	r2, r3
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4498      	add	r8, r3
 8009eae:	9204      	str	r2, [sp, #16]
 8009eb0:	f000 fb50 	bl	800a554 <__i2b>
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	2d00      	cmp	r5, #0
 8009eb8:	dd0b      	ble.n	8009ed2 <_dtoa_r+0x78a>
 8009eba:	9b04      	ldr	r3, [sp, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dd08      	ble.n	8009ed2 <_dtoa_r+0x78a>
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	9a04      	ldr	r2, [sp, #16]
 8009ec4:	bfa8      	it	ge
 8009ec6:	462b      	movge	r3, r5
 8009ec8:	eba8 0803 	sub.w	r8, r8, r3
 8009ecc:	1aed      	subs	r5, r5, r3
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	9304      	str	r3, [sp, #16]
 8009ed2:	9b06      	ldr	r3, [sp, #24]
 8009ed4:	b1fb      	cbz	r3, 8009f16 <_dtoa_r+0x7ce>
 8009ed6:	9b08      	ldr	r3, [sp, #32]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 809f 	beq.w	800a01c <_dtoa_r+0x8d4>
 8009ede:	2e00      	cmp	r6, #0
 8009ee0:	dd11      	ble.n	8009f06 <_dtoa_r+0x7be>
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f000 fbf0 	bl	800a6cc <__pow5mult>
 8009eec:	465a      	mov	r2, fp
 8009eee:	4601      	mov	r1, r0
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 fb44 	bl	800a580 <__multiply>
 8009ef8:	4659      	mov	r1, fp
 8009efa:	9007      	str	r0, [sp, #28]
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 fa6d 	bl	800a3dc <_Bfree>
 8009f02:	9b07      	ldr	r3, [sp, #28]
 8009f04:	469b      	mov	fp, r3
 8009f06:	9b06      	ldr	r3, [sp, #24]
 8009f08:	1b9a      	subs	r2, r3, r6
 8009f0a:	d004      	beq.n	8009f16 <_dtoa_r+0x7ce>
 8009f0c:	4659      	mov	r1, fp
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 fbdc 	bl	800a6cc <__pow5mult>
 8009f14:	4683      	mov	fp, r0
 8009f16:	2101      	movs	r1, #1
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 fb1b 	bl	800a554 <__i2b>
 8009f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	4606      	mov	r6, r0
 8009f24:	dd7c      	ble.n	800a020 <_dtoa_r+0x8d8>
 8009f26:	461a      	mov	r2, r3
 8009f28:	4601      	mov	r1, r0
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 fbce 	bl	800a6cc <__pow5mult>
 8009f30:	9b05      	ldr	r3, [sp, #20]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	4606      	mov	r6, r0
 8009f36:	dd76      	ble.n	800a026 <_dtoa_r+0x8de>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9306      	str	r3, [sp, #24]
 8009f3c:	6933      	ldr	r3, [r6, #16]
 8009f3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f42:	6918      	ldr	r0, [r3, #16]
 8009f44:	f000 fab6 	bl	800a4b4 <__hi0bits>
 8009f48:	f1c0 0020 	rsb	r0, r0, #32
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	4418      	add	r0, r3
 8009f50:	f010 001f 	ands.w	r0, r0, #31
 8009f54:	f000 8086 	beq.w	800a064 <_dtoa_r+0x91c>
 8009f58:	f1c0 0320 	rsb	r3, r0, #32
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	dd7f      	ble.n	800a060 <_dtoa_r+0x918>
 8009f60:	f1c0 001c 	rsb	r0, r0, #28
 8009f64:	9b04      	ldr	r3, [sp, #16]
 8009f66:	4403      	add	r3, r0
 8009f68:	4480      	add	r8, r0
 8009f6a:	4405      	add	r5, r0
 8009f6c:	9304      	str	r3, [sp, #16]
 8009f6e:	f1b8 0f00 	cmp.w	r8, #0
 8009f72:	dd05      	ble.n	8009f80 <_dtoa_r+0x838>
 8009f74:	4659      	mov	r1, fp
 8009f76:	4642      	mov	r2, r8
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 fc01 	bl	800a780 <__lshift>
 8009f7e:	4683      	mov	fp, r0
 8009f80:	9b04      	ldr	r3, [sp, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	dd05      	ble.n	8009f92 <_dtoa_r+0x84a>
 8009f86:	4631      	mov	r1, r6
 8009f88:	461a      	mov	r2, r3
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 fbf8 	bl	800a780 <__lshift>
 8009f90:	4606      	mov	r6, r0
 8009f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d069      	beq.n	800a06c <_dtoa_r+0x924>
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4658      	mov	r0, fp
 8009f9c:	f000 fc5c 	bl	800a858 <__mcmp>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	da63      	bge.n	800a06c <_dtoa_r+0x924>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4659      	mov	r1, fp
 8009fa8:	220a      	movs	r2, #10
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 fa38 	bl	800a420 <__multadd>
 8009fb0:	9b08      	ldr	r3, [sp, #32]
 8009fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fb6:	4683      	mov	fp, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 818f 	beq.w	800a2dc <_dtoa_r+0xb94>
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	220a      	movs	r2, #10
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fa2b 	bl	800a420 <__multadd>
 8009fca:	f1b9 0f00 	cmp.w	r9, #0
 8009fce:	4607      	mov	r7, r0
 8009fd0:	f300 808e 	bgt.w	800a0f0 <_dtoa_r+0x9a8>
 8009fd4:	9b05      	ldr	r3, [sp, #20]
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	dc50      	bgt.n	800a07c <_dtoa_r+0x934>
 8009fda:	e089      	b.n	800a0f0 <_dtoa_r+0x9a8>
 8009fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fe2:	e75d      	b.n	8009ea0 <_dtoa_r+0x758>
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	1e5e      	subs	r6, r3, #1
 8009fe8:	9b06      	ldr	r3, [sp, #24]
 8009fea:	42b3      	cmp	r3, r6
 8009fec:	bfbf      	itttt	lt
 8009fee:	9b06      	ldrlt	r3, [sp, #24]
 8009ff0:	9606      	strlt	r6, [sp, #24]
 8009ff2:	1af2      	sublt	r2, r6, r3
 8009ff4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009ff6:	bfb6      	itet	lt
 8009ff8:	189b      	addlt	r3, r3, r2
 8009ffa:	1b9e      	subge	r6, r3, r6
 8009ffc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009ffe:	9b01      	ldr	r3, [sp, #4]
 800a000:	bfb8      	it	lt
 800a002:	2600      	movlt	r6, #0
 800a004:	2b00      	cmp	r3, #0
 800a006:	bfb5      	itete	lt
 800a008:	eba8 0503 	sublt.w	r5, r8, r3
 800a00c:	9b01      	ldrge	r3, [sp, #4]
 800a00e:	2300      	movlt	r3, #0
 800a010:	4645      	movge	r5, r8
 800a012:	e747      	b.n	8009ea4 <_dtoa_r+0x75c>
 800a014:	9e06      	ldr	r6, [sp, #24]
 800a016:	9f08      	ldr	r7, [sp, #32]
 800a018:	4645      	mov	r5, r8
 800a01a:	e74c      	b.n	8009eb6 <_dtoa_r+0x76e>
 800a01c:	9a06      	ldr	r2, [sp, #24]
 800a01e:	e775      	b.n	8009f0c <_dtoa_r+0x7c4>
 800a020:	9b05      	ldr	r3, [sp, #20]
 800a022:	2b01      	cmp	r3, #1
 800a024:	dc18      	bgt.n	800a058 <_dtoa_r+0x910>
 800a026:	9b02      	ldr	r3, [sp, #8]
 800a028:	b9b3      	cbnz	r3, 800a058 <_dtoa_r+0x910>
 800a02a:	9b03      	ldr	r3, [sp, #12]
 800a02c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a030:	b9a3      	cbnz	r3, 800a05c <_dtoa_r+0x914>
 800a032:	9b03      	ldr	r3, [sp, #12]
 800a034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a038:	0d1b      	lsrs	r3, r3, #20
 800a03a:	051b      	lsls	r3, r3, #20
 800a03c:	b12b      	cbz	r3, 800a04a <_dtoa_r+0x902>
 800a03e:	9b04      	ldr	r3, [sp, #16]
 800a040:	3301      	adds	r3, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	f108 0801 	add.w	r8, r8, #1
 800a048:	2301      	movs	r3, #1
 800a04a:	9306      	str	r3, [sp, #24]
 800a04c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f47f af74 	bne.w	8009f3c <_dtoa_r+0x7f4>
 800a054:	2001      	movs	r0, #1
 800a056:	e779      	b.n	8009f4c <_dtoa_r+0x804>
 800a058:	2300      	movs	r3, #0
 800a05a:	e7f6      	b.n	800a04a <_dtoa_r+0x902>
 800a05c:	9b02      	ldr	r3, [sp, #8]
 800a05e:	e7f4      	b.n	800a04a <_dtoa_r+0x902>
 800a060:	d085      	beq.n	8009f6e <_dtoa_r+0x826>
 800a062:	4618      	mov	r0, r3
 800a064:	301c      	adds	r0, #28
 800a066:	e77d      	b.n	8009f64 <_dtoa_r+0x81c>
 800a068:	40240000 	.word	0x40240000
 800a06c:	9b01      	ldr	r3, [sp, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dc38      	bgt.n	800a0e4 <_dtoa_r+0x99c>
 800a072:	9b05      	ldr	r3, [sp, #20]
 800a074:	2b02      	cmp	r3, #2
 800a076:	dd35      	ble.n	800a0e4 <_dtoa_r+0x99c>
 800a078:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a07c:	f1b9 0f00 	cmp.w	r9, #0
 800a080:	d10d      	bne.n	800a09e <_dtoa_r+0x956>
 800a082:	4631      	mov	r1, r6
 800a084:	464b      	mov	r3, r9
 800a086:	2205      	movs	r2, #5
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 f9c9 	bl	800a420 <__multadd>
 800a08e:	4601      	mov	r1, r0
 800a090:	4606      	mov	r6, r0
 800a092:	4658      	mov	r0, fp
 800a094:	f000 fbe0 	bl	800a858 <__mcmp>
 800a098:	2800      	cmp	r0, #0
 800a09a:	f73f adbd 	bgt.w	8009c18 <_dtoa_r+0x4d0>
 800a09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a0:	9d00      	ldr	r5, [sp, #0]
 800a0a2:	ea6f 0a03 	mvn.w	sl, r3
 800a0a6:	f04f 0800 	mov.w	r8, #0
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 f995 	bl	800a3dc <_Bfree>
 800a0b2:	2f00      	cmp	r7, #0
 800a0b4:	f43f aeb4 	beq.w	8009e20 <_dtoa_r+0x6d8>
 800a0b8:	f1b8 0f00 	cmp.w	r8, #0
 800a0bc:	d005      	beq.n	800a0ca <_dtoa_r+0x982>
 800a0be:	45b8      	cmp	r8, r7
 800a0c0:	d003      	beq.n	800a0ca <_dtoa_r+0x982>
 800a0c2:	4641      	mov	r1, r8
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f000 f989 	bl	800a3dc <_Bfree>
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 f985 	bl	800a3dc <_Bfree>
 800a0d2:	e6a5      	b.n	8009e20 <_dtoa_r+0x6d8>
 800a0d4:	2600      	movs	r6, #0
 800a0d6:	4637      	mov	r7, r6
 800a0d8:	e7e1      	b.n	800a09e <_dtoa_r+0x956>
 800a0da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a0dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a0e0:	4637      	mov	r7, r6
 800a0e2:	e599      	b.n	8009c18 <_dtoa_r+0x4d0>
 800a0e4:	9b08      	ldr	r3, [sp, #32]
 800a0e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 80fd 	beq.w	800a2ea <_dtoa_r+0xba2>
 800a0f0:	2d00      	cmp	r5, #0
 800a0f2:	dd05      	ble.n	800a100 <_dtoa_r+0x9b8>
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	462a      	mov	r2, r5
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 fb41 	bl	800a780 <__lshift>
 800a0fe:	4607      	mov	r7, r0
 800a100:	9b06      	ldr	r3, [sp, #24]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d05c      	beq.n	800a1c0 <_dtoa_r+0xa78>
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 f927 	bl	800a35c <_Balloc>
 800a10e:	4605      	mov	r5, r0
 800a110:	b928      	cbnz	r0, 800a11e <_dtoa_r+0x9d6>
 800a112:	4b80      	ldr	r3, [pc, #512]	; (800a314 <_dtoa_r+0xbcc>)
 800a114:	4602      	mov	r2, r0
 800a116:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a11a:	f7ff bb2e 	b.w	800977a <_dtoa_r+0x32>
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	3202      	adds	r2, #2
 800a122:	0092      	lsls	r2, r2, #2
 800a124:	f107 010c 	add.w	r1, r7, #12
 800a128:	300c      	adds	r0, #12
 800a12a:	f000 f8fd 	bl	800a328 <memcpy>
 800a12e:	2201      	movs	r2, #1
 800a130:	4629      	mov	r1, r5
 800a132:	4620      	mov	r0, r4
 800a134:	f000 fb24 	bl	800a780 <__lshift>
 800a138:	9b00      	ldr	r3, [sp, #0]
 800a13a:	3301      	adds	r3, #1
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	9b00      	ldr	r3, [sp, #0]
 800a140:	444b      	add	r3, r9
 800a142:	9307      	str	r3, [sp, #28]
 800a144:	9b02      	ldr	r3, [sp, #8]
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	46b8      	mov	r8, r7
 800a14c:	9306      	str	r3, [sp, #24]
 800a14e:	4607      	mov	r7, r0
 800a150:	9b01      	ldr	r3, [sp, #4]
 800a152:	4631      	mov	r1, r6
 800a154:	3b01      	subs	r3, #1
 800a156:	4658      	mov	r0, fp
 800a158:	9302      	str	r3, [sp, #8]
 800a15a:	f7ff fa67 	bl	800962c <quorem>
 800a15e:	4603      	mov	r3, r0
 800a160:	3330      	adds	r3, #48	; 0x30
 800a162:	9004      	str	r0, [sp, #16]
 800a164:	4641      	mov	r1, r8
 800a166:	4658      	mov	r0, fp
 800a168:	9308      	str	r3, [sp, #32]
 800a16a:	f000 fb75 	bl	800a858 <__mcmp>
 800a16e:	463a      	mov	r2, r7
 800a170:	4681      	mov	r9, r0
 800a172:	4631      	mov	r1, r6
 800a174:	4620      	mov	r0, r4
 800a176:	f000 fb8b 	bl	800a890 <__mdiff>
 800a17a:	68c2      	ldr	r2, [r0, #12]
 800a17c:	9b08      	ldr	r3, [sp, #32]
 800a17e:	4605      	mov	r5, r0
 800a180:	bb02      	cbnz	r2, 800a1c4 <_dtoa_r+0xa7c>
 800a182:	4601      	mov	r1, r0
 800a184:	4658      	mov	r0, fp
 800a186:	f000 fb67 	bl	800a858 <__mcmp>
 800a18a:	9b08      	ldr	r3, [sp, #32]
 800a18c:	4602      	mov	r2, r0
 800a18e:	4629      	mov	r1, r5
 800a190:	4620      	mov	r0, r4
 800a192:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a196:	f000 f921 	bl	800a3dc <_Bfree>
 800a19a:	9b05      	ldr	r3, [sp, #20]
 800a19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a19e:	9d01      	ldr	r5, [sp, #4]
 800a1a0:	ea43 0102 	orr.w	r1, r3, r2
 800a1a4:	9b06      	ldr	r3, [sp, #24]
 800a1a6:	430b      	orrs	r3, r1
 800a1a8:	9b08      	ldr	r3, [sp, #32]
 800a1aa:	d10d      	bne.n	800a1c8 <_dtoa_r+0xa80>
 800a1ac:	2b39      	cmp	r3, #57	; 0x39
 800a1ae:	d029      	beq.n	800a204 <_dtoa_r+0xabc>
 800a1b0:	f1b9 0f00 	cmp.w	r9, #0
 800a1b4:	dd01      	ble.n	800a1ba <_dtoa_r+0xa72>
 800a1b6:	9b04      	ldr	r3, [sp, #16]
 800a1b8:	3331      	adds	r3, #49	; 0x31
 800a1ba:	9a02      	ldr	r2, [sp, #8]
 800a1bc:	7013      	strb	r3, [r2, #0]
 800a1be:	e774      	b.n	800a0aa <_dtoa_r+0x962>
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	e7b9      	b.n	800a138 <_dtoa_r+0x9f0>
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	e7e2      	b.n	800a18e <_dtoa_r+0xa46>
 800a1c8:	f1b9 0f00 	cmp.w	r9, #0
 800a1cc:	db06      	blt.n	800a1dc <_dtoa_r+0xa94>
 800a1ce:	9905      	ldr	r1, [sp, #20]
 800a1d0:	ea41 0909 	orr.w	r9, r1, r9
 800a1d4:	9906      	ldr	r1, [sp, #24]
 800a1d6:	ea59 0101 	orrs.w	r1, r9, r1
 800a1da:	d120      	bne.n	800a21e <_dtoa_r+0xad6>
 800a1dc:	2a00      	cmp	r2, #0
 800a1de:	ddec      	ble.n	800a1ba <_dtoa_r+0xa72>
 800a1e0:	4659      	mov	r1, fp
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	f000 faca 	bl	800a780 <__lshift>
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	4683      	mov	fp, r0
 800a1f0:	f000 fb32 	bl	800a858 <__mcmp>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	9b01      	ldr	r3, [sp, #4]
 800a1f8:	dc02      	bgt.n	800a200 <_dtoa_r+0xab8>
 800a1fa:	d1de      	bne.n	800a1ba <_dtoa_r+0xa72>
 800a1fc:	07da      	lsls	r2, r3, #31
 800a1fe:	d5dc      	bpl.n	800a1ba <_dtoa_r+0xa72>
 800a200:	2b39      	cmp	r3, #57	; 0x39
 800a202:	d1d8      	bne.n	800a1b6 <_dtoa_r+0xa6e>
 800a204:	9a02      	ldr	r2, [sp, #8]
 800a206:	2339      	movs	r3, #57	; 0x39
 800a208:	7013      	strb	r3, [r2, #0]
 800a20a:	462b      	mov	r3, r5
 800a20c:	461d      	mov	r5, r3
 800a20e:	3b01      	subs	r3, #1
 800a210:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a214:	2a39      	cmp	r2, #57	; 0x39
 800a216:	d050      	beq.n	800a2ba <_dtoa_r+0xb72>
 800a218:	3201      	adds	r2, #1
 800a21a:	701a      	strb	r2, [r3, #0]
 800a21c:	e745      	b.n	800a0aa <_dtoa_r+0x962>
 800a21e:	2a00      	cmp	r2, #0
 800a220:	dd03      	ble.n	800a22a <_dtoa_r+0xae2>
 800a222:	2b39      	cmp	r3, #57	; 0x39
 800a224:	d0ee      	beq.n	800a204 <_dtoa_r+0xabc>
 800a226:	3301      	adds	r3, #1
 800a228:	e7c7      	b.n	800a1ba <_dtoa_r+0xa72>
 800a22a:	9a01      	ldr	r2, [sp, #4]
 800a22c:	9907      	ldr	r1, [sp, #28]
 800a22e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a232:	428a      	cmp	r2, r1
 800a234:	d02a      	beq.n	800a28c <_dtoa_r+0xb44>
 800a236:	4659      	mov	r1, fp
 800a238:	2300      	movs	r3, #0
 800a23a:	220a      	movs	r2, #10
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 f8ef 	bl	800a420 <__multadd>
 800a242:	45b8      	cmp	r8, r7
 800a244:	4683      	mov	fp, r0
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	f04f 020a 	mov.w	r2, #10
 800a24e:	4641      	mov	r1, r8
 800a250:	4620      	mov	r0, r4
 800a252:	d107      	bne.n	800a264 <_dtoa_r+0xb1c>
 800a254:	f000 f8e4 	bl	800a420 <__multadd>
 800a258:	4680      	mov	r8, r0
 800a25a:	4607      	mov	r7, r0
 800a25c:	9b01      	ldr	r3, [sp, #4]
 800a25e:	3301      	adds	r3, #1
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	e775      	b.n	800a150 <_dtoa_r+0xa08>
 800a264:	f000 f8dc 	bl	800a420 <__multadd>
 800a268:	4639      	mov	r1, r7
 800a26a:	4680      	mov	r8, r0
 800a26c:	2300      	movs	r3, #0
 800a26e:	220a      	movs	r2, #10
 800a270:	4620      	mov	r0, r4
 800a272:	f000 f8d5 	bl	800a420 <__multadd>
 800a276:	4607      	mov	r7, r0
 800a278:	e7f0      	b.n	800a25c <_dtoa_r+0xb14>
 800a27a:	f1b9 0f00 	cmp.w	r9, #0
 800a27e:	9a00      	ldr	r2, [sp, #0]
 800a280:	bfcc      	ite	gt
 800a282:	464d      	movgt	r5, r9
 800a284:	2501      	movle	r5, #1
 800a286:	4415      	add	r5, r2
 800a288:	f04f 0800 	mov.w	r8, #0
 800a28c:	4659      	mov	r1, fp
 800a28e:	2201      	movs	r2, #1
 800a290:	4620      	mov	r0, r4
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	f000 fa74 	bl	800a780 <__lshift>
 800a298:	4631      	mov	r1, r6
 800a29a:	4683      	mov	fp, r0
 800a29c:	f000 fadc 	bl	800a858 <__mcmp>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	dcb2      	bgt.n	800a20a <_dtoa_r+0xac2>
 800a2a4:	d102      	bne.n	800a2ac <_dtoa_r+0xb64>
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	07db      	lsls	r3, r3, #31
 800a2aa:	d4ae      	bmi.n	800a20a <_dtoa_r+0xac2>
 800a2ac:	462b      	mov	r3, r5
 800a2ae:	461d      	mov	r5, r3
 800a2b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2b4:	2a30      	cmp	r2, #48	; 0x30
 800a2b6:	d0fa      	beq.n	800a2ae <_dtoa_r+0xb66>
 800a2b8:	e6f7      	b.n	800a0aa <_dtoa_r+0x962>
 800a2ba:	9a00      	ldr	r2, [sp, #0]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d1a5      	bne.n	800a20c <_dtoa_r+0xac4>
 800a2c0:	f10a 0a01 	add.w	sl, sl, #1
 800a2c4:	2331      	movs	r3, #49	; 0x31
 800a2c6:	e779      	b.n	800a1bc <_dtoa_r+0xa74>
 800a2c8:	4b13      	ldr	r3, [pc, #76]	; (800a318 <_dtoa_r+0xbd0>)
 800a2ca:	f7ff baaf 	b.w	800982c <_dtoa_r+0xe4>
 800a2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f47f aa86 	bne.w	80097e2 <_dtoa_r+0x9a>
 800a2d6:	4b11      	ldr	r3, [pc, #68]	; (800a31c <_dtoa_r+0xbd4>)
 800a2d8:	f7ff baa8 	b.w	800982c <_dtoa_r+0xe4>
 800a2dc:	f1b9 0f00 	cmp.w	r9, #0
 800a2e0:	dc03      	bgt.n	800a2ea <_dtoa_r+0xba2>
 800a2e2:	9b05      	ldr	r3, [sp, #20]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	f73f aec9 	bgt.w	800a07c <_dtoa_r+0x934>
 800a2ea:	9d00      	ldr	r5, [sp, #0]
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4658      	mov	r0, fp
 800a2f0:	f7ff f99c 	bl	800962c <quorem>
 800a2f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a2f8:	f805 3b01 	strb.w	r3, [r5], #1
 800a2fc:	9a00      	ldr	r2, [sp, #0]
 800a2fe:	1aaa      	subs	r2, r5, r2
 800a300:	4591      	cmp	r9, r2
 800a302:	ddba      	ble.n	800a27a <_dtoa_r+0xb32>
 800a304:	4659      	mov	r1, fp
 800a306:	2300      	movs	r3, #0
 800a308:	220a      	movs	r2, #10
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 f888 	bl	800a420 <__multadd>
 800a310:	4683      	mov	fp, r0
 800a312:	e7eb      	b.n	800a2ec <_dtoa_r+0xba4>
 800a314:	0800d283 	.word	0x0800d283
 800a318:	0800d1dc 	.word	0x0800d1dc
 800a31c:	0800d200 	.word	0x0800d200

0800a320 <_localeconv_r>:
 800a320:	4800      	ldr	r0, [pc, #0]	; (800a324 <_localeconv_r+0x4>)
 800a322:	4770      	bx	lr
 800a324:	20000170 	.word	0x20000170

0800a328 <memcpy>:
 800a328:	440a      	add	r2, r1
 800a32a:	4291      	cmp	r1, r2
 800a32c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a330:	d100      	bne.n	800a334 <memcpy+0xc>
 800a332:	4770      	bx	lr
 800a334:	b510      	push	{r4, lr}
 800a336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a33a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a33e:	4291      	cmp	r1, r2
 800a340:	d1f9      	bne.n	800a336 <memcpy+0xe>
 800a342:	bd10      	pop	{r4, pc}

0800a344 <__malloc_lock>:
 800a344:	4801      	ldr	r0, [pc, #4]	; (800a34c <__malloc_lock+0x8>)
 800a346:	f000 bd22 	b.w	800ad8e <__retarget_lock_acquire_recursive>
 800a34a:	bf00      	nop
 800a34c:	2000d98c 	.word	0x2000d98c

0800a350 <__malloc_unlock>:
 800a350:	4801      	ldr	r0, [pc, #4]	; (800a358 <__malloc_unlock+0x8>)
 800a352:	f000 bd1d 	b.w	800ad90 <__retarget_lock_release_recursive>
 800a356:	bf00      	nop
 800a358:	2000d98c 	.word	0x2000d98c

0800a35c <_Balloc>:
 800a35c:	b570      	push	{r4, r5, r6, lr}
 800a35e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a360:	4604      	mov	r4, r0
 800a362:	460d      	mov	r5, r1
 800a364:	b976      	cbnz	r6, 800a384 <_Balloc+0x28>
 800a366:	2010      	movs	r0, #16
 800a368:	f7fe fc0c 	bl	8008b84 <malloc>
 800a36c:	4602      	mov	r2, r0
 800a36e:	6260      	str	r0, [r4, #36]	; 0x24
 800a370:	b920      	cbnz	r0, 800a37c <_Balloc+0x20>
 800a372:	4b18      	ldr	r3, [pc, #96]	; (800a3d4 <_Balloc+0x78>)
 800a374:	4818      	ldr	r0, [pc, #96]	; (800a3d8 <_Balloc+0x7c>)
 800a376:	2166      	movs	r1, #102	; 0x66
 800a378:	f000 fcd8 	bl	800ad2c <__assert_func>
 800a37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a380:	6006      	str	r6, [r0, #0]
 800a382:	60c6      	str	r6, [r0, #12]
 800a384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a386:	68f3      	ldr	r3, [r6, #12]
 800a388:	b183      	cbz	r3, 800a3ac <_Balloc+0x50>
 800a38a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a392:	b9b8      	cbnz	r0, 800a3c4 <_Balloc+0x68>
 800a394:	2101      	movs	r1, #1
 800a396:	fa01 f605 	lsl.w	r6, r1, r5
 800a39a:	1d72      	adds	r2, r6, #5
 800a39c:	0092      	lsls	r2, r2, #2
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 fb5a 	bl	800aa58 <_calloc_r>
 800a3a4:	b160      	cbz	r0, 800a3c0 <_Balloc+0x64>
 800a3a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3aa:	e00e      	b.n	800a3ca <_Balloc+0x6e>
 800a3ac:	2221      	movs	r2, #33	; 0x21
 800a3ae:	2104      	movs	r1, #4
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 fb51 	bl	800aa58 <_calloc_r>
 800a3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b8:	60f0      	str	r0, [r6, #12]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e4      	bne.n	800a38a <_Balloc+0x2e>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	6802      	ldr	r2, [r0, #0]
 800a3c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3d0:	e7f7      	b.n	800a3c2 <_Balloc+0x66>
 800a3d2:	bf00      	nop
 800a3d4:	0800d20d 	.word	0x0800d20d
 800a3d8:	0800d294 	.word	0x0800d294

0800a3dc <_Bfree>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	b976      	cbnz	r6, 800a404 <_Bfree+0x28>
 800a3e6:	2010      	movs	r0, #16
 800a3e8:	f7fe fbcc 	bl	8008b84 <malloc>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	6268      	str	r0, [r5, #36]	; 0x24
 800a3f0:	b920      	cbnz	r0, 800a3fc <_Bfree+0x20>
 800a3f2:	4b09      	ldr	r3, [pc, #36]	; (800a418 <_Bfree+0x3c>)
 800a3f4:	4809      	ldr	r0, [pc, #36]	; (800a41c <_Bfree+0x40>)
 800a3f6:	218a      	movs	r1, #138	; 0x8a
 800a3f8:	f000 fc98 	bl	800ad2c <__assert_func>
 800a3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a400:	6006      	str	r6, [r0, #0]
 800a402:	60c6      	str	r6, [r0, #12]
 800a404:	b13c      	cbz	r4, 800a416 <_Bfree+0x3a>
 800a406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a408:	6862      	ldr	r2, [r4, #4]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a410:	6021      	str	r1, [r4, #0]
 800a412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a416:	bd70      	pop	{r4, r5, r6, pc}
 800a418:	0800d20d 	.word	0x0800d20d
 800a41c:	0800d294 	.word	0x0800d294

0800a420 <__multadd>:
 800a420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a424:	690e      	ldr	r6, [r1, #16]
 800a426:	4607      	mov	r7, r0
 800a428:	4698      	mov	r8, r3
 800a42a:	460c      	mov	r4, r1
 800a42c:	f101 0014 	add.w	r0, r1, #20
 800a430:	2300      	movs	r3, #0
 800a432:	6805      	ldr	r5, [r0, #0]
 800a434:	b2a9      	uxth	r1, r5
 800a436:	fb02 8101 	mla	r1, r2, r1, r8
 800a43a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a43e:	0c2d      	lsrs	r5, r5, #16
 800a440:	fb02 c505 	mla	r5, r2, r5, ip
 800a444:	b289      	uxth	r1, r1
 800a446:	3301      	adds	r3, #1
 800a448:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a44c:	429e      	cmp	r6, r3
 800a44e:	f840 1b04 	str.w	r1, [r0], #4
 800a452:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a456:	dcec      	bgt.n	800a432 <__multadd+0x12>
 800a458:	f1b8 0f00 	cmp.w	r8, #0
 800a45c:	d022      	beq.n	800a4a4 <__multadd+0x84>
 800a45e:	68a3      	ldr	r3, [r4, #8]
 800a460:	42b3      	cmp	r3, r6
 800a462:	dc19      	bgt.n	800a498 <__multadd+0x78>
 800a464:	6861      	ldr	r1, [r4, #4]
 800a466:	4638      	mov	r0, r7
 800a468:	3101      	adds	r1, #1
 800a46a:	f7ff ff77 	bl	800a35c <_Balloc>
 800a46e:	4605      	mov	r5, r0
 800a470:	b928      	cbnz	r0, 800a47e <__multadd+0x5e>
 800a472:	4602      	mov	r2, r0
 800a474:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <__multadd+0x8c>)
 800a476:	480e      	ldr	r0, [pc, #56]	; (800a4b0 <__multadd+0x90>)
 800a478:	21b5      	movs	r1, #181	; 0xb5
 800a47a:	f000 fc57 	bl	800ad2c <__assert_func>
 800a47e:	6922      	ldr	r2, [r4, #16]
 800a480:	3202      	adds	r2, #2
 800a482:	f104 010c 	add.w	r1, r4, #12
 800a486:	0092      	lsls	r2, r2, #2
 800a488:	300c      	adds	r0, #12
 800a48a:	f7ff ff4d 	bl	800a328 <memcpy>
 800a48e:	4621      	mov	r1, r4
 800a490:	4638      	mov	r0, r7
 800a492:	f7ff ffa3 	bl	800a3dc <_Bfree>
 800a496:	462c      	mov	r4, r5
 800a498:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a49c:	3601      	adds	r6, #1
 800a49e:	f8c3 8014 	str.w	r8, [r3, #20]
 800a4a2:	6126      	str	r6, [r4, #16]
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4aa:	bf00      	nop
 800a4ac:	0800d283 	.word	0x0800d283
 800a4b0:	0800d294 	.word	0x0800d294

0800a4b4 <__hi0bits>:
 800a4b4:	0c03      	lsrs	r3, r0, #16
 800a4b6:	041b      	lsls	r3, r3, #16
 800a4b8:	b9d3      	cbnz	r3, 800a4f0 <__hi0bits+0x3c>
 800a4ba:	0400      	lsls	r0, r0, #16
 800a4bc:	2310      	movs	r3, #16
 800a4be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4c2:	bf04      	itt	eq
 800a4c4:	0200      	lsleq	r0, r0, #8
 800a4c6:	3308      	addeq	r3, #8
 800a4c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4cc:	bf04      	itt	eq
 800a4ce:	0100      	lsleq	r0, r0, #4
 800a4d0:	3304      	addeq	r3, #4
 800a4d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a4d6:	bf04      	itt	eq
 800a4d8:	0080      	lsleq	r0, r0, #2
 800a4da:	3302      	addeq	r3, #2
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	db05      	blt.n	800a4ec <__hi0bits+0x38>
 800a4e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a4e4:	f103 0301 	add.w	r3, r3, #1
 800a4e8:	bf08      	it	eq
 800a4ea:	2320      	moveq	r3, #32
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	4770      	bx	lr
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	e7e4      	b.n	800a4be <__hi0bits+0xa>

0800a4f4 <__lo0bits>:
 800a4f4:	6803      	ldr	r3, [r0, #0]
 800a4f6:	f013 0207 	ands.w	r2, r3, #7
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	d00b      	beq.n	800a516 <__lo0bits+0x22>
 800a4fe:	07da      	lsls	r2, r3, #31
 800a500:	d424      	bmi.n	800a54c <__lo0bits+0x58>
 800a502:	0798      	lsls	r0, r3, #30
 800a504:	bf49      	itett	mi
 800a506:	085b      	lsrmi	r3, r3, #1
 800a508:	089b      	lsrpl	r3, r3, #2
 800a50a:	2001      	movmi	r0, #1
 800a50c:	600b      	strmi	r3, [r1, #0]
 800a50e:	bf5c      	itt	pl
 800a510:	600b      	strpl	r3, [r1, #0]
 800a512:	2002      	movpl	r0, #2
 800a514:	4770      	bx	lr
 800a516:	b298      	uxth	r0, r3
 800a518:	b9b0      	cbnz	r0, 800a548 <__lo0bits+0x54>
 800a51a:	0c1b      	lsrs	r3, r3, #16
 800a51c:	2010      	movs	r0, #16
 800a51e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a522:	bf04      	itt	eq
 800a524:	0a1b      	lsreq	r3, r3, #8
 800a526:	3008      	addeq	r0, #8
 800a528:	071a      	lsls	r2, r3, #28
 800a52a:	bf04      	itt	eq
 800a52c:	091b      	lsreq	r3, r3, #4
 800a52e:	3004      	addeq	r0, #4
 800a530:	079a      	lsls	r2, r3, #30
 800a532:	bf04      	itt	eq
 800a534:	089b      	lsreq	r3, r3, #2
 800a536:	3002      	addeq	r0, #2
 800a538:	07da      	lsls	r2, r3, #31
 800a53a:	d403      	bmi.n	800a544 <__lo0bits+0x50>
 800a53c:	085b      	lsrs	r3, r3, #1
 800a53e:	f100 0001 	add.w	r0, r0, #1
 800a542:	d005      	beq.n	800a550 <__lo0bits+0x5c>
 800a544:	600b      	str	r3, [r1, #0]
 800a546:	4770      	bx	lr
 800a548:	4610      	mov	r0, r2
 800a54a:	e7e8      	b.n	800a51e <__lo0bits+0x2a>
 800a54c:	2000      	movs	r0, #0
 800a54e:	4770      	bx	lr
 800a550:	2020      	movs	r0, #32
 800a552:	4770      	bx	lr

0800a554 <__i2b>:
 800a554:	b510      	push	{r4, lr}
 800a556:	460c      	mov	r4, r1
 800a558:	2101      	movs	r1, #1
 800a55a:	f7ff feff 	bl	800a35c <_Balloc>
 800a55e:	4602      	mov	r2, r0
 800a560:	b928      	cbnz	r0, 800a56e <__i2b+0x1a>
 800a562:	4b05      	ldr	r3, [pc, #20]	; (800a578 <__i2b+0x24>)
 800a564:	4805      	ldr	r0, [pc, #20]	; (800a57c <__i2b+0x28>)
 800a566:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a56a:	f000 fbdf 	bl	800ad2c <__assert_func>
 800a56e:	2301      	movs	r3, #1
 800a570:	6144      	str	r4, [r0, #20]
 800a572:	6103      	str	r3, [r0, #16]
 800a574:	bd10      	pop	{r4, pc}
 800a576:	bf00      	nop
 800a578:	0800d283 	.word	0x0800d283
 800a57c:	0800d294 	.word	0x0800d294

0800a580 <__multiply>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	4614      	mov	r4, r2
 800a586:	690a      	ldr	r2, [r1, #16]
 800a588:	6923      	ldr	r3, [r4, #16]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	bfb8      	it	lt
 800a58e:	460b      	movlt	r3, r1
 800a590:	460d      	mov	r5, r1
 800a592:	bfbc      	itt	lt
 800a594:	4625      	movlt	r5, r4
 800a596:	461c      	movlt	r4, r3
 800a598:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a59c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a5a0:	68ab      	ldr	r3, [r5, #8]
 800a5a2:	6869      	ldr	r1, [r5, #4]
 800a5a4:	eb0a 0709 	add.w	r7, sl, r9
 800a5a8:	42bb      	cmp	r3, r7
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	bfb8      	it	lt
 800a5ae:	3101      	addlt	r1, #1
 800a5b0:	f7ff fed4 	bl	800a35c <_Balloc>
 800a5b4:	b930      	cbnz	r0, 800a5c4 <__multiply+0x44>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	4b42      	ldr	r3, [pc, #264]	; (800a6c4 <__multiply+0x144>)
 800a5ba:	4843      	ldr	r0, [pc, #268]	; (800a6c8 <__multiply+0x148>)
 800a5bc:	f240 115d 	movw	r1, #349	; 0x15d
 800a5c0:	f000 fbb4 	bl	800ad2c <__assert_func>
 800a5c4:	f100 0614 	add.w	r6, r0, #20
 800a5c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a5cc:	4633      	mov	r3, r6
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	4543      	cmp	r3, r8
 800a5d2:	d31e      	bcc.n	800a612 <__multiply+0x92>
 800a5d4:	f105 0c14 	add.w	ip, r5, #20
 800a5d8:	f104 0314 	add.w	r3, r4, #20
 800a5dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a5e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a5e4:	9202      	str	r2, [sp, #8]
 800a5e6:	ebac 0205 	sub.w	r2, ip, r5
 800a5ea:	3a15      	subs	r2, #21
 800a5ec:	f022 0203 	bic.w	r2, r2, #3
 800a5f0:	3204      	adds	r2, #4
 800a5f2:	f105 0115 	add.w	r1, r5, #21
 800a5f6:	458c      	cmp	ip, r1
 800a5f8:	bf38      	it	cc
 800a5fa:	2204      	movcc	r2, #4
 800a5fc:	9201      	str	r2, [sp, #4]
 800a5fe:	9a02      	ldr	r2, [sp, #8]
 800a600:	9303      	str	r3, [sp, #12]
 800a602:	429a      	cmp	r2, r3
 800a604:	d808      	bhi.n	800a618 <__multiply+0x98>
 800a606:	2f00      	cmp	r7, #0
 800a608:	dc55      	bgt.n	800a6b6 <__multiply+0x136>
 800a60a:	6107      	str	r7, [r0, #16]
 800a60c:	b005      	add	sp, #20
 800a60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a612:	f843 2b04 	str.w	r2, [r3], #4
 800a616:	e7db      	b.n	800a5d0 <__multiply+0x50>
 800a618:	f8b3 a000 	ldrh.w	sl, [r3]
 800a61c:	f1ba 0f00 	cmp.w	sl, #0
 800a620:	d020      	beq.n	800a664 <__multiply+0xe4>
 800a622:	f105 0e14 	add.w	lr, r5, #20
 800a626:	46b1      	mov	r9, r6
 800a628:	2200      	movs	r2, #0
 800a62a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a62e:	f8d9 b000 	ldr.w	fp, [r9]
 800a632:	b2a1      	uxth	r1, r4
 800a634:	fa1f fb8b 	uxth.w	fp, fp
 800a638:	fb0a b101 	mla	r1, sl, r1, fp
 800a63c:	4411      	add	r1, r2
 800a63e:	f8d9 2000 	ldr.w	r2, [r9]
 800a642:	0c24      	lsrs	r4, r4, #16
 800a644:	0c12      	lsrs	r2, r2, #16
 800a646:	fb0a 2404 	mla	r4, sl, r4, r2
 800a64a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a64e:	b289      	uxth	r1, r1
 800a650:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a654:	45f4      	cmp	ip, lr
 800a656:	f849 1b04 	str.w	r1, [r9], #4
 800a65a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a65e:	d8e4      	bhi.n	800a62a <__multiply+0xaa>
 800a660:	9901      	ldr	r1, [sp, #4]
 800a662:	5072      	str	r2, [r6, r1]
 800a664:	9a03      	ldr	r2, [sp, #12]
 800a666:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a66a:	3304      	adds	r3, #4
 800a66c:	f1b9 0f00 	cmp.w	r9, #0
 800a670:	d01f      	beq.n	800a6b2 <__multiply+0x132>
 800a672:	6834      	ldr	r4, [r6, #0]
 800a674:	f105 0114 	add.w	r1, r5, #20
 800a678:	46b6      	mov	lr, r6
 800a67a:	f04f 0a00 	mov.w	sl, #0
 800a67e:	880a      	ldrh	r2, [r1, #0]
 800a680:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a684:	fb09 b202 	mla	r2, r9, r2, fp
 800a688:	4492      	add	sl, r2
 800a68a:	b2a4      	uxth	r4, r4
 800a68c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a690:	f84e 4b04 	str.w	r4, [lr], #4
 800a694:	f851 4b04 	ldr.w	r4, [r1], #4
 800a698:	f8be 2000 	ldrh.w	r2, [lr]
 800a69c:	0c24      	lsrs	r4, r4, #16
 800a69e:	fb09 2404 	mla	r4, r9, r4, r2
 800a6a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a6a6:	458c      	cmp	ip, r1
 800a6a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a6ac:	d8e7      	bhi.n	800a67e <__multiply+0xfe>
 800a6ae:	9a01      	ldr	r2, [sp, #4]
 800a6b0:	50b4      	str	r4, [r6, r2]
 800a6b2:	3604      	adds	r6, #4
 800a6b4:	e7a3      	b.n	800a5fe <__multiply+0x7e>
 800a6b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1a5      	bne.n	800a60a <__multiply+0x8a>
 800a6be:	3f01      	subs	r7, #1
 800a6c0:	e7a1      	b.n	800a606 <__multiply+0x86>
 800a6c2:	bf00      	nop
 800a6c4:	0800d283 	.word	0x0800d283
 800a6c8:	0800d294 	.word	0x0800d294

0800a6cc <__pow5mult>:
 800a6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d0:	4615      	mov	r5, r2
 800a6d2:	f012 0203 	ands.w	r2, r2, #3
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	460f      	mov	r7, r1
 800a6da:	d007      	beq.n	800a6ec <__pow5mult+0x20>
 800a6dc:	4c25      	ldr	r4, [pc, #148]	; (800a774 <__pow5mult+0xa8>)
 800a6de:	3a01      	subs	r2, #1
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6e6:	f7ff fe9b 	bl	800a420 <__multadd>
 800a6ea:	4607      	mov	r7, r0
 800a6ec:	10ad      	asrs	r5, r5, #2
 800a6ee:	d03d      	beq.n	800a76c <__pow5mult+0xa0>
 800a6f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a6f2:	b97c      	cbnz	r4, 800a714 <__pow5mult+0x48>
 800a6f4:	2010      	movs	r0, #16
 800a6f6:	f7fe fa45 	bl	8008b84 <malloc>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	6270      	str	r0, [r6, #36]	; 0x24
 800a6fe:	b928      	cbnz	r0, 800a70c <__pow5mult+0x40>
 800a700:	4b1d      	ldr	r3, [pc, #116]	; (800a778 <__pow5mult+0xac>)
 800a702:	481e      	ldr	r0, [pc, #120]	; (800a77c <__pow5mult+0xb0>)
 800a704:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a708:	f000 fb10 	bl	800ad2c <__assert_func>
 800a70c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a710:	6004      	str	r4, [r0, #0]
 800a712:	60c4      	str	r4, [r0, #12]
 800a714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a71c:	b94c      	cbnz	r4, 800a732 <__pow5mult+0x66>
 800a71e:	f240 2171 	movw	r1, #625	; 0x271
 800a722:	4630      	mov	r0, r6
 800a724:	f7ff ff16 	bl	800a554 <__i2b>
 800a728:	2300      	movs	r3, #0
 800a72a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a72e:	4604      	mov	r4, r0
 800a730:	6003      	str	r3, [r0, #0]
 800a732:	f04f 0900 	mov.w	r9, #0
 800a736:	07eb      	lsls	r3, r5, #31
 800a738:	d50a      	bpl.n	800a750 <__pow5mult+0x84>
 800a73a:	4639      	mov	r1, r7
 800a73c:	4622      	mov	r2, r4
 800a73e:	4630      	mov	r0, r6
 800a740:	f7ff ff1e 	bl	800a580 <__multiply>
 800a744:	4639      	mov	r1, r7
 800a746:	4680      	mov	r8, r0
 800a748:	4630      	mov	r0, r6
 800a74a:	f7ff fe47 	bl	800a3dc <_Bfree>
 800a74e:	4647      	mov	r7, r8
 800a750:	106d      	asrs	r5, r5, #1
 800a752:	d00b      	beq.n	800a76c <__pow5mult+0xa0>
 800a754:	6820      	ldr	r0, [r4, #0]
 800a756:	b938      	cbnz	r0, 800a768 <__pow5mult+0x9c>
 800a758:	4622      	mov	r2, r4
 800a75a:	4621      	mov	r1, r4
 800a75c:	4630      	mov	r0, r6
 800a75e:	f7ff ff0f 	bl	800a580 <__multiply>
 800a762:	6020      	str	r0, [r4, #0]
 800a764:	f8c0 9000 	str.w	r9, [r0]
 800a768:	4604      	mov	r4, r0
 800a76a:	e7e4      	b.n	800a736 <__pow5mult+0x6a>
 800a76c:	4638      	mov	r0, r7
 800a76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a772:	bf00      	nop
 800a774:	0800d3e8 	.word	0x0800d3e8
 800a778:	0800d20d 	.word	0x0800d20d
 800a77c:	0800d294 	.word	0x0800d294

0800a780 <__lshift>:
 800a780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a784:	460c      	mov	r4, r1
 800a786:	6849      	ldr	r1, [r1, #4]
 800a788:	6923      	ldr	r3, [r4, #16]
 800a78a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a78e:	68a3      	ldr	r3, [r4, #8]
 800a790:	4607      	mov	r7, r0
 800a792:	4691      	mov	r9, r2
 800a794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a798:	f108 0601 	add.w	r6, r8, #1
 800a79c:	42b3      	cmp	r3, r6
 800a79e:	db0b      	blt.n	800a7b8 <__lshift+0x38>
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	f7ff fddb 	bl	800a35c <_Balloc>
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	b948      	cbnz	r0, 800a7be <__lshift+0x3e>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	4b28      	ldr	r3, [pc, #160]	; (800a850 <__lshift+0xd0>)
 800a7ae:	4829      	ldr	r0, [pc, #164]	; (800a854 <__lshift+0xd4>)
 800a7b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a7b4:	f000 faba 	bl	800ad2c <__assert_func>
 800a7b8:	3101      	adds	r1, #1
 800a7ba:	005b      	lsls	r3, r3, #1
 800a7bc:	e7ee      	b.n	800a79c <__lshift+0x1c>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f100 0114 	add.w	r1, r0, #20
 800a7c4:	f100 0210 	add.w	r2, r0, #16
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	4553      	cmp	r3, sl
 800a7cc:	db33      	blt.n	800a836 <__lshift+0xb6>
 800a7ce:	6920      	ldr	r0, [r4, #16]
 800a7d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7d4:	f104 0314 	add.w	r3, r4, #20
 800a7d8:	f019 091f 	ands.w	r9, r9, #31
 800a7dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7e4:	d02b      	beq.n	800a83e <__lshift+0xbe>
 800a7e6:	f1c9 0e20 	rsb	lr, r9, #32
 800a7ea:	468a      	mov	sl, r1
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	6818      	ldr	r0, [r3, #0]
 800a7f0:	fa00 f009 	lsl.w	r0, r0, r9
 800a7f4:	4302      	orrs	r2, r0
 800a7f6:	f84a 2b04 	str.w	r2, [sl], #4
 800a7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fe:	459c      	cmp	ip, r3
 800a800:	fa22 f20e 	lsr.w	r2, r2, lr
 800a804:	d8f3      	bhi.n	800a7ee <__lshift+0x6e>
 800a806:	ebac 0304 	sub.w	r3, ip, r4
 800a80a:	3b15      	subs	r3, #21
 800a80c:	f023 0303 	bic.w	r3, r3, #3
 800a810:	3304      	adds	r3, #4
 800a812:	f104 0015 	add.w	r0, r4, #21
 800a816:	4584      	cmp	ip, r0
 800a818:	bf38      	it	cc
 800a81a:	2304      	movcc	r3, #4
 800a81c:	50ca      	str	r2, [r1, r3]
 800a81e:	b10a      	cbz	r2, 800a824 <__lshift+0xa4>
 800a820:	f108 0602 	add.w	r6, r8, #2
 800a824:	3e01      	subs	r6, #1
 800a826:	4638      	mov	r0, r7
 800a828:	612e      	str	r6, [r5, #16]
 800a82a:	4621      	mov	r1, r4
 800a82c:	f7ff fdd6 	bl	800a3dc <_Bfree>
 800a830:	4628      	mov	r0, r5
 800a832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a836:	f842 0f04 	str.w	r0, [r2, #4]!
 800a83a:	3301      	adds	r3, #1
 800a83c:	e7c5      	b.n	800a7ca <__lshift+0x4a>
 800a83e:	3904      	subs	r1, #4
 800a840:	f853 2b04 	ldr.w	r2, [r3], #4
 800a844:	f841 2f04 	str.w	r2, [r1, #4]!
 800a848:	459c      	cmp	ip, r3
 800a84a:	d8f9      	bhi.n	800a840 <__lshift+0xc0>
 800a84c:	e7ea      	b.n	800a824 <__lshift+0xa4>
 800a84e:	bf00      	nop
 800a850:	0800d283 	.word	0x0800d283
 800a854:	0800d294 	.word	0x0800d294

0800a858 <__mcmp>:
 800a858:	b530      	push	{r4, r5, lr}
 800a85a:	6902      	ldr	r2, [r0, #16]
 800a85c:	690c      	ldr	r4, [r1, #16]
 800a85e:	1b12      	subs	r2, r2, r4
 800a860:	d10e      	bne.n	800a880 <__mcmp+0x28>
 800a862:	f100 0314 	add.w	r3, r0, #20
 800a866:	3114      	adds	r1, #20
 800a868:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a86c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a870:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a874:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a878:	42a5      	cmp	r5, r4
 800a87a:	d003      	beq.n	800a884 <__mcmp+0x2c>
 800a87c:	d305      	bcc.n	800a88a <__mcmp+0x32>
 800a87e:	2201      	movs	r2, #1
 800a880:	4610      	mov	r0, r2
 800a882:	bd30      	pop	{r4, r5, pc}
 800a884:	4283      	cmp	r3, r0
 800a886:	d3f3      	bcc.n	800a870 <__mcmp+0x18>
 800a888:	e7fa      	b.n	800a880 <__mcmp+0x28>
 800a88a:	f04f 32ff 	mov.w	r2, #4294967295
 800a88e:	e7f7      	b.n	800a880 <__mcmp+0x28>

0800a890 <__mdiff>:
 800a890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a894:	460c      	mov	r4, r1
 800a896:	4606      	mov	r6, r0
 800a898:	4611      	mov	r1, r2
 800a89a:	4620      	mov	r0, r4
 800a89c:	4617      	mov	r7, r2
 800a89e:	f7ff ffdb 	bl	800a858 <__mcmp>
 800a8a2:	1e05      	subs	r5, r0, #0
 800a8a4:	d110      	bne.n	800a8c8 <__mdiff+0x38>
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f7ff fd57 	bl	800a35c <_Balloc>
 800a8ae:	b930      	cbnz	r0, 800a8be <__mdiff+0x2e>
 800a8b0:	4b39      	ldr	r3, [pc, #228]	; (800a998 <__mdiff+0x108>)
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	f240 2132 	movw	r1, #562	; 0x232
 800a8b8:	4838      	ldr	r0, [pc, #224]	; (800a99c <__mdiff+0x10c>)
 800a8ba:	f000 fa37 	bl	800ad2c <__assert_func>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c8:	bfa4      	itt	ge
 800a8ca:	463b      	movge	r3, r7
 800a8cc:	4627      	movge	r7, r4
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	bfa6      	itte	ge
 800a8d4:	461c      	movge	r4, r3
 800a8d6:	2500      	movge	r5, #0
 800a8d8:	2501      	movlt	r5, #1
 800a8da:	f7ff fd3f 	bl	800a35c <_Balloc>
 800a8de:	b920      	cbnz	r0, 800a8ea <__mdiff+0x5a>
 800a8e0:	4b2d      	ldr	r3, [pc, #180]	; (800a998 <__mdiff+0x108>)
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a8e8:	e7e6      	b.n	800a8b8 <__mdiff+0x28>
 800a8ea:	693e      	ldr	r6, [r7, #16]
 800a8ec:	60c5      	str	r5, [r0, #12]
 800a8ee:	6925      	ldr	r5, [r4, #16]
 800a8f0:	f107 0114 	add.w	r1, r7, #20
 800a8f4:	f104 0914 	add.w	r9, r4, #20
 800a8f8:	f100 0e14 	add.w	lr, r0, #20
 800a8fc:	f107 0210 	add.w	r2, r7, #16
 800a900:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a904:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a908:	46f2      	mov	sl, lr
 800a90a:	2700      	movs	r7, #0
 800a90c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a910:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a914:	fa1f f883 	uxth.w	r8, r3
 800a918:	fa17 f78b 	uxtah	r7, r7, fp
 800a91c:	0c1b      	lsrs	r3, r3, #16
 800a91e:	eba7 0808 	sub.w	r8, r7, r8
 800a922:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a926:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a92a:	fa1f f888 	uxth.w	r8, r8
 800a92e:	141f      	asrs	r7, r3, #16
 800a930:	454d      	cmp	r5, r9
 800a932:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a936:	f84a 3b04 	str.w	r3, [sl], #4
 800a93a:	d8e7      	bhi.n	800a90c <__mdiff+0x7c>
 800a93c:	1b2b      	subs	r3, r5, r4
 800a93e:	3b15      	subs	r3, #21
 800a940:	f023 0303 	bic.w	r3, r3, #3
 800a944:	3304      	adds	r3, #4
 800a946:	3415      	adds	r4, #21
 800a948:	42a5      	cmp	r5, r4
 800a94a:	bf38      	it	cc
 800a94c:	2304      	movcc	r3, #4
 800a94e:	4419      	add	r1, r3
 800a950:	4473      	add	r3, lr
 800a952:	469e      	mov	lr, r3
 800a954:	460d      	mov	r5, r1
 800a956:	4565      	cmp	r5, ip
 800a958:	d30e      	bcc.n	800a978 <__mdiff+0xe8>
 800a95a:	f10c 0203 	add.w	r2, ip, #3
 800a95e:	1a52      	subs	r2, r2, r1
 800a960:	f022 0203 	bic.w	r2, r2, #3
 800a964:	3903      	subs	r1, #3
 800a966:	458c      	cmp	ip, r1
 800a968:	bf38      	it	cc
 800a96a:	2200      	movcc	r2, #0
 800a96c:	441a      	add	r2, r3
 800a96e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a972:	b17b      	cbz	r3, 800a994 <__mdiff+0x104>
 800a974:	6106      	str	r6, [r0, #16]
 800a976:	e7a5      	b.n	800a8c4 <__mdiff+0x34>
 800a978:	f855 8b04 	ldr.w	r8, [r5], #4
 800a97c:	fa17 f488 	uxtah	r4, r7, r8
 800a980:	1422      	asrs	r2, r4, #16
 800a982:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a986:	b2a4      	uxth	r4, r4
 800a988:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a98c:	f84e 4b04 	str.w	r4, [lr], #4
 800a990:	1417      	asrs	r7, r2, #16
 800a992:	e7e0      	b.n	800a956 <__mdiff+0xc6>
 800a994:	3e01      	subs	r6, #1
 800a996:	e7ea      	b.n	800a96e <__mdiff+0xde>
 800a998:	0800d283 	.word	0x0800d283
 800a99c:	0800d294 	.word	0x0800d294

0800a9a0 <__d2b>:
 800a9a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	ec57 6b10 	vmov	r6, r7, d0
 800a9ac:	4690      	mov	r8, r2
 800a9ae:	f7ff fcd5 	bl	800a35c <_Balloc>
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	b930      	cbnz	r0, 800a9c4 <__d2b+0x24>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	4b25      	ldr	r3, [pc, #148]	; (800aa50 <__d2b+0xb0>)
 800a9ba:	4826      	ldr	r0, [pc, #152]	; (800aa54 <__d2b+0xb4>)
 800a9bc:	f240 310a 	movw	r1, #778	; 0x30a
 800a9c0:	f000 f9b4 	bl	800ad2c <__assert_func>
 800a9c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a9c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9cc:	bb35      	cbnz	r5, 800aa1c <__d2b+0x7c>
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	d028      	beq.n	800aa26 <__d2b+0x86>
 800a9d4:	4668      	mov	r0, sp
 800a9d6:	9600      	str	r6, [sp, #0]
 800a9d8:	f7ff fd8c 	bl	800a4f4 <__lo0bits>
 800a9dc:	9900      	ldr	r1, [sp, #0]
 800a9de:	b300      	cbz	r0, 800aa22 <__d2b+0x82>
 800a9e0:	9a01      	ldr	r2, [sp, #4]
 800a9e2:	f1c0 0320 	rsb	r3, r0, #32
 800a9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ea:	430b      	orrs	r3, r1
 800a9ec:	40c2      	lsrs	r2, r0
 800a9ee:	6163      	str	r3, [r4, #20]
 800a9f0:	9201      	str	r2, [sp, #4]
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	61a3      	str	r3, [r4, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	bf14      	ite	ne
 800a9fa:	2202      	movne	r2, #2
 800a9fc:	2201      	moveq	r2, #1
 800a9fe:	6122      	str	r2, [r4, #16]
 800aa00:	b1d5      	cbz	r5, 800aa38 <__d2b+0x98>
 800aa02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa06:	4405      	add	r5, r0
 800aa08:	f8c9 5000 	str.w	r5, [r9]
 800aa0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa10:	f8c8 0000 	str.w	r0, [r8]
 800aa14:	4620      	mov	r0, r4
 800aa16:	b003      	add	sp, #12
 800aa18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa20:	e7d5      	b.n	800a9ce <__d2b+0x2e>
 800aa22:	6161      	str	r1, [r4, #20]
 800aa24:	e7e5      	b.n	800a9f2 <__d2b+0x52>
 800aa26:	a801      	add	r0, sp, #4
 800aa28:	f7ff fd64 	bl	800a4f4 <__lo0bits>
 800aa2c:	9b01      	ldr	r3, [sp, #4]
 800aa2e:	6163      	str	r3, [r4, #20]
 800aa30:	2201      	movs	r2, #1
 800aa32:	6122      	str	r2, [r4, #16]
 800aa34:	3020      	adds	r0, #32
 800aa36:	e7e3      	b.n	800aa00 <__d2b+0x60>
 800aa38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa40:	f8c9 0000 	str.w	r0, [r9]
 800aa44:	6918      	ldr	r0, [r3, #16]
 800aa46:	f7ff fd35 	bl	800a4b4 <__hi0bits>
 800aa4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa4e:	e7df      	b.n	800aa10 <__d2b+0x70>
 800aa50:	0800d283 	.word	0x0800d283
 800aa54:	0800d294 	.word	0x0800d294

0800aa58 <_calloc_r>:
 800aa58:	b513      	push	{r0, r1, r4, lr}
 800aa5a:	434a      	muls	r2, r1
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	9201      	str	r2, [sp, #4]
 800aa60:	f7fe f8f0 	bl	8008c44 <_malloc_r>
 800aa64:	4604      	mov	r4, r0
 800aa66:	b118      	cbz	r0, 800aa70 <_calloc_r+0x18>
 800aa68:	9a01      	ldr	r2, [sp, #4]
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	f7fe f892 	bl	8008b94 <memset>
 800aa70:	4620      	mov	r0, r4
 800aa72:	b002      	add	sp, #8
 800aa74:	bd10      	pop	{r4, pc}

0800aa76 <__ssputs_r>:
 800aa76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7a:	688e      	ldr	r6, [r1, #8]
 800aa7c:	429e      	cmp	r6, r3
 800aa7e:	4682      	mov	sl, r0
 800aa80:	460c      	mov	r4, r1
 800aa82:	4690      	mov	r8, r2
 800aa84:	461f      	mov	r7, r3
 800aa86:	d838      	bhi.n	800aafa <__ssputs_r+0x84>
 800aa88:	898a      	ldrh	r2, [r1, #12]
 800aa8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa8e:	d032      	beq.n	800aaf6 <__ssputs_r+0x80>
 800aa90:	6825      	ldr	r5, [r4, #0]
 800aa92:	6909      	ldr	r1, [r1, #16]
 800aa94:	eba5 0901 	sub.w	r9, r5, r1
 800aa98:	6965      	ldr	r5, [r4, #20]
 800aa9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	444b      	add	r3, r9
 800aaa6:	106d      	asrs	r5, r5, #1
 800aaa8:	429d      	cmp	r5, r3
 800aaaa:	bf38      	it	cc
 800aaac:	461d      	movcc	r5, r3
 800aaae:	0553      	lsls	r3, r2, #21
 800aab0:	d531      	bpl.n	800ab16 <__ssputs_r+0xa0>
 800aab2:	4629      	mov	r1, r5
 800aab4:	f7fe f8c6 	bl	8008c44 <_malloc_r>
 800aab8:	4606      	mov	r6, r0
 800aaba:	b950      	cbnz	r0, 800aad2 <__ssputs_r+0x5c>
 800aabc:	230c      	movs	r3, #12
 800aabe:	f8ca 3000 	str.w	r3, [sl]
 800aac2:	89a3      	ldrh	r3, [r4, #12]
 800aac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac8:	81a3      	strh	r3, [r4, #12]
 800aaca:	f04f 30ff 	mov.w	r0, #4294967295
 800aace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad2:	6921      	ldr	r1, [r4, #16]
 800aad4:	464a      	mov	r2, r9
 800aad6:	f7ff fc27 	bl	800a328 <memcpy>
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	6126      	str	r6, [r4, #16]
 800aae8:	6165      	str	r5, [r4, #20]
 800aaea:	444e      	add	r6, r9
 800aaec:	eba5 0509 	sub.w	r5, r5, r9
 800aaf0:	6026      	str	r6, [r4, #0]
 800aaf2:	60a5      	str	r5, [r4, #8]
 800aaf4:	463e      	mov	r6, r7
 800aaf6:	42be      	cmp	r6, r7
 800aaf8:	d900      	bls.n	800aafc <__ssputs_r+0x86>
 800aafa:	463e      	mov	r6, r7
 800aafc:	4632      	mov	r2, r6
 800aafe:	6820      	ldr	r0, [r4, #0]
 800ab00:	4641      	mov	r1, r8
 800ab02:	f000 f958 	bl	800adb6 <memmove>
 800ab06:	68a3      	ldr	r3, [r4, #8]
 800ab08:	6822      	ldr	r2, [r4, #0]
 800ab0a:	1b9b      	subs	r3, r3, r6
 800ab0c:	4432      	add	r2, r6
 800ab0e:	60a3      	str	r3, [r4, #8]
 800ab10:	6022      	str	r2, [r4, #0]
 800ab12:	2000      	movs	r0, #0
 800ab14:	e7db      	b.n	800aace <__ssputs_r+0x58>
 800ab16:	462a      	mov	r2, r5
 800ab18:	f000 f967 	bl	800adea <_realloc_r>
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d1e1      	bne.n	800aae6 <__ssputs_r+0x70>
 800ab22:	6921      	ldr	r1, [r4, #16]
 800ab24:	4650      	mov	r0, sl
 800ab26:	f7fe f83d 	bl	8008ba4 <_free_r>
 800ab2a:	e7c7      	b.n	800aabc <__ssputs_r+0x46>

0800ab2c <_svfiprintf_r>:
 800ab2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab30:	4698      	mov	r8, r3
 800ab32:	898b      	ldrh	r3, [r1, #12]
 800ab34:	061b      	lsls	r3, r3, #24
 800ab36:	b09d      	sub	sp, #116	; 0x74
 800ab38:	4607      	mov	r7, r0
 800ab3a:	460d      	mov	r5, r1
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	d50e      	bpl.n	800ab5e <_svfiprintf_r+0x32>
 800ab40:	690b      	ldr	r3, [r1, #16]
 800ab42:	b963      	cbnz	r3, 800ab5e <_svfiprintf_r+0x32>
 800ab44:	2140      	movs	r1, #64	; 0x40
 800ab46:	f7fe f87d 	bl	8008c44 <_malloc_r>
 800ab4a:	6028      	str	r0, [r5, #0]
 800ab4c:	6128      	str	r0, [r5, #16]
 800ab4e:	b920      	cbnz	r0, 800ab5a <_svfiprintf_r+0x2e>
 800ab50:	230c      	movs	r3, #12
 800ab52:	603b      	str	r3, [r7, #0]
 800ab54:	f04f 30ff 	mov.w	r0, #4294967295
 800ab58:	e0d1      	b.n	800acfe <_svfiprintf_r+0x1d2>
 800ab5a:	2340      	movs	r3, #64	; 0x40
 800ab5c:	616b      	str	r3, [r5, #20]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9309      	str	r3, [sp, #36]	; 0x24
 800ab62:	2320      	movs	r3, #32
 800ab64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab6c:	2330      	movs	r3, #48	; 0x30
 800ab6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad18 <_svfiprintf_r+0x1ec>
 800ab72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab76:	f04f 0901 	mov.w	r9, #1
 800ab7a:	4623      	mov	r3, r4
 800ab7c:	469a      	mov	sl, r3
 800ab7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab82:	b10a      	cbz	r2, 800ab88 <_svfiprintf_r+0x5c>
 800ab84:	2a25      	cmp	r2, #37	; 0x25
 800ab86:	d1f9      	bne.n	800ab7c <_svfiprintf_r+0x50>
 800ab88:	ebba 0b04 	subs.w	fp, sl, r4
 800ab8c:	d00b      	beq.n	800aba6 <_svfiprintf_r+0x7a>
 800ab8e:	465b      	mov	r3, fp
 800ab90:	4622      	mov	r2, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	4638      	mov	r0, r7
 800ab96:	f7ff ff6e 	bl	800aa76 <__ssputs_r>
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	f000 80aa 	beq.w	800acf4 <_svfiprintf_r+0x1c8>
 800aba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba2:	445a      	add	r2, fp
 800aba4:	9209      	str	r2, [sp, #36]	; 0x24
 800aba6:	f89a 3000 	ldrb.w	r3, [sl]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 80a2 	beq.w	800acf4 <_svfiprintf_r+0x1c8>
 800abb0:	2300      	movs	r3, #0
 800abb2:	f04f 32ff 	mov.w	r2, #4294967295
 800abb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abba:	f10a 0a01 	add.w	sl, sl, #1
 800abbe:	9304      	str	r3, [sp, #16]
 800abc0:	9307      	str	r3, [sp, #28]
 800abc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abc6:	931a      	str	r3, [sp, #104]	; 0x68
 800abc8:	4654      	mov	r4, sl
 800abca:	2205      	movs	r2, #5
 800abcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd0:	4851      	ldr	r0, [pc, #324]	; (800ad18 <_svfiprintf_r+0x1ec>)
 800abd2:	f7f5 fb0d 	bl	80001f0 <memchr>
 800abd6:	9a04      	ldr	r2, [sp, #16]
 800abd8:	b9d8      	cbnz	r0, 800ac12 <_svfiprintf_r+0xe6>
 800abda:	06d0      	lsls	r0, r2, #27
 800abdc:	bf44      	itt	mi
 800abde:	2320      	movmi	r3, #32
 800abe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abe4:	0711      	lsls	r1, r2, #28
 800abe6:	bf44      	itt	mi
 800abe8:	232b      	movmi	r3, #43	; 0x2b
 800abea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abee:	f89a 3000 	ldrb.w	r3, [sl]
 800abf2:	2b2a      	cmp	r3, #42	; 0x2a
 800abf4:	d015      	beq.n	800ac22 <_svfiprintf_r+0xf6>
 800abf6:	9a07      	ldr	r2, [sp, #28]
 800abf8:	4654      	mov	r4, sl
 800abfa:	2000      	movs	r0, #0
 800abfc:	f04f 0c0a 	mov.w	ip, #10
 800ac00:	4621      	mov	r1, r4
 800ac02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac06:	3b30      	subs	r3, #48	; 0x30
 800ac08:	2b09      	cmp	r3, #9
 800ac0a:	d94e      	bls.n	800acaa <_svfiprintf_r+0x17e>
 800ac0c:	b1b0      	cbz	r0, 800ac3c <_svfiprintf_r+0x110>
 800ac0e:	9207      	str	r2, [sp, #28]
 800ac10:	e014      	b.n	800ac3c <_svfiprintf_r+0x110>
 800ac12:	eba0 0308 	sub.w	r3, r0, r8
 800ac16:	fa09 f303 	lsl.w	r3, r9, r3
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	46a2      	mov	sl, r4
 800ac20:	e7d2      	b.n	800abc8 <_svfiprintf_r+0x9c>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	1d19      	adds	r1, r3, #4
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	9103      	str	r1, [sp, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfbb      	ittet	lt
 800ac2e:	425b      	neglt	r3, r3
 800ac30:	f042 0202 	orrlt.w	r2, r2, #2
 800ac34:	9307      	strge	r3, [sp, #28]
 800ac36:	9307      	strlt	r3, [sp, #28]
 800ac38:	bfb8      	it	lt
 800ac3a:	9204      	strlt	r2, [sp, #16]
 800ac3c:	7823      	ldrb	r3, [r4, #0]
 800ac3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac40:	d10c      	bne.n	800ac5c <_svfiprintf_r+0x130>
 800ac42:	7863      	ldrb	r3, [r4, #1]
 800ac44:	2b2a      	cmp	r3, #42	; 0x2a
 800ac46:	d135      	bne.n	800acb4 <_svfiprintf_r+0x188>
 800ac48:	9b03      	ldr	r3, [sp, #12]
 800ac4a:	1d1a      	adds	r2, r3, #4
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	9203      	str	r2, [sp, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	bfb8      	it	lt
 800ac54:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac58:	3402      	adds	r4, #2
 800ac5a:	9305      	str	r3, [sp, #20]
 800ac5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad28 <_svfiprintf_r+0x1fc>
 800ac60:	7821      	ldrb	r1, [r4, #0]
 800ac62:	2203      	movs	r2, #3
 800ac64:	4650      	mov	r0, sl
 800ac66:	f7f5 fac3 	bl	80001f0 <memchr>
 800ac6a:	b140      	cbz	r0, 800ac7e <_svfiprintf_r+0x152>
 800ac6c:	2340      	movs	r3, #64	; 0x40
 800ac6e:	eba0 000a 	sub.w	r0, r0, sl
 800ac72:	fa03 f000 	lsl.w	r0, r3, r0
 800ac76:	9b04      	ldr	r3, [sp, #16]
 800ac78:	4303      	orrs	r3, r0
 800ac7a:	3401      	adds	r4, #1
 800ac7c:	9304      	str	r3, [sp, #16]
 800ac7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac82:	4826      	ldr	r0, [pc, #152]	; (800ad1c <_svfiprintf_r+0x1f0>)
 800ac84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac88:	2206      	movs	r2, #6
 800ac8a:	f7f5 fab1 	bl	80001f0 <memchr>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d038      	beq.n	800ad04 <_svfiprintf_r+0x1d8>
 800ac92:	4b23      	ldr	r3, [pc, #140]	; (800ad20 <_svfiprintf_r+0x1f4>)
 800ac94:	bb1b      	cbnz	r3, 800acde <_svfiprintf_r+0x1b2>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	3307      	adds	r3, #7
 800ac9a:	f023 0307 	bic.w	r3, r3, #7
 800ac9e:	3308      	adds	r3, #8
 800aca0:	9303      	str	r3, [sp, #12]
 800aca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca4:	4433      	add	r3, r6
 800aca6:	9309      	str	r3, [sp, #36]	; 0x24
 800aca8:	e767      	b.n	800ab7a <_svfiprintf_r+0x4e>
 800acaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800acae:	460c      	mov	r4, r1
 800acb0:	2001      	movs	r0, #1
 800acb2:	e7a5      	b.n	800ac00 <_svfiprintf_r+0xd4>
 800acb4:	2300      	movs	r3, #0
 800acb6:	3401      	adds	r4, #1
 800acb8:	9305      	str	r3, [sp, #20]
 800acba:	4619      	mov	r1, r3
 800acbc:	f04f 0c0a 	mov.w	ip, #10
 800acc0:	4620      	mov	r0, r4
 800acc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc6:	3a30      	subs	r2, #48	; 0x30
 800acc8:	2a09      	cmp	r2, #9
 800acca:	d903      	bls.n	800acd4 <_svfiprintf_r+0x1a8>
 800accc:	2b00      	cmp	r3, #0
 800acce:	d0c5      	beq.n	800ac5c <_svfiprintf_r+0x130>
 800acd0:	9105      	str	r1, [sp, #20]
 800acd2:	e7c3      	b.n	800ac5c <_svfiprintf_r+0x130>
 800acd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd8:	4604      	mov	r4, r0
 800acda:	2301      	movs	r3, #1
 800acdc:	e7f0      	b.n	800acc0 <_svfiprintf_r+0x194>
 800acde:	ab03      	add	r3, sp, #12
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	462a      	mov	r2, r5
 800ace4:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <_svfiprintf_r+0x1f8>)
 800ace6:	a904      	add	r1, sp, #16
 800ace8:	4638      	mov	r0, r7
 800acea:	f7fe f8a5 	bl	8008e38 <_printf_float>
 800acee:	1c42      	adds	r2, r0, #1
 800acf0:	4606      	mov	r6, r0
 800acf2:	d1d6      	bne.n	800aca2 <_svfiprintf_r+0x176>
 800acf4:	89ab      	ldrh	r3, [r5, #12]
 800acf6:	065b      	lsls	r3, r3, #25
 800acf8:	f53f af2c 	bmi.w	800ab54 <_svfiprintf_r+0x28>
 800acfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acfe:	b01d      	add	sp, #116	; 0x74
 800ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	ab03      	add	r3, sp, #12
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <_svfiprintf_r+0x1f8>)
 800ad0c:	a904      	add	r1, sp, #16
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f7fe fb36 	bl	8009380 <_printf_i>
 800ad14:	e7eb      	b.n	800acee <_svfiprintf_r+0x1c2>
 800ad16:	bf00      	nop
 800ad18:	0800d3f4 	.word	0x0800d3f4
 800ad1c:	0800d3fe 	.word	0x0800d3fe
 800ad20:	08008e39 	.word	0x08008e39
 800ad24:	0800aa77 	.word	0x0800aa77
 800ad28:	0800d3fa 	.word	0x0800d3fa

0800ad2c <__assert_func>:
 800ad2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad2e:	4614      	mov	r4, r2
 800ad30:	461a      	mov	r2, r3
 800ad32:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <__assert_func+0x2c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4605      	mov	r5, r0
 800ad38:	68d8      	ldr	r0, [r3, #12]
 800ad3a:	b14c      	cbz	r4, 800ad50 <__assert_func+0x24>
 800ad3c:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <__assert_func+0x30>)
 800ad3e:	9100      	str	r1, [sp, #0]
 800ad40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad44:	4906      	ldr	r1, [pc, #24]	; (800ad60 <__assert_func+0x34>)
 800ad46:	462b      	mov	r3, r5
 800ad48:	f000 f80e 	bl	800ad68 <fiprintf>
 800ad4c:	f000 fa9a 	bl	800b284 <abort>
 800ad50:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <__assert_func+0x38>)
 800ad52:	461c      	mov	r4, r3
 800ad54:	e7f3      	b.n	800ad3e <__assert_func+0x12>
 800ad56:	bf00      	nop
 800ad58:	2000001c 	.word	0x2000001c
 800ad5c:	0800d405 	.word	0x0800d405
 800ad60:	0800d412 	.word	0x0800d412
 800ad64:	0800d440 	.word	0x0800d440

0800ad68 <fiprintf>:
 800ad68:	b40e      	push	{r1, r2, r3}
 800ad6a:	b503      	push	{r0, r1, lr}
 800ad6c:	4601      	mov	r1, r0
 800ad6e:	ab03      	add	r3, sp, #12
 800ad70:	4805      	ldr	r0, [pc, #20]	; (800ad88 <fiprintf+0x20>)
 800ad72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad76:	6800      	ldr	r0, [r0, #0]
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	f000 f885 	bl	800ae88 <_vfiprintf_r>
 800ad7e:	b002      	add	sp, #8
 800ad80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad84:	b003      	add	sp, #12
 800ad86:	4770      	bx	lr
 800ad88:	2000001c 	.word	0x2000001c

0800ad8c <__retarget_lock_init_recursive>:
 800ad8c:	4770      	bx	lr

0800ad8e <__retarget_lock_acquire_recursive>:
 800ad8e:	4770      	bx	lr

0800ad90 <__retarget_lock_release_recursive>:
 800ad90:	4770      	bx	lr

0800ad92 <__ascii_mbtowc>:
 800ad92:	b082      	sub	sp, #8
 800ad94:	b901      	cbnz	r1, 800ad98 <__ascii_mbtowc+0x6>
 800ad96:	a901      	add	r1, sp, #4
 800ad98:	b142      	cbz	r2, 800adac <__ascii_mbtowc+0x1a>
 800ad9a:	b14b      	cbz	r3, 800adb0 <__ascii_mbtowc+0x1e>
 800ad9c:	7813      	ldrb	r3, [r2, #0]
 800ad9e:	600b      	str	r3, [r1, #0]
 800ada0:	7812      	ldrb	r2, [r2, #0]
 800ada2:	1e10      	subs	r0, r2, #0
 800ada4:	bf18      	it	ne
 800ada6:	2001      	movne	r0, #1
 800ada8:	b002      	add	sp, #8
 800adaa:	4770      	bx	lr
 800adac:	4610      	mov	r0, r2
 800adae:	e7fb      	b.n	800ada8 <__ascii_mbtowc+0x16>
 800adb0:	f06f 0001 	mvn.w	r0, #1
 800adb4:	e7f8      	b.n	800ada8 <__ascii_mbtowc+0x16>

0800adb6 <memmove>:
 800adb6:	4288      	cmp	r0, r1
 800adb8:	b510      	push	{r4, lr}
 800adba:	eb01 0402 	add.w	r4, r1, r2
 800adbe:	d902      	bls.n	800adc6 <memmove+0x10>
 800adc0:	4284      	cmp	r4, r0
 800adc2:	4623      	mov	r3, r4
 800adc4:	d807      	bhi.n	800add6 <memmove+0x20>
 800adc6:	1e43      	subs	r3, r0, #1
 800adc8:	42a1      	cmp	r1, r4
 800adca:	d008      	beq.n	800adde <memmove+0x28>
 800adcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800add0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800add4:	e7f8      	b.n	800adc8 <memmove+0x12>
 800add6:	4402      	add	r2, r0
 800add8:	4601      	mov	r1, r0
 800adda:	428a      	cmp	r2, r1
 800addc:	d100      	bne.n	800ade0 <memmove+0x2a>
 800adde:	bd10      	pop	{r4, pc}
 800ade0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ade4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ade8:	e7f7      	b.n	800adda <memmove+0x24>

0800adea <_realloc_r>:
 800adea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adec:	4607      	mov	r7, r0
 800adee:	4614      	mov	r4, r2
 800adf0:	460e      	mov	r6, r1
 800adf2:	b921      	cbnz	r1, 800adfe <_realloc_r+0x14>
 800adf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800adf8:	4611      	mov	r1, r2
 800adfa:	f7fd bf23 	b.w	8008c44 <_malloc_r>
 800adfe:	b922      	cbnz	r2, 800ae0a <_realloc_r+0x20>
 800ae00:	f7fd fed0 	bl	8008ba4 <_free_r>
 800ae04:	4625      	mov	r5, r4
 800ae06:	4628      	mov	r0, r5
 800ae08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae0a:	f000 fc5f 	bl	800b6cc <_malloc_usable_size_r>
 800ae0e:	42a0      	cmp	r0, r4
 800ae10:	d20f      	bcs.n	800ae32 <_realloc_r+0x48>
 800ae12:	4621      	mov	r1, r4
 800ae14:	4638      	mov	r0, r7
 800ae16:	f7fd ff15 	bl	8008c44 <_malloc_r>
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d0f2      	beq.n	800ae06 <_realloc_r+0x1c>
 800ae20:	4631      	mov	r1, r6
 800ae22:	4622      	mov	r2, r4
 800ae24:	f7ff fa80 	bl	800a328 <memcpy>
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	f7fd feba 	bl	8008ba4 <_free_r>
 800ae30:	e7e9      	b.n	800ae06 <_realloc_r+0x1c>
 800ae32:	4635      	mov	r5, r6
 800ae34:	e7e7      	b.n	800ae06 <_realloc_r+0x1c>

0800ae36 <__sfputc_r>:
 800ae36:	6893      	ldr	r3, [r2, #8]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	b410      	push	{r4}
 800ae3e:	6093      	str	r3, [r2, #8]
 800ae40:	da08      	bge.n	800ae54 <__sfputc_r+0x1e>
 800ae42:	6994      	ldr	r4, [r2, #24]
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	db01      	blt.n	800ae4c <__sfputc_r+0x16>
 800ae48:	290a      	cmp	r1, #10
 800ae4a:	d103      	bne.n	800ae54 <__sfputc_r+0x1e>
 800ae4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae50:	f000 b94a 	b.w	800b0e8 <__swbuf_r>
 800ae54:	6813      	ldr	r3, [r2, #0]
 800ae56:	1c58      	adds	r0, r3, #1
 800ae58:	6010      	str	r0, [r2, #0]
 800ae5a:	7019      	strb	r1, [r3, #0]
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <__sfputs_r>:
 800ae64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	4614      	mov	r4, r2
 800ae6c:	18d5      	adds	r5, r2, r3
 800ae6e:	42ac      	cmp	r4, r5
 800ae70:	d101      	bne.n	800ae76 <__sfputs_r+0x12>
 800ae72:	2000      	movs	r0, #0
 800ae74:	e007      	b.n	800ae86 <__sfputs_r+0x22>
 800ae76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7a:	463a      	mov	r2, r7
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7ff ffda 	bl	800ae36 <__sfputc_r>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	d1f3      	bne.n	800ae6e <__sfputs_r+0xa>
 800ae86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae88 <_vfiprintf_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	b09d      	sub	sp, #116	; 0x74
 800ae90:	4614      	mov	r4, r2
 800ae92:	4698      	mov	r8, r3
 800ae94:	4606      	mov	r6, r0
 800ae96:	b118      	cbz	r0, 800aea0 <_vfiprintf_r+0x18>
 800ae98:	6983      	ldr	r3, [r0, #24]
 800ae9a:	b90b      	cbnz	r3, 800aea0 <_vfiprintf_r+0x18>
 800ae9c:	f000 fb14 	bl	800b4c8 <__sinit>
 800aea0:	4b89      	ldr	r3, [pc, #548]	; (800b0c8 <_vfiprintf_r+0x240>)
 800aea2:	429d      	cmp	r5, r3
 800aea4:	d11b      	bne.n	800aede <_vfiprintf_r+0x56>
 800aea6:	6875      	ldr	r5, [r6, #4]
 800aea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeaa:	07d9      	lsls	r1, r3, #31
 800aeac:	d405      	bmi.n	800aeba <_vfiprintf_r+0x32>
 800aeae:	89ab      	ldrh	r3, [r5, #12]
 800aeb0:	059a      	lsls	r2, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_vfiprintf_r+0x32>
 800aeb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeb6:	f7ff ff6a 	bl	800ad8e <__retarget_lock_acquire_recursive>
 800aeba:	89ab      	ldrh	r3, [r5, #12]
 800aebc:	071b      	lsls	r3, r3, #28
 800aebe:	d501      	bpl.n	800aec4 <_vfiprintf_r+0x3c>
 800aec0:	692b      	ldr	r3, [r5, #16]
 800aec2:	b9eb      	cbnz	r3, 800af00 <_vfiprintf_r+0x78>
 800aec4:	4629      	mov	r1, r5
 800aec6:	4630      	mov	r0, r6
 800aec8:	f000 f96e 	bl	800b1a8 <__swsetup_r>
 800aecc:	b1c0      	cbz	r0, 800af00 <_vfiprintf_r+0x78>
 800aece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aed0:	07dc      	lsls	r4, r3, #31
 800aed2:	d50e      	bpl.n	800aef2 <_vfiprintf_r+0x6a>
 800aed4:	f04f 30ff 	mov.w	r0, #4294967295
 800aed8:	b01d      	add	sp, #116	; 0x74
 800aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aede:	4b7b      	ldr	r3, [pc, #492]	; (800b0cc <_vfiprintf_r+0x244>)
 800aee0:	429d      	cmp	r5, r3
 800aee2:	d101      	bne.n	800aee8 <_vfiprintf_r+0x60>
 800aee4:	68b5      	ldr	r5, [r6, #8]
 800aee6:	e7df      	b.n	800aea8 <_vfiprintf_r+0x20>
 800aee8:	4b79      	ldr	r3, [pc, #484]	; (800b0d0 <_vfiprintf_r+0x248>)
 800aeea:	429d      	cmp	r5, r3
 800aeec:	bf08      	it	eq
 800aeee:	68f5      	ldreq	r5, [r6, #12]
 800aef0:	e7da      	b.n	800aea8 <_vfiprintf_r+0x20>
 800aef2:	89ab      	ldrh	r3, [r5, #12]
 800aef4:	0598      	lsls	r0, r3, #22
 800aef6:	d4ed      	bmi.n	800aed4 <_vfiprintf_r+0x4c>
 800aef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aefa:	f7ff ff49 	bl	800ad90 <__retarget_lock_release_recursive>
 800aefe:	e7e9      	b.n	800aed4 <_vfiprintf_r+0x4c>
 800af00:	2300      	movs	r3, #0
 800af02:	9309      	str	r3, [sp, #36]	; 0x24
 800af04:	2320      	movs	r3, #32
 800af06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af0e:	2330      	movs	r3, #48	; 0x30
 800af10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0d4 <_vfiprintf_r+0x24c>
 800af14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af18:	f04f 0901 	mov.w	r9, #1
 800af1c:	4623      	mov	r3, r4
 800af1e:	469a      	mov	sl, r3
 800af20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af24:	b10a      	cbz	r2, 800af2a <_vfiprintf_r+0xa2>
 800af26:	2a25      	cmp	r2, #37	; 0x25
 800af28:	d1f9      	bne.n	800af1e <_vfiprintf_r+0x96>
 800af2a:	ebba 0b04 	subs.w	fp, sl, r4
 800af2e:	d00b      	beq.n	800af48 <_vfiprintf_r+0xc0>
 800af30:	465b      	mov	r3, fp
 800af32:	4622      	mov	r2, r4
 800af34:	4629      	mov	r1, r5
 800af36:	4630      	mov	r0, r6
 800af38:	f7ff ff94 	bl	800ae64 <__sfputs_r>
 800af3c:	3001      	adds	r0, #1
 800af3e:	f000 80aa 	beq.w	800b096 <_vfiprintf_r+0x20e>
 800af42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af44:	445a      	add	r2, fp
 800af46:	9209      	str	r2, [sp, #36]	; 0x24
 800af48:	f89a 3000 	ldrb.w	r3, [sl]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 80a2 	beq.w	800b096 <_vfiprintf_r+0x20e>
 800af52:	2300      	movs	r3, #0
 800af54:	f04f 32ff 	mov.w	r2, #4294967295
 800af58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af5c:	f10a 0a01 	add.w	sl, sl, #1
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	9307      	str	r3, [sp, #28]
 800af64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af68:	931a      	str	r3, [sp, #104]	; 0x68
 800af6a:	4654      	mov	r4, sl
 800af6c:	2205      	movs	r2, #5
 800af6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af72:	4858      	ldr	r0, [pc, #352]	; (800b0d4 <_vfiprintf_r+0x24c>)
 800af74:	f7f5 f93c 	bl	80001f0 <memchr>
 800af78:	9a04      	ldr	r2, [sp, #16]
 800af7a:	b9d8      	cbnz	r0, 800afb4 <_vfiprintf_r+0x12c>
 800af7c:	06d1      	lsls	r1, r2, #27
 800af7e:	bf44      	itt	mi
 800af80:	2320      	movmi	r3, #32
 800af82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af86:	0713      	lsls	r3, r2, #28
 800af88:	bf44      	itt	mi
 800af8a:	232b      	movmi	r3, #43	; 0x2b
 800af8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af90:	f89a 3000 	ldrb.w	r3, [sl]
 800af94:	2b2a      	cmp	r3, #42	; 0x2a
 800af96:	d015      	beq.n	800afc4 <_vfiprintf_r+0x13c>
 800af98:	9a07      	ldr	r2, [sp, #28]
 800af9a:	4654      	mov	r4, sl
 800af9c:	2000      	movs	r0, #0
 800af9e:	f04f 0c0a 	mov.w	ip, #10
 800afa2:	4621      	mov	r1, r4
 800afa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afa8:	3b30      	subs	r3, #48	; 0x30
 800afaa:	2b09      	cmp	r3, #9
 800afac:	d94e      	bls.n	800b04c <_vfiprintf_r+0x1c4>
 800afae:	b1b0      	cbz	r0, 800afde <_vfiprintf_r+0x156>
 800afb0:	9207      	str	r2, [sp, #28]
 800afb2:	e014      	b.n	800afde <_vfiprintf_r+0x156>
 800afb4:	eba0 0308 	sub.w	r3, r0, r8
 800afb8:	fa09 f303 	lsl.w	r3, r9, r3
 800afbc:	4313      	orrs	r3, r2
 800afbe:	9304      	str	r3, [sp, #16]
 800afc0:	46a2      	mov	sl, r4
 800afc2:	e7d2      	b.n	800af6a <_vfiprintf_r+0xe2>
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	1d19      	adds	r1, r3, #4
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	9103      	str	r1, [sp, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	bfbb      	ittet	lt
 800afd0:	425b      	neglt	r3, r3
 800afd2:	f042 0202 	orrlt.w	r2, r2, #2
 800afd6:	9307      	strge	r3, [sp, #28]
 800afd8:	9307      	strlt	r3, [sp, #28]
 800afda:	bfb8      	it	lt
 800afdc:	9204      	strlt	r2, [sp, #16]
 800afde:	7823      	ldrb	r3, [r4, #0]
 800afe0:	2b2e      	cmp	r3, #46	; 0x2e
 800afe2:	d10c      	bne.n	800affe <_vfiprintf_r+0x176>
 800afe4:	7863      	ldrb	r3, [r4, #1]
 800afe6:	2b2a      	cmp	r3, #42	; 0x2a
 800afe8:	d135      	bne.n	800b056 <_vfiprintf_r+0x1ce>
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	1d1a      	adds	r2, r3, #4
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	9203      	str	r2, [sp, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bfb8      	it	lt
 800aff6:	f04f 33ff 	movlt.w	r3, #4294967295
 800affa:	3402      	adds	r4, #2
 800affc:	9305      	str	r3, [sp, #20]
 800affe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0e4 <_vfiprintf_r+0x25c>
 800b002:	7821      	ldrb	r1, [r4, #0]
 800b004:	2203      	movs	r2, #3
 800b006:	4650      	mov	r0, sl
 800b008:	f7f5 f8f2 	bl	80001f0 <memchr>
 800b00c:	b140      	cbz	r0, 800b020 <_vfiprintf_r+0x198>
 800b00e:	2340      	movs	r3, #64	; 0x40
 800b010:	eba0 000a 	sub.w	r0, r0, sl
 800b014:	fa03 f000 	lsl.w	r0, r3, r0
 800b018:	9b04      	ldr	r3, [sp, #16]
 800b01a:	4303      	orrs	r3, r0
 800b01c:	3401      	adds	r4, #1
 800b01e:	9304      	str	r3, [sp, #16]
 800b020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b024:	482c      	ldr	r0, [pc, #176]	; (800b0d8 <_vfiprintf_r+0x250>)
 800b026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b02a:	2206      	movs	r2, #6
 800b02c:	f7f5 f8e0 	bl	80001f0 <memchr>
 800b030:	2800      	cmp	r0, #0
 800b032:	d03f      	beq.n	800b0b4 <_vfiprintf_r+0x22c>
 800b034:	4b29      	ldr	r3, [pc, #164]	; (800b0dc <_vfiprintf_r+0x254>)
 800b036:	bb1b      	cbnz	r3, 800b080 <_vfiprintf_r+0x1f8>
 800b038:	9b03      	ldr	r3, [sp, #12]
 800b03a:	3307      	adds	r3, #7
 800b03c:	f023 0307 	bic.w	r3, r3, #7
 800b040:	3308      	adds	r3, #8
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b046:	443b      	add	r3, r7
 800b048:	9309      	str	r3, [sp, #36]	; 0x24
 800b04a:	e767      	b.n	800af1c <_vfiprintf_r+0x94>
 800b04c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b050:	460c      	mov	r4, r1
 800b052:	2001      	movs	r0, #1
 800b054:	e7a5      	b.n	800afa2 <_vfiprintf_r+0x11a>
 800b056:	2300      	movs	r3, #0
 800b058:	3401      	adds	r4, #1
 800b05a:	9305      	str	r3, [sp, #20]
 800b05c:	4619      	mov	r1, r3
 800b05e:	f04f 0c0a 	mov.w	ip, #10
 800b062:	4620      	mov	r0, r4
 800b064:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b068:	3a30      	subs	r2, #48	; 0x30
 800b06a:	2a09      	cmp	r2, #9
 800b06c:	d903      	bls.n	800b076 <_vfiprintf_r+0x1ee>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0c5      	beq.n	800affe <_vfiprintf_r+0x176>
 800b072:	9105      	str	r1, [sp, #20]
 800b074:	e7c3      	b.n	800affe <_vfiprintf_r+0x176>
 800b076:	fb0c 2101 	mla	r1, ip, r1, r2
 800b07a:	4604      	mov	r4, r0
 800b07c:	2301      	movs	r3, #1
 800b07e:	e7f0      	b.n	800b062 <_vfiprintf_r+0x1da>
 800b080:	ab03      	add	r3, sp, #12
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	462a      	mov	r2, r5
 800b086:	4b16      	ldr	r3, [pc, #88]	; (800b0e0 <_vfiprintf_r+0x258>)
 800b088:	a904      	add	r1, sp, #16
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7fd fed4 	bl	8008e38 <_printf_float>
 800b090:	4607      	mov	r7, r0
 800b092:	1c78      	adds	r0, r7, #1
 800b094:	d1d6      	bne.n	800b044 <_vfiprintf_r+0x1bc>
 800b096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b098:	07d9      	lsls	r1, r3, #31
 800b09a:	d405      	bmi.n	800b0a8 <_vfiprintf_r+0x220>
 800b09c:	89ab      	ldrh	r3, [r5, #12]
 800b09e:	059a      	lsls	r2, r3, #22
 800b0a0:	d402      	bmi.n	800b0a8 <_vfiprintf_r+0x220>
 800b0a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0a4:	f7ff fe74 	bl	800ad90 <__retarget_lock_release_recursive>
 800b0a8:	89ab      	ldrh	r3, [r5, #12]
 800b0aa:	065b      	lsls	r3, r3, #25
 800b0ac:	f53f af12 	bmi.w	800aed4 <_vfiprintf_r+0x4c>
 800b0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0b2:	e711      	b.n	800aed8 <_vfiprintf_r+0x50>
 800b0b4:	ab03      	add	r3, sp, #12
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	462a      	mov	r2, r5
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <_vfiprintf_r+0x258>)
 800b0bc:	a904      	add	r1, sp, #16
 800b0be:	4630      	mov	r0, r6
 800b0c0:	f7fe f95e 	bl	8009380 <_printf_i>
 800b0c4:	e7e4      	b.n	800b090 <_vfiprintf_r+0x208>
 800b0c6:	bf00      	nop
 800b0c8:	0800d56c 	.word	0x0800d56c
 800b0cc:	0800d58c 	.word	0x0800d58c
 800b0d0:	0800d54c 	.word	0x0800d54c
 800b0d4:	0800d3f4 	.word	0x0800d3f4
 800b0d8:	0800d3fe 	.word	0x0800d3fe
 800b0dc:	08008e39 	.word	0x08008e39
 800b0e0:	0800ae65 	.word	0x0800ae65
 800b0e4:	0800d3fa 	.word	0x0800d3fa

0800b0e8 <__swbuf_r>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	460e      	mov	r6, r1
 800b0ec:	4614      	mov	r4, r2
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	b118      	cbz	r0, 800b0fa <__swbuf_r+0x12>
 800b0f2:	6983      	ldr	r3, [r0, #24]
 800b0f4:	b90b      	cbnz	r3, 800b0fa <__swbuf_r+0x12>
 800b0f6:	f000 f9e7 	bl	800b4c8 <__sinit>
 800b0fa:	4b21      	ldr	r3, [pc, #132]	; (800b180 <__swbuf_r+0x98>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	d12b      	bne.n	800b158 <__swbuf_r+0x70>
 800b100:	686c      	ldr	r4, [r5, #4]
 800b102:	69a3      	ldr	r3, [r4, #24]
 800b104:	60a3      	str	r3, [r4, #8]
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	071a      	lsls	r2, r3, #28
 800b10a:	d52f      	bpl.n	800b16c <__swbuf_r+0x84>
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	b36b      	cbz	r3, 800b16c <__swbuf_r+0x84>
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	6820      	ldr	r0, [r4, #0]
 800b114:	1ac0      	subs	r0, r0, r3
 800b116:	6963      	ldr	r3, [r4, #20]
 800b118:	b2f6      	uxtb	r6, r6
 800b11a:	4283      	cmp	r3, r0
 800b11c:	4637      	mov	r7, r6
 800b11e:	dc04      	bgt.n	800b12a <__swbuf_r+0x42>
 800b120:	4621      	mov	r1, r4
 800b122:	4628      	mov	r0, r5
 800b124:	f000 f93c 	bl	800b3a0 <_fflush_r>
 800b128:	bb30      	cbnz	r0, 800b178 <__swbuf_r+0x90>
 800b12a:	68a3      	ldr	r3, [r4, #8]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	60a3      	str	r3, [r4, #8]
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	6022      	str	r2, [r4, #0]
 800b136:	701e      	strb	r6, [r3, #0]
 800b138:	6963      	ldr	r3, [r4, #20]
 800b13a:	3001      	adds	r0, #1
 800b13c:	4283      	cmp	r3, r0
 800b13e:	d004      	beq.n	800b14a <__swbuf_r+0x62>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	07db      	lsls	r3, r3, #31
 800b144:	d506      	bpl.n	800b154 <__swbuf_r+0x6c>
 800b146:	2e0a      	cmp	r6, #10
 800b148:	d104      	bne.n	800b154 <__swbuf_r+0x6c>
 800b14a:	4621      	mov	r1, r4
 800b14c:	4628      	mov	r0, r5
 800b14e:	f000 f927 	bl	800b3a0 <_fflush_r>
 800b152:	b988      	cbnz	r0, 800b178 <__swbuf_r+0x90>
 800b154:	4638      	mov	r0, r7
 800b156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b158:	4b0a      	ldr	r3, [pc, #40]	; (800b184 <__swbuf_r+0x9c>)
 800b15a:	429c      	cmp	r4, r3
 800b15c:	d101      	bne.n	800b162 <__swbuf_r+0x7a>
 800b15e:	68ac      	ldr	r4, [r5, #8]
 800b160:	e7cf      	b.n	800b102 <__swbuf_r+0x1a>
 800b162:	4b09      	ldr	r3, [pc, #36]	; (800b188 <__swbuf_r+0xa0>)
 800b164:	429c      	cmp	r4, r3
 800b166:	bf08      	it	eq
 800b168:	68ec      	ldreq	r4, [r5, #12]
 800b16a:	e7ca      	b.n	800b102 <__swbuf_r+0x1a>
 800b16c:	4621      	mov	r1, r4
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 f81a 	bl	800b1a8 <__swsetup_r>
 800b174:	2800      	cmp	r0, #0
 800b176:	d0cb      	beq.n	800b110 <__swbuf_r+0x28>
 800b178:	f04f 37ff 	mov.w	r7, #4294967295
 800b17c:	e7ea      	b.n	800b154 <__swbuf_r+0x6c>
 800b17e:	bf00      	nop
 800b180:	0800d56c 	.word	0x0800d56c
 800b184:	0800d58c 	.word	0x0800d58c
 800b188:	0800d54c 	.word	0x0800d54c

0800b18c <__ascii_wctomb>:
 800b18c:	b149      	cbz	r1, 800b1a2 <__ascii_wctomb+0x16>
 800b18e:	2aff      	cmp	r2, #255	; 0xff
 800b190:	bf85      	ittet	hi
 800b192:	238a      	movhi	r3, #138	; 0x8a
 800b194:	6003      	strhi	r3, [r0, #0]
 800b196:	700a      	strbls	r2, [r1, #0]
 800b198:	f04f 30ff 	movhi.w	r0, #4294967295
 800b19c:	bf98      	it	ls
 800b19e:	2001      	movls	r0, #1
 800b1a0:	4770      	bx	lr
 800b1a2:	4608      	mov	r0, r1
 800b1a4:	4770      	bx	lr
	...

0800b1a8 <__swsetup_r>:
 800b1a8:	4b32      	ldr	r3, [pc, #200]	; (800b274 <__swsetup_r+0xcc>)
 800b1aa:	b570      	push	{r4, r5, r6, lr}
 800b1ac:	681d      	ldr	r5, [r3, #0]
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	b125      	cbz	r5, 800b1be <__swsetup_r+0x16>
 800b1b4:	69ab      	ldr	r3, [r5, #24]
 800b1b6:	b913      	cbnz	r3, 800b1be <__swsetup_r+0x16>
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	f000 f985 	bl	800b4c8 <__sinit>
 800b1be:	4b2e      	ldr	r3, [pc, #184]	; (800b278 <__swsetup_r+0xd0>)
 800b1c0:	429c      	cmp	r4, r3
 800b1c2:	d10f      	bne.n	800b1e4 <__swsetup_r+0x3c>
 800b1c4:	686c      	ldr	r4, [r5, #4]
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1cc:	0719      	lsls	r1, r3, #28
 800b1ce:	d42c      	bmi.n	800b22a <__swsetup_r+0x82>
 800b1d0:	06dd      	lsls	r5, r3, #27
 800b1d2:	d411      	bmi.n	800b1f8 <__swsetup_r+0x50>
 800b1d4:	2309      	movs	r3, #9
 800b1d6:	6033      	str	r3, [r6, #0]
 800b1d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1dc:	81a3      	strh	r3, [r4, #12]
 800b1de:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e2:	e03e      	b.n	800b262 <__swsetup_r+0xba>
 800b1e4:	4b25      	ldr	r3, [pc, #148]	; (800b27c <__swsetup_r+0xd4>)
 800b1e6:	429c      	cmp	r4, r3
 800b1e8:	d101      	bne.n	800b1ee <__swsetup_r+0x46>
 800b1ea:	68ac      	ldr	r4, [r5, #8]
 800b1ec:	e7eb      	b.n	800b1c6 <__swsetup_r+0x1e>
 800b1ee:	4b24      	ldr	r3, [pc, #144]	; (800b280 <__swsetup_r+0xd8>)
 800b1f0:	429c      	cmp	r4, r3
 800b1f2:	bf08      	it	eq
 800b1f4:	68ec      	ldreq	r4, [r5, #12]
 800b1f6:	e7e6      	b.n	800b1c6 <__swsetup_r+0x1e>
 800b1f8:	0758      	lsls	r0, r3, #29
 800b1fa:	d512      	bpl.n	800b222 <__swsetup_r+0x7a>
 800b1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1fe:	b141      	cbz	r1, 800b212 <__swsetup_r+0x6a>
 800b200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b204:	4299      	cmp	r1, r3
 800b206:	d002      	beq.n	800b20e <__swsetup_r+0x66>
 800b208:	4630      	mov	r0, r6
 800b20a:	f7fd fccb 	bl	8008ba4 <_free_r>
 800b20e:	2300      	movs	r3, #0
 800b210:	6363      	str	r3, [r4, #52]	; 0x34
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	2300      	movs	r3, #0
 800b21c:	6063      	str	r3, [r4, #4]
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	f043 0308 	orr.w	r3, r3, #8
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	b94b      	cbnz	r3, 800b242 <__swsetup_r+0x9a>
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b238:	d003      	beq.n	800b242 <__swsetup_r+0x9a>
 800b23a:	4621      	mov	r1, r4
 800b23c:	4630      	mov	r0, r6
 800b23e:	f000 fa05 	bl	800b64c <__smakebuf_r>
 800b242:	89a0      	ldrh	r0, [r4, #12]
 800b244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b248:	f010 0301 	ands.w	r3, r0, #1
 800b24c:	d00a      	beq.n	800b264 <__swsetup_r+0xbc>
 800b24e:	2300      	movs	r3, #0
 800b250:	60a3      	str	r3, [r4, #8]
 800b252:	6963      	ldr	r3, [r4, #20]
 800b254:	425b      	negs	r3, r3
 800b256:	61a3      	str	r3, [r4, #24]
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	b943      	cbnz	r3, 800b26e <__swsetup_r+0xc6>
 800b25c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b260:	d1ba      	bne.n	800b1d8 <__swsetup_r+0x30>
 800b262:	bd70      	pop	{r4, r5, r6, pc}
 800b264:	0781      	lsls	r1, r0, #30
 800b266:	bf58      	it	pl
 800b268:	6963      	ldrpl	r3, [r4, #20]
 800b26a:	60a3      	str	r3, [r4, #8]
 800b26c:	e7f4      	b.n	800b258 <__swsetup_r+0xb0>
 800b26e:	2000      	movs	r0, #0
 800b270:	e7f7      	b.n	800b262 <__swsetup_r+0xba>
 800b272:	bf00      	nop
 800b274:	2000001c 	.word	0x2000001c
 800b278:	0800d56c 	.word	0x0800d56c
 800b27c:	0800d58c 	.word	0x0800d58c
 800b280:	0800d54c 	.word	0x0800d54c

0800b284 <abort>:
 800b284:	b508      	push	{r3, lr}
 800b286:	2006      	movs	r0, #6
 800b288:	f000 fa50 	bl	800b72c <raise>
 800b28c:	2001      	movs	r0, #1
 800b28e:	f7fd fad3 	bl	8008838 <_exit>
	...

0800b294 <__sflush_r>:
 800b294:	898a      	ldrh	r2, [r1, #12]
 800b296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29a:	4605      	mov	r5, r0
 800b29c:	0710      	lsls	r0, r2, #28
 800b29e:	460c      	mov	r4, r1
 800b2a0:	d458      	bmi.n	800b354 <__sflush_r+0xc0>
 800b2a2:	684b      	ldr	r3, [r1, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	dc05      	bgt.n	800b2b4 <__sflush_r+0x20>
 800b2a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	dc02      	bgt.n	800b2b4 <__sflush_r+0x20>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2b6:	2e00      	cmp	r6, #0
 800b2b8:	d0f9      	beq.n	800b2ae <__sflush_r+0x1a>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2c0:	682f      	ldr	r7, [r5, #0]
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	d032      	beq.n	800b32c <__sflush_r+0x98>
 800b2c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	075a      	lsls	r2, r3, #29
 800b2cc:	d505      	bpl.n	800b2da <__sflush_r+0x46>
 800b2ce:	6863      	ldr	r3, [r4, #4]
 800b2d0:	1ac0      	subs	r0, r0, r3
 800b2d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2d4:	b10b      	cbz	r3, 800b2da <__sflush_r+0x46>
 800b2d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2d8:	1ac0      	subs	r0, r0, r3
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4602      	mov	r2, r0
 800b2de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2e0:	6a21      	ldr	r1, [r4, #32]
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b0      	blx	r6
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	d106      	bne.n	800b2fa <__sflush_r+0x66>
 800b2ec:	6829      	ldr	r1, [r5, #0]
 800b2ee:	291d      	cmp	r1, #29
 800b2f0:	d82c      	bhi.n	800b34c <__sflush_r+0xb8>
 800b2f2:	4a2a      	ldr	r2, [pc, #168]	; (800b39c <__sflush_r+0x108>)
 800b2f4:	40ca      	lsrs	r2, r1
 800b2f6:	07d6      	lsls	r6, r2, #31
 800b2f8:	d528      	bpl.n	800b34c <__sflush_r+0xb8>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	6062      	str	r2, [r4, #4]
 800b2fe:	04d9      	lsls	r1, r3, #19
 800b300:	6922      	ldr	r2, [r4, #16]
 800b302:	6022      	str	r2, [r4, #0]
 800b304:	d504      	bpl.n	800b310 <__sflush_r+0x7c>
 800b306:	1c42      	adds	r2, r0, #1
 800b308:	d101      	bne.n	800b30e <__sflush_r+0x7a>
 800b30a:	682b      	ldr	r3, [r5, #0]
 800b30c:	b903      	cbnz	r3, 800b310 <__sflush_r+0x7c>
 800b30e:	6560      	str	r0, [r4, #84]	; 0x54
 800b310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b312:	602f      	str	r7, [r5, #0]
 800b314:	2900      	cmp	r1, #0
 800b316:	d0ca      	beq.n	800b2ae <__sflush_r+0x1a>
 800b318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b31c:	4299      	cmp	r1, r3
 800b31e:	d002      	beq.n	800b326 <__sflush_r+0x92>
 800b320:	4628      	mov	r0, r5
 800b322:	f7fd fc3f 	bl	8008ba4 <_free_r>
 800b326:	2000      	movs	r0, #0
 800b328:	6360      	str	r0, [r4, #52]	; 0x34
 800b32a:	e7c1      	b.n	800b2b0 <__sflush_r+0x1c>
 800b32c:	6a21      	ldr	r1, [r4, #32]
 800b32e:	2301      	movs	r3, #1
 800b330:	4628      	mov	r0, r5
 800b332:	47b0      	blx	r6
 800b334:	1c41      	adds	r1, r0, #1
 800b336:	d1c7      	bne.n	800b2c8 <__sflush_r+0x34>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0c4      	beq.n	800b2c8 <__sflush_r+0x34>
 800b33e:	2b1d      	cmp	r3, #29
 800b340:	d001      	beq.n	800b346 <__sflush_r+0xb2>
 800b342:	2b16      	cmp	r3, #22
 800b344:	d101      	bne.n	800b34a <__sflush_r+0xb6>
 800b346:	602f      	str	r7, [r5, #0]
 800b348:	e7b1      	b.n	800b2ae <__sflush_r+0x1a>
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	e7ad      	b.n	800b2b0 <__sflush_r+0x1c>
 800b354:	690f      	ldr	r7, [r1, #16]
 800b356:	2f00      	cmp	r7, #0
 800b358:	d0a9      	beq.n	800b2ae <__sflush_r+0x1a>
 800b35a:	0793      	lsls	r3, r2, #30
 800b35c:	680e      	ldr	r6, [r1, #0]
 800b35e:	bf08      	it	eq
 800b360:	694b      	ldreq	r3, [r1, #20]
 800b362:	600f      	str	r7, [r1, #0]
 800b364:	bf18      	it	ne
 800b366:	2300      	movne	r3, #0
 800b368:	eba6 0807 	sub.w	r8, r6, r7
 800b36c:	608b      	str	r3, [r1, #8]
 800b36e:	f1b8 0f00 	cmp.w	r8, #0
 800b372:	dd9c      	ble.n	800b2ae <__sflush_r+0x1a>
 800b374:	6a21      	ldr	r1, [r4, #32]
 800b376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b378:	4643      	mov	r3, r8
 800b37a:	463a      	mov	r2, r7
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b0      	blx	r6
 800b380:	2800      	cmp	r0, #0
 800b382:	dc06      	bgt.n	800b392 <__sflush_r+0xfe>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	f04f 30ff 	mov.w	r0, #4294967295
 800b390:	e78e      	b.n	800b2b0 <__sflush_r+0x1c>
 800b392:	4407      	add	r7, r0
 800b394:	eba8 0800 	sub.w	r8, r8, r0
 800b398:	e7e9      	b.n	800b36e <__sflush_r+0xda>
 800b39a:	bf00      	nop
 800b39c:	20400001 	.word	0x20400001

0800b3a0 <_fflush_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	690b      	ldr	r3, [r1, #16]
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	b913      	cbnz	r3, 800b3b0 <_fflush_r+0x10>
 800b3aa:	2500      	movs	r5, #0
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	b118      	cbz	r0, 800b3ba <_fflush_r+0x1a>
 800b3b2:	6983      	ldr	r3, [r0, #24]
 800b3b4:	b90b      	cbnz	r3, 800b3ba <_fflush_r+0x1a>
 800b3b6:	f000 f887 	bl	800b4c8 <__sinit>
 800b3ba:	4b14      	ldr	r3, [pc, #80]	; (800b40c <_fflush_r+0x6c>)
 800b3bc:	429c      	cmp	r4, r3
 800b3be:	d11b      	bne.n	800b3f8 <_fflush_r+0x58>
 800b3c0:	686c      	ldr	r4, [r5, #4]
 800b3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0ef      	beq.n	800b3aa <_fflush_r+0xa>
 800b3ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3cc:	07d0      	lsls	r0, r2, #31
 800b3ce:	d404      	bmi.n	800b3da <_fflush_r+0x3a>
 800b3d0:	0599      	lsls	r1, r3, #22
 800b3d2:	d402      	bmi.n	800b3da <_fflush_r+0x3a>
 800b3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3d6:	f7ff fcda 	bl	800ad8e <__retarget_lock_acquire_recursive>
 800b3da:	4628      	mov	r0, r5
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f7ff ff59 	bl	800b294 <__sflush_r>
 800b3e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3e4:	07da      	lsls	r2, r3, #31
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	d4e0      	bmi.n	800b3ac <_fflush_r+0xc>
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	059b      	lsls	r3, r3, #22
 800b3ee:	d4dd      	bmi.n	800b3ac <_fflush_r+0xc>
 800b3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3f2:	f7ff fccd 	bl	800ad90 <__retarget_lock_release_recursive>
 800b3f6:	e7d9      	b.n	800b3ac <_fflush_r+0xc>
 800b3f8:	4b05      	ldr	r3, [pc, #20]	; (800b410 <_fflush_r+0x70>)
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	d101      	bne.n	800b402 <_fflush_r+0x62>
 800b3fe:	68ac      	ldr	r4, [r5, #8]
 800b400:	e7df      	b.n	800b3c2 <_fflush_r+0x22>
 800b402:	4b04      	ldr	r3, [pc, #16]	; (800b414 <_fflush_r+0x74>)
 800b404:	429c      	cmp	r4, r3
 800b406:	bf08      	it	eq
 800b408:	68ec      	ldreq	r4, [r5, #12]
 800b40a:	e7da      	b.n	800b3c2 <_fflush_r+0x22>
 800b40c:	0800d56c 	.word	0x0800d56c
 800b410:	0800d58c 	.word	0x0800d58c
 800b414:	0800d54c 	.word	0x0800d54c

0800b418 <std>:
 800b418:	2300      	movs	r3, #0
 800b41a:	b510      	push	{r4, lr}
 800b41c:	4604      	mov	r4, r0
 800b41e:	e9c0 3300 	strd	r3, r3, [r0]
 800b422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b426:	6083      	str	r3, [r0, #8]
 800b428:	8181      	strh	r1, [r0, #12]
 800b42a:	6643      	str	r3, [r0, #100]	; 0x64
 800b42c:	81c2      	strh	r2, [r0, #14]
 800b42e:	6183      	str	r3, [r0, #24]
 800b430:	4619      	mov	r1, r3
 800b432:	2208      	movs	r2, #8
 800b434:	305c      	adds	r0, #92	; 0x5c
 800b436:	f7fd fbad 	bl	8008b94 <memset>
 800b43a:	4b05      	ldr	r3, [pc, #20]	; (800b450 <std+0x38>)
 800b43c:	6263      	str	r3, [r4, #36]	; 0x24
 800b43e:	4b05      	ldr	r3, [pc, #20]	; (800b454 <std+0x3c>)
 800b440:	62a3      	str	r3, [r4, #40]	; 0x28
 800b442:	4b05      	ldr	r3, [pc, #20]	; (800b458 <std+0x40>)
 800b444:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b446:	4b05      	ldr	r3, [pc, #20]	; (800b45c <std+0x44>)
 800b448:	6224      	str	r4, [r4, #32]
 800b44a:	6323      	str	r3, [r4, #48]	; 0x30
 800b44c:	bd10      	pop	{r4, pc}
 800b44e:	bf00      	nop
 800b450:	0800b765 	.word	0x0800b765
 800b454:	0800b787 	.word	0x0800b787
 800b458:	0800b7bf 	.word	0x0800b7bf
 800b45c:	0800b7e3 	.word	0x0800b7e3

0800b460 <_cleanup_r>:
 800b460:	4901      	ldr	r1, [pc, #4]	; (800b468 <_cleanup_r+0x8>)
 800b462:	f000 b8af 	b.w	800b5c4 <_fwalk_reent>
 800b466:	bf00      	nop
 800b468:	0800b3a1 	.word	0x0800b3a1

0800b46c <__sfmoreglue>:
 800b46c:	b570      	push	{r4, r5, r6, lr}
 800b46e:	1e4a      	subs	r2, r1, #1
 800b470:	2568      	movs	r5, #104	; 0x68
 800b472:	4355      	muls	r5, r2
 800b474:	460e      	mov	r6, r1
 800b476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b47a:	f7fd fbe3 	bl	8008c44 <_malloc_r>
 800b47e:	4604      	mov	r4, r0
 800b480:	b140      	cbz	r0, 800b494 <__sfmoreglue+0x28>
 800b482:	2100      	movs	r1, #0
 800b484:	e9c0 1600 	strd	r1, r6, [r0]
 800b488:	300c      	adds	r0, #12
 800b48a:	60a0      	str	r0, [r4, #8]
 800b48c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b490:	f7fd fb80 	bl	8008b94 <memset>
 800b494:	4620      	mov	r0, r4
 800b496:	bd70      	pop	{r4, r5, r6, pc}

0800b498 <__sfp_lock_acquire>:
 800b498:	4801      	ldr	r0, [pc, #4]	; (800b4a0 <__sfp_lock_acquire+0x8>)
 800b49a:	f7ff bc78 	b.w	800ad8e <__retarget_lock_acquire_recursive>
 800b49e:	bf00      	nop
 800b4a0:	2000d990 	.word	0x2000d990

0800b4a4 <__sfp_lock_release>:
 800b4a4:	4801      	ldr	r0, [pc, #4]	; (800b4ac <__sfp_lock_release+0x8>)
 800b4a6:	f7ff bc73 	b.w	800ad90 <__retarget_lock_release_recursive>
 800b4aa:	bf00      	nop
 800b4ac:	2000d990 	.word	0x2000d990

0800b4b0 <__sinit_lock_acquire>:
 800b4b0:	4801      	ldr	r0, [pc, #4]	; (800b4b8 <__sinit_lock_acquire+0x8>)
 800b4b2:	f7ff bc6c 	b.w	800ad8e <__retarget_lock_acquire_recursive>
 800b4b6:	bf00      	nop
 800b4b8:	2000d98b 	.word	0x2000d98b

0800b4bc <__sinit_lock_release>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	; (800b4c4 <__sinit_lock_release+0x8>)
 800b4be:	f7ff bc67 	b.w	800ad90 <__retarget_lock_release_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	2000d98b 	.word	0x2000d98b

0800b4c8 <__sinit>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	f7ff fff0 	bl	800b4b0 <__sinit_lock_acquire>
 800b4d0:	69a3      	ldr	r3, [r4, #24]
 800b4d2:	b11b      	cbz	r3, 800b4dc <__sinit+0x14>
 800b4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d8:	f7ff bff0 	b.w	800b4bc <__sinit_lock_release>
 800b4dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b4e2:	4b13      	ldr	r3, [pc, #76]	; (800b530 <__sinit+0x68>)
 800b4e4:	4a13      	ldr	r2, [pc, #76]	; (800b534 <__sinit+0x6c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4ea:	42a3      	cmp	r3, r4
 800b4ec:	bf04      	itt	eq
 800b4ee:	2301      	moveq	r3, #1
 800b4f0:	61a3      	streq	r3, [r4, #24]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 f820 	bl	800b538 <__sfp>
 800b4f8:	6060      	str	r0, [r4, #4]
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 f81c 	bl	800b538 <__sfp>
 800b500:	60a0      	str	r0, [r4, #8]
 800b502:	4620      	mov	r0, r4
 800b504:	f000 f818 	bl	800b538 <__sfp>
 800b508:	2200      	movs	r2, #0
 800b50a:	60e0      	str	r0, [r4, #12]
 800b50c:	2104      	movs	r1, #4
 800b50e:	6860      	ldr	r0, [r4, #4]
 800b510:	f7ff ff82 	bl	800b418 <std>
 800b514:	68a0      	ldr	r0, [r4, #8]
 800b516:	2201      	movs	r2, #1
 800b518:	2109      	movs	r1, #9
 800b51a:	f7ff ff7d 	bl	800b418 <std>
 800b51e:	68e0      	ldr	r0, [r4, #12]
 800b520:	2202      	movs	r2, #2
 800b522:	2112      	movs	r1, #18
 800b524:	f7ff ff78 	bl	800b418 <std>
 800b528:	2301      	movs	r3, #1
 800b52a:	61a3      	str	r3, [r4, #24]
 800b52c:	e7d2      	b.n	800b4d4 <__sinit+0xc>
 800b52e:	bf00      	nop
 800b530:	0800d1c8 	.word	0x0800d1c8
 800b534:	0800b461 	.word	0x0800b461

0800b538 <__sfp>:
 800b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53a:	4607      	mov	r7, r0
 800b53c:	f7ff ffac 	bl	800b498 <__sfp_lock_acquire>
 800b540:	4b1e      	ldr	r3, [pc, #120]	; (800b5bc <__sfp+0x84>)
 800b542:	681e      	ldr	r6, [r3, #0]
 800b544:	69b3      	ldr	r3, [r6, #24]
 800b546:	b913      	cbnz	r3, 800b54e <__sfp+0x16>
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff ffbd 	bl	800b4c8 <__sinit>
 800b54e:	3648      	adds	r6, #72	; 0x48
 800b550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b554:	3b01      	subs	r3, #1
 800b556:	d503      	bpl.n	800b560 <__sfp+0x28>
 800b558:	6833      	ldr	r3, [r6, #0]
 800b55a:	b30b      	cbz	r3, 800b5a0 <__sfp+0x68>
 800b55c:	6836      	ldr	r6, [r6, #0]
 800b55e:	e7f7      	b.n	800b550 <__sfp+0x18>
 800b560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b564:	b9d5      	cbnz	r5, 800b59c <__sfp+0x64>
 800b566:	4b16      	ldr	r3, [pc, #88]	; (800b5c0 <__sfp+0x88>)
 800b568:	60e3      	str	r3, [r4, #12]
 800b56a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b56e:	6665      	str	r5, [r4, #100]	; 0x64
 800b570:	f7ff fc0c 	bl	800ad8c <__retarget_lock_init_recursive>
 800b574:	f7ff ff96 	bl	800b4a4 <__sfp_lock_release>
 800b578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b57c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b580:	6025      	str	r5, [r4, #0]
 800b582:	61a5      	str	r5, [r4, #24]
 800b584:	2208      	movs	r2, #8
 800b586:	4629      	mov	r1, r5
 800b588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b58c:	f7fd fb02 	bl	8008b94 <memset>
 800b590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b598:	4620      	mov	r0, r4
 800b59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b59c:	3468      	adds	r4, #104	; 0x68
 800b59e:	e7d9      	b.n	800b554 <__sfp+0x1c>
 800b5a0:	2104      	movs	r1, #4
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	f7ff ff62 	bl	800b46c <__sfmoreglue>
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	6030      	str	r0, [r6, #0]
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d1d5      	bne.n	800b55c <__sfp+0x24>
 800b5b0:	f7ff ff78 	bl	800b4a4 <__sfp_lock_release>
 800b5b4:	230c      	movs	r3, #12
 800b5b6:	603b      	str	r3, [r7, #0]
 800b5b8:	e7ee      	b.n	800b598 <__sfp+0x60>
 800b5ba:	bf00      	nop
 800b5bc:	0800d1c8 	.word	0x0800d1c8
 800b5c0:	ffff0001 	.word	0xffff0001

0800b5c4 <_fwalk_reent>:
 800b5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	4688      	mov	r8, r1
 800b5cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5d0:	2700      	movs	r7, #0
 800b5d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b5da:	d505      	bpl.n	800b5e8 <_fwalk_reent+0x24>
 800b5dc:	6824      	ldr	r4, [r4, #0]
 800b5de:	2c00      	cmp	r4, #0
 800b5e0:	d1f7      	bne.n	800b5d2 <_fwalk_reent+0xe>
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e8:	89ab      	ldrh	r3, [r5, #12]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d907      	bls.n	800b5fe <_fwalk_reent+0x3a>
 800b5ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	d003      	beq.n	800b5fe <_fwalk_reent+0x3a>
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	47c0      	blx	r8
 800b5fc:	4307      	orrs	r7, r0
 800b5fe:	3568      	adds	r5, #104	; 0x68
 800b600:	e7e9      	b.n	800b5d6 <_fwalk_reent+0x12>

0800b602 <__swhatbuf_r>:
 800b602:	b570      	push	{r4, r5, r6, lr}
 800b604:	460e      	mov	r6, r1
 800b606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60a:	2900      	cmp	r1, #0
 800b60c:	b096      	sub	sp, #88	; 0x58
 800b60e:	4614      	mov	r4, r2
 800b610:	461d      	mov	r5, r3
 800b612:	da07      	bge.n	800b624 <__swhatbuf_r+0x22>
 800b614:	2300      	movs	r3, #0
 800b616:	602b      	str	r3, [r5, #0]
 800b618:	89b3      	ldrh	r3, [r6, #12]
 800b61a:	061a      	lsls	r2, r3, #24
 800b61c:	d410      	bmi.n	800b640 <__swhatbuf_r+0x3e>
 800b61e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b622:	e00e      	b.n	800b642 <__swhatbuf_r+0x40>
 800b624:	466a      	mov	r2, sp
 800b626:	f000 f903 	bl	800b830 <_fstat_r>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	dbf2      	blt.n	800b614 <__swhatbuf_r+0x12>
 800b62e:	9a01      	ldr	r2, [sp, #4]
 800b630:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b634:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b638:	425a      	negs	r2, r3
 800b63a:	415a      	adcs	r2, r3
 800b63c:	602a      	str	r2, [r5, #0]
 800b63e:	e7ee      	b.n	800b61e <__swhatbuf_r+0x1c>
 800b640:	2340      	movs	r3, #64	; 0x40
 800b642:	2000      	movs	r0, #0
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	b016      	add	sp, #88	; 0x58
 800b648:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b64c <__smakebuf_r>:
 800b64c:	898b      	ldrh	r3, [r1, #12]
 800b64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b650:	079d      	lsls	r5, r3, #30
 800b652:	4606      	mov	r6, r0
 800b654:	460c      	mov	r4, r1
 800b656:	d507      	bpl.n	800b668 <__smakebuf_r+0x1c>
 800b658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	6123      	str	r3, [r4, #16]
 800b660:	2301      	movs	r3, #1
 800b662:	6163      	str	r3, [r4, #20]
 800b664:	b002      	add	sp, #8
 800b666:	bd70      	pop	{r4, r5, r6, pc}
 800b668:	ab01      	add	r3, sp, #4
 800b66a:	466a      	mov	r2, sp
 800b66c:	f7ff ffc9 	bl	800b602 <__swhatbuf_r>
 800b670:	9900      	ldr	r1, [sp, #0]
 800b672:	4605      	mov	r5, r0
 800b674:	4630      	mov	r0, r6
 800b676:	f7fd fae5 	bl	8008c44 <_malloc_r>
 800b67a:	b948      	cbnz	r0, 800b690 <__smakebuf_r+0x44>
 800b67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b680:	059a      	lsls	r2, r3, #22
 800b682:	d4ef      	bmi.n	800b664 <__smakebuf_r+0x18>
 800b684:	f023 0303 	bic.w	r3, r3, #3
 800b688:	f043 0302 	orr.w	r3, r3, #2
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	e7e3      	b.n	800b658 <__smakebuf_r+0xc>
 800b690:	4b0d      	ldr	r3, [pc, #52]	; (800b6c8 <__smakebuf_r+0x7c>)
 800b692:	62b3      	str	r3, [r6, #40]	; 0x28
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	6020      	str	r0, [r4, #0]
 800b698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b69c:	81a3      	strh	r3, [r4, #12]
 800b69e:	9b00      	ldr	r3, [sp, #0]
 800b6a0:	6163      	str	r3, [r4, #20]
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	6120      	str	r0, [r4, #16]
 800b6a6:	b15b      	cbz	r3, 800b6c0 <__smakebuf_r+0x74>
 800b6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f000 f8d1 	bl	800b854 <_isatty_r>
 800b6b2:	b128      	cbz	r0, 800b6c0 <__smakebuf_r+0x74>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	f023 0303 	bic.w	r3, r3, #3
 800b6ba:	f043 0301 	orr.w	r3, r3, #1
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	89a0      	ldrh	r0, [r4, #12]
 800b6c2:	4305      	orrs	r5, r0
 800b6c4:	81a5      	strh	r5, [r4, #12]
 800b6c6:	e7cd      	b.n	800b664 <__smakebuf_r+0x18>
 800b6c8:	0800b461 	.word	0x0800b461

0800b6cc <_malloc_usable_size_r>:
 800b6cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d0:	1f18      	subs	r0, r3, #4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	bfbc      	itt	lt
 800b6d6:	580b      	ldrlt	r3, [r1, r0]
 800b6d8:	18c0      	addlt	r0, r0, r3
 800b6da:	4770      	bx	lr

0800b6dc <_raise_r>:
 800b6dc:	291f      	cmp	r1, #31
 800b6de:	b538      	push	{r3, r4, r5, lr}
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	d904      	bls.n	800b6f0 <_raise_r+0x14>
 800b6e6:	2316      	movs	r3, #22
 800b6e8:	6003      	str	r3, [r0, #0]
 800b6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6f2:	b112      	cbz	r2, 800b6fa <_raise_r+0x1e>
 800b6f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6f8:	b94b      	cbnz	r3, 800b70e <_raise_r+0x32>
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f000 f830 	bl	800b760 <_getpid_r>
 800b700:	462a      	mov	r2, r5
 800b702:	4601      	mov	r1, r0
 800b704:	4620      	mov	r0, r4
 800b706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b70a:	f000 b817 	b.w	800b73c <_kill_r>
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d00a      	beq.n	800b728 <_raise_r+0x4c>
 800b712:	1c59      	adds	r1, r3, #1
 800b714:	d103      	bne.n	800b71e <_raise_r+0x42>
 800b716:	2316      	movs	r3, #22
 800b718:	6003      	str	r3, [r0, #0]
 800b71a:	2001      	movs	r0, #1
 800b71c:	e7e7      	b.n	800b6ee <_raise_r+0x12>
 800b71e:	2400      	movs	r4, #0
 800b720:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b724:	4628      	mov	r0, r5
 800b726:	4798      	blx	r3
 800b728:	2000      	movs	r0, #0
 800b72a:	e7e0      	b.n	800b6ee <_raise_r+0x12>

0800b72c <raise>:
 800b72c:	4b02      	ldr	r3, [pc, #8]	; (800b738 <raise+0xc>)
 800b72e:	4601      	mov	r1, r0
 800b730:	6818      	ldr	r0, [r3, #0]
 800b732:	f7ff bfd3 	b.w	800b6dc <_raise_r>
 800b736:	bf00      	nop
 800b738:	2000001c 	.word	0x2000001c

0800b73c <_kill_r>:
 800b73c:	b538      	push	{r3, r4, r5, lr}
 800b73e:	4d07      	ldr	r5, [pc, #28]	; (800b75c <_kill_r+0x20>)
 800b740:	2300      	movs	r3, #0
 800b742:	4604      	mov	r4, r0
 800b744:	4608      	mov	r0, r1
 800b746:	4611      	mov	r1, r2
 800b748:	602b      	str	r3, [r5, #0]
 800b74a:	f7fd f865 	bl	8008818 <_kill>
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	d102      	bne.n	800b758 <_kill_r+0x1c>
 800b752:	682b      	ldr	r3, [r5, #0]
 800b754:	b103      	cbz	r3, 800b758 <_kill_r+0x1c>
 800b756:	6023      	str	r3, [r4, #0]
 800b758:	bd38      	pop	{r3, r4, r5, pc}
 800b75a:	bf00      	nop
 800b75c:	2000d984 	.word	0x2000d984

0800b760 <_getpid_r>:
 800b760:	f7fd b852 	b.w	8008808 <_getpid>

0800b764 <__sread>:
 800b764:	b510      	push	{r4, lr}
 800b766:	460c      	mov	r4, r1
 800b768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76c:	f000 f894 	bl	800b898 <_read_r>
 800b770:	2800      	cmp	r0, #0
 800b772:	bfab      	itete	ge
 800b774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b776:	89a3      	ldrhlt	r3, [r4, #12]
 800b778:	181b      	addge	r3, r3, r0
 800b77a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b77e:	bfac      	ite	ge
 800b780:	6563      	strge	r3, [r4, #84]	; 0x54
 800b782:	81a3      	strhlt	r3, [r4, #12]
 800b784:	bd10      	pop	{r4, pc}

0800b786 <__swrite>:
 800b786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78a:	461f      	mov	r7, r3
 800b78c:	898b      	ldrh	r3, [r1, #12]
 800b78e:	05db      	lsls	r3, r3, #23
 800b790:	4605      	mov	r5, r0
 800b792:	460c      	mov	r4, r1
 800b794:	4616      	mov	r6, r2
 800b796:	d505      	bpl.n	800b7a4 <__swrite+0x1e>
 800b798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79c:	2302      	movs	r3, #2
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f000 f868 	bl	800b874 <_lseek_r>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	4632      	mov	r2, r6
 800b7b2:	463b      	mov	r3, r7
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ba:	f000 b817 	b.w	800b7ec <_write_r>

0800b7be <__sseek>:
 800b7be:	b510      	push	{r4, lr}
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c6:	f000 f855 	bl	800b874 <_lseek_r>
 800b7ca:	1c43      	adds	r3, r0, #1
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	bf15      	itete	ne
 800b7d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7da:	81a3      	strheq	r3, [r4, #12]
 800b7dc:	bf18      	it	ne
 800b7de:	81a3      	strhne	r3, [r4, #12]
 800b7e0:	bd10      	pop	{r4, pc}

0800b7e2 <__sclose>:
 800b7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e6:	f000 b813 	b.w	800b810 <_close_r>
	...

0800b7ec <_write_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	4d07      	ldr	r5, [pc, #28]	; (800b80c <_write_r+0x20>)
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	4608      	mov	r0, r1
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	602a      	str	r2, [r5, #0]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f7fd f843 	bl	8008886 <_write>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_write_r+0x1e>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_write_r+0x1e>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	2000d984 	.word	0x2000d984

0800b810 <_close_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4d06      	ldr	r5, [pc, #24]	; (800b82c <_close_r+0x1c>)
 800b814:	2300      	movs	r3, #0
 800b816:	4604      	mov	r4, r0
 800b818:	4608      	mov	r0, r1
 800b81a:	602b      	str	r3, [r5, #0]
 800b81c:	f7fd f84f 	bl	80088be <_close>
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	d102      	bne.n	800b82a <_close_r+0x1a>
 800b824:	682b      	ldr	r3, [r5, #0]
 800b826:	b103      	cbz	r3, 800b82a <_close_r+0x1a>
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	bd38      	pop	{r3, r4, r5, pc}
 800b82c:	2000d984 	.word	0x2000d984

0800b830 <_fstat_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d07      	ldr	r5, [pc, #28]	; (800b850 <_fstat_r+0x20>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	4611      	mov	r1, r2
 800b83c:	602b      	str	r3, [r5, #0]
 800b83e:	f7fd f84a 	bl	80088d6 <_fstat>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	d102      	bne.n	800b84c <_fstat_r+0x1c>
 800b846:	682b      	ldr	r3, [r5, #0]
 800b848:	b103      	cbz	r3, 800b84c <_fstat_r+0x1c>
 800b84a:	6023      	str	r3, [r4, #0]
 800b84c:	bd38      	pop	{r3, r4, r5, pc}
 800b84e:	bf00      	nop
 800b850:	2000d984 	.word	0x2000d984

0800b854 <_isatty_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4d06      	ldr	r5, [pc, #24]	; (800b870 <_isatty_r+0x1c>)
 800b858:	2300      	movs	r3, #0
 800b85a:	4604      	mov	r4, r0
 800b85c:	4608      	mov	r0, r1
 800b85e:	602b      	str	r3, [r5, #0]
 800b860:	f7fd f849 	bl	80088f6 <_isatty>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_isatty_r+0x1a>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_isatty_r+0x1a>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	2000d984 	.word	0x2000d984

0800b874 <_lseek_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d07      	ldr	r5, [pc, #28]	; (800b894 <_lseek_r+0x20>)
 800b878:	4604      	mov	r4, r0
 800b87a:	4608      	mov	r0, r1
 800b87c:	4611      	mov	r1, r2
 800b87e:	2200      	movs	r2, #0
 800b880:	602a      	str	r2, [r5, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	f7fd f842 	bl	800890c <_lseek>
 800b888:	1c43      	adds	r3, r0, #1
 800b88a:	d102      	bne.n	800b892 <_lseek_r+0x1e>
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	b103      	cbz	r3, 800b892 <_lseek_r+0x1e>
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	bd38      	pop	{r3, r4, r5, pc}
 800b894:	2000d984 	.word	0x2000d984

0800b898 <_read_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	4d07      	ldr	r5, [pc, #28]	; (800b8b8 <_read_r+0x20>)
 800b89c:	4604      	mov	r4, r0
 800b89e:	4608      	mov	r0, r1
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	602a      	str	r2, [r5, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	f7fc ffd0 	bl	800884c <_read>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d102      	bne.n	800b8b6 <_read_r+0x1e>
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	b103      	cbz	r3, 800b8b6 <_read_r+0x1e>
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
 800b8b8:	2000d984 	.word	0x2000d984
 800b8bc:	00000000 	.word	0x00000000

0800b8c0 <atan>:
 800b8c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	ec55 4b10 	vmov	r4, r5, d0
 800b8c8:	4bc3      	ldr	r3, [pc, #780]	; (800bbd8 <atan+0x318>)
 800b8ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b8ce:	429e      	cmp	r6, r3
 800b8d0:	46ab      	mov	fp, r5
 800b8d2:	dd18      	ble.n	800b906 <atan+0x46>
 800b8d4:	4bc1      	ldr	r3, [pc, #772]	; (800bbdc <atan+0x31c>)
 800b8d6:	429e      	cmp	r6, r3
 800b8d8:	dc01      	bgt.n	800b8de <atan+0x1e>
 800b8da:	d109      	bne.n	800b8f0 <atan+0x30>
 800b8dc:	b144      	cbz	r4, 800b8f0 <atan+0x30>
 800b8de:	4622      	mov	r2, r4
 800b8e0:	462b      	mov	r3, r5
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f7f4 fcd9 	bl	800029c <__adddf3>
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	e006      	b.n	800b8fe <atan+0x3e>
 800b8f0:	f1bb 0f00 	cmp.w	fp, #0
 800b8f4:	f300 8131 	bgt.w	800bb5a <atan+0x29a>
 800b8f8:	a59b      	add	r5, pc, #620	; (adr r5, 800bb68 <atan+0x2a8>)
 800b8fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8fe:	ec45 4b10 	vmov	d0, r4, r5
 800b902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b906:	4bb6      	ldr	r3, [pc, #728]	; (800bbe0 <atan+0x320>)
 800b908:	429e      	cmp	r6, r3
 800b90a:	dc14      	bgt.n	800b936 <atan+0x76>
 800b90c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b910:	429e      	cmp	r6, r3
 800b912:	dc0d      	bgt.n	800b930 <atan+0x70>
 800b914:	a396      	add	r3, pc, #600	; (adr r3, 800bb70 <atan+0x2b0>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	ee10 0a10 	vmov	r0, s0
 800b91e:	4629      	mov	r1, r5
 800b920:	f7f4 fcbc 	bl	800029c <__adddf3>
 800b924:	4baf      	ldr	r3, [pc, #700]	; (800bbe4 <atan+0x324>)
 800b926:	2200      	movs	r2, #0
 800b928:	f7f5 f8fe 	bl	8000b28 <__aeabi_dcmpgt>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d1e6      	bne.n	800b8fe <atan+0x3e>
 800b930:	f04f 3aff 	mov.w	sl, #4294967295
 800b934:	e02b      	b.n	800b98e <atan+0xce>
 800b936:	f000 f963 	bl	800bc00 <fabs>
 800b93a:	4bab      	ldr	r3, [pc, #684]	; (800bbe8 <atan+0x328>)
 800b93c:	429e      	cmp	r6, r3
 800b93e:	ec55 4b10 	vmov	r4, r5, d0
 800b942:	f300 80bf 	bgt.w	800bac4 <atan+0x204>
 800b946:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b94a:	429e      	cmp	r6, r3
 800b94c:	f300 80a0 	bgt.w	800ba90 <atan+0x1d0>
 800b950:	ee10 2a10 	vmov	r2, s0
 800b954:	ee10 0a10 	vmov	r0, s0
 800b958:	462b      	mov	r3, r5
 800b95a:	4629      	mov	r1, r5
 800b95c:	f7f4 fc9e 	bl	800029c <__adddf3>
 800b960:	4ba0      	ldr	r3, [pc, #640]	; (800bbe4 <atan+0x324>)
 800b962:	2200      	movs	r2, #0
 800b964:	f7f4 fc98 	bl	8000298 <__aeabi_dsub>
 800b968:	2200      	movs	r2, #0
 800b96a:	4606      	mov	r6, r0
 800b96c:	460f      	mov	r7, r1
 800b96e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	f7f4 fc91 	bl	800029c <__adddf3>
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4630      	mov	r0, r6
 800b980:	4639      	mov	r1, r7
 800b982:	f7f4 ff6b 	bl	800085c <__aeabi_ddiv>
 800b986:	f04f 0a00 	mov.w	sl, #0
 800b98a:	4604      	mov	r4, r0
 800b98c:	460d      	mov	r5, r1
 800b98e:	4622      	mov	r2, r4
 800b990:	462b      	mov	r3, r5
 800b992:	4620      	mov	r0, r4
 800b994:	4629      	mov	r1, r5
 800b996:	f7f4 fe37 	bl	8000608 <__aeabi_dmul>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4680      	mov	r8, r0
 800b9a0:	4689      	mov	r9, r1
 800b9a2:	f7f4 fe31 	bl	8000608 <__aeabi_dmul>
 800b9a6:	a374      	add	r3, pc, #464	; (adr r3, 800bb78 <atan+0x2b8>)
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	460f      	mov	r7, r1
 800b9b0:	f7f4 fe2a 	bl	8000608 <__aeabi_dmul>
 800b9b4:	a372      	add	r3, pc, #456	; (adr r3, 800bb80 <atan+0x2c0>)
 800b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ba:	f7f4 fc6f 	bl	800029c <__adddf3>
 800b9be:	4632      	mov	r2, r6
 800b9c0:	463b      	mov	r3, r7
 800b9c2:	f7f4 fe21 	bl	8000608 <__aeabi_dmul>
 800b9c6:	a370      	add	r3, pc, #448	; (adr r3, 800bb88 <atan+0x2c8>)
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f7f4 fc66 	bl	800029c <__adddf3>
 800b9d0:	4632      	mov	r2, r6
 800b9d2:	463b      	mov	r3, r7
 800b9d4:	f7f4 fe18 	bl	8000608 <__aeabi_dmul>
 800b9d8:	a36d      	add	r3, pc, #436	; (adr r3, 800bb90 <atan+0x2d0>)
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	f7f4 fc5d 	bl	800029c <__adddf3>
 800b9e2:	4632      	mov	r2, r6
 800b9e4:	463b      	mov	r3, r7
 800b9e6:	f7f4 fe0f 	bl	8000608 <__aeabi_dmul>
 800b9ea:	a36b      	add	r3, pc, #428	; (adr r3, 800bb98 <atan+0x2d8>)
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f7f4 fc54 	bl	800029c <__adddf3>
 800b9f4:	4632      	mov	r2, r6
 800b9f6:	463b      	mov	r3, r7
 800b9f8:	f7f4 fe06 	bl	8000608 <__aeabi_dmul>
 800b9fc:	a368      	add	r3, pc, #416	; (adr r3, 800bba0 <atan+0x2e0>)
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	f7f4 fc4b 	bl	800029c <__adddf3>
 800ba06:	4642      	mov	r2, r8
 800ba08:	464b      	mov	r3, r9
 800ba0a:	f7f4 fdfd 	bl	8000608 <__aeabi_dmul>
 800ba0e:	a366      	add	r3, pc, #408	; (adr r3, 800bba8 <atan+0x2e8>)
 800ba10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba14:	4680      	mov	r8, r0
 800ba16:	4689      	mov	r9, r1
 800ba18:	4630      	mov	r0, r6
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	f7f4 fdf4 	bl	8000608 <__aeabi_dmul>
 800ba20:	a363      	add	r3, pc, #396	; (adr r3, 800bbb0 <atan+0x2f0>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f4 fc37 	bl	8000298 <__aeabi_dsub>
 800ba2a:	4632      	mov	r2, r6
 800ba2c:	463b      	mov	r3, r7
 800ba2e:	f7f4 fdeb 	bl	8000608 <__aeabi_dmul>
 800ba32:	a361      	add	r3, pc, #388	; (adr r3, 800bbb8 <atan+0x2f8>)
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	f7f4 fc2e 	bl	8000298 <__aeabi_dsub>
 800ba3c:	4632      	mov	r2, r6
 800ba3e:	463b      	mov	r3, r7
 800ba40:	f7f4 fde2 	bl	8000608 <__aeabi_dmul>
 800ba44:	a35e      	add	r3, pc, #376	; (adr r3, 800bbc0 <atan+0x300>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f7f4 fc25 	bl	8000298 <__aeabi_dsub>
 800ba4e:	4632      	mov	r2, r6
 800ba50:	463b      	mov	r3, r7
 800ba52:	f7f4 fdd9 	bl	8000608 <__aeabi_dmul>
 800ba56:	a35c      	add	r3, pc, #368	; (adr r3, 800bbc8 <atan+0x308>)
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	f7f4 fc1c 	bl	8000298 <__aeabi_dsub>
 800ba60:	4632      	mov	r2, r6
 800ba62:	463b      	mov	r3, r7
 800ba64:	f7f4 fdd0 	bl	8000608 <__aeabi_dmul>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	4649      	mov	r1, r9
 800ba70:	f7f4 fc14 	bl	800029c <__adddf3>
 800ba74:	4622      	mov	r2, r4
 800ba76:	462b      	mov	r3, r5
 800ba78:	f7f4 fdc6 	bl	8000608 <__aeabi_dmul>
 800ba7c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ba80:	4602      	mov	r2, r0
 800ba82:	460b      	mov	r3, r1
 800ba84:	d14b      	bne.n	800bb1e <atan+0x25e>
 800ba86:	4620      	mov	r0, r4
 800ba88:	4629      	mov	r1, r5
 800ba8a:	f7f4 fc05 	bl	8000298 <__aeabi_dsub>
 800ba8e:	e72c      	b.n	800b8ea <atan+0x2a>
 800ba90:	ee10 0a10 	vmov	r0, s0
 800ba94:	4b53      	ldr	r3, [pc, #332]	; (800bbe4 <atan+0x324>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	4629      	mov	r1, r5
 800ba9a:	f7f4 fbfd 	bl	8000298 <__aeabi_dsub>
 800ba9e:	4b51      	ldr	r3, [pc, #324]	; (800bbe4 <atan+0x324>)
 800baa0:	4606      	mov	r6, r0
 800baa2:	460f      	mov	r7, r1
 800baa4:	2200      	movs	r2, #0
 800baa6:	4620      	mov	r0, r4
 800baa8:	4629      	mov	r1, r5
 800baaa:	f7f4 fbf7 	bl	800029c <__adddf3>
 800baae:	4602      	mov	r2, r0
 800bab0:	460b      	mov	r3, r1
 800bab2:	4630      	mov	r0, r6
 800bab4:	4639      	mov	r1, r7
 800bab6:	f7f4 fed1 	bl	800085c <__aeabi_ddiv>
 800baba:	f04f 0a01 	mov.w	sl, #1
 800babe:	4604      	mov	r4, r0
 800bac0:	460d      	mov	r5, r1
 800bac2:	e764      	b.n	800b98e <atan+0xce>
 800bac4:	4b49      	ldr	r3, [pc, #292]	; (800bbec <atan+0x32c>)
 800bac6:	429e      	cmp	r6, r3
 800bac8:	da1d      	bge.n	800bb06 <atan+0x246>
 800baca:	ee10 0a10 	vmov	r0, s0
 800bace:	4b48      	ldr	r3, [pc, #288]	; (800bbf0 <atan+0x330>)
 800bad0:	2200      	movs	r2, #0
 800bad2:	4629      	mov	r1, r5
 800bad4:	f7f4 fbe0 	bl	8000298 <__aeabi_dsub>
 800bad8:	4b45      	ldr	r3, [pc, #276]	; (800bbf0 <atan+0x330>)
 800bada:	4606      	mov	r6, r0
 800badc:	460f      	mov	r7, r1
 800bade:	2200      	movs	r2, #0
 800bae0:	4620      	mov	r0, r4
 800bae2:	4629      	mov	r1, r5
 800bae4:	f7f4 fd90 	bl	8000608 <__aeabi_dmul>
 800bae8:	4b3e      	ldr	r3, [pc, #248]	; (800bbe4 <atan+0x324>)
 800baea:	2200      	movs	r2, #0
 800baec:	f7f4 fbd6 	bl	800029c <__adddf3>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	4630      	mov	r0, r6
 800baf6:	4639      	mov	r1, r7
 800baf8:	f7f4 feb0 	bl	800085c <__aeabi_ddiv>
 800bafc:	f04f 0a02 	mov.w	sl, #2
 800bb00:	4604      	mov	r4, r0
 800bb02:	460d      	mov	r5, r1
 800bb04:	e743      	b.n	800b98e <atan+0xce>
 800bb06:	462b      	mov	r3, r5
 800bb08:	ee10 2a10 	vmov	r2, s0
 800bb0c:	4939      	ldr	r1, [pc, #228]	; (800bbf4 <atan+0x334>)
 800bb0e:	2000      	movs	r0, #0
 800bb10:	f7f4 fea4 	bl	800085c <__aeabi_ddiv>
 800bb14:	f04f 0a03 	mov.w	sl, #3
 800bb18:	4604      	mov	r4, r0
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	e737      	b.n	800b98e <atan+0xce>
 800bb1e:	4b36      	ldr	r3, [pc, #216]	; (800bbf8 <atan+0x338>)
 800bb20:	4e36      	ldr	r6, [pc, #216]	; (800bbfc <atan+0x33c>)
 800bb22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bb26:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bb2a:	e9da 2300 	ldrd	r2, r3, [sl]
 800bb2e:	f7f4 fbb3 	bl	8000298 <__aeabi_dsub>
 800bb32:	4622      	mov	r2, r4
 800bb34:	462b      	mov	r3, r5
 800bb36:	f7f4 fbaf 	bl	8000298 <__aeabi_dsub>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bb42:	f7f4 fba9 	bl	8000298 <__aeabi_dsub>
 800bb46:	f1bb 0f00 	cmp.w	fp, #0
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	f6bf aed6 	bge.w	800b8fe <atan+0x3e>
 800bb52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb56:	461d      	mov	r5, r3
 800bb58:	e6d1      	b.n	800b8fe <atan+0x3e>
 800bb5a:	a51d      	add	r5, pc, #116	; (adr r5, 800bbd0 <atan+0x310>)
 800bb5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb60:	e6cd      	b.n	800b8fe <atan+0x3e>
 800bb62:	bf00      	nop
 800bb64:	f3af 8000 	nop.w
 800bb68:	54442d18 	.word	0x54442d18
 800bb6c:	bff921fb 	.word	0xbff921fb
 800bb70:	8800759c 	.word	0x8800759c
 800bb74:	7e37e43c 	.word	0x7e37e43c
 800bb78:	e322da11 	.word	0xe322da11
 800bb7c:	3f90ad3a 	.word	0x3f90ad3a
 800bb80:	24760deb 	.word	0x24760deb
 800bb84:	3fa97b4b 	.word	0x3fa97b4b
 800bb88:	a0d03d51 	.word	0xa0d03d51
 800bb8c:	3fb10d66 	.word	0x3fb10d66
 800bb90:	c54c206e 	.word	0xc54c206e
 800bb94:	3fb745cd 	.word	0x3fb745cd
 800bb98:	920083ff 	.word	0x920083ff
 800bb9c:	3fc24924 	.word	0x3fc24924
 800bba0:	5555550d 	.word	0x5555550d
 800bba4:	3fd55555 	.word	0x3fd55555
 800bba8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bbac:	bfa2b444 	.word	0xbfa2b444
 800bbb0:	52defd9a 	.word	0x52defd9a
 800bbb4:	3fadde2d 	.word	0x3fadde2d
 800bbb8:	af749a6d 	.word	0xaf749a6d
 800bbbc:	3fb3b0f2 	.word	0x3fb3b0f2
 800bbc0:	fe231671 	.word	0xfe231671
 800bbc4:	3fbc71c6 	.word	0x3fbc71c6
 800bbc8:	9998ebc4 	.word	0x9998ebc4
 800bbcc:	3fc99999 	.word	0x3fc99999
 800bbd0:	54442d18 	.word	0x54442d18
 800bbd4:	3ff921fb 	.word	0x3ff921fb
 800bbd8:	440fffff 	.word	0x440fffff
 800bbdc:	7ff00000 	.word	0x7ff00000
 800bbe0:	3fdbffff 	.word	0x3fdbffff
 800bbe4:	3ff00000 	.word	0x3ff00000
 800bbe8:	3ff2ffff 	.word	0x3ff2ffff
 800bbec:	40038000 	.word	0x40038000
 800bbf0:	3ff80000 	.word	0x3ff80000
 800bbf4:	bff00000 	.word	0xbff00000
 800bbf8:	0800d5d0 	.word	0x0800d5d0
 800bbfc:	0800d5b0 	.word	0x0800d5b0

0800bc00 <fabs>:
 800bc00:	ec51 0b10 	vmov	r0, r1, d0
 800bc04:	ee10 2a10 	vmov	r2, s0
 800bc08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc0c:	ec43 2b10 	vmov	d0, r2, r3
 800bc10:	4770      	bx	lr
	...

0800bc14 <sinf>:
 800bc14:	ee10 3a10 	vmov	r3, s0
 800bc18:	b507      	push	{r0, r1, r2, lr}
 800bc1a:	4a1d      	ldr	r2, [pc, #116]	; (800bc90 <sinf+0x7c>)
 800bc1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc20:	4293      	cmp	r3, r2
 800bc22:	dc05      	bgt.n	800bc30 <sinf+0x1c>
 800bc24:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800bc94 <sinf+0x80>
 800bc28:	2000      	movs	r0, #0
 800bc2a:	f000 fd43 	bl	800c6b4 <__kernel_sinf>
 800bc2e:	e004      	b.n	800bc3a <sinf+0x26>
 800bc30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bc34:	db04      	blt.n	800bc40 <sinf+0x2c>
 800bc36:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bc3a:	b003      	add	sp, #12
 800bc3c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc40:	4668      	mov	r0, sp
 800bc42:	f000 f911 	bl	800be68 <__ieee754_rem_pio2f>
 800bc46:	f000 0003 	and.w	r0, r0, #3
 800bc4a:	2801      	cmp	r0, #1
 800bc4c:	d008      	beq.n	800bc60 <sinf+0x4c>
 800bc4e:	2802      	cmp	r0, #2
 800bc50:	d00d      	beq.n	800bc6e <sinf+0x5a>
 800bc52:	b9b0      	cbnz	r0, 800bc82 <sinf+0x6e>
 800bc54:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc58:	ed9d 0a00 	vldr	s0, [sp]
 800bc5c:	2001      	movs	r0, #1
 800bc5e:	e7e4      	b.n	800bc2a <sinf+0x16>
 800bc60:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc64:	ed9d 0a00 	vldr	s0, [sp]
 800bc68:	f000 fa3a 	bl	800c0e0 <__kernel_cosf>
 800bc6c:	e7e5      	b.n	800bc3a <sinf+0x26>
 800bc6e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc72:	ed9d 0a00 	vldr	s0, [sp]
 800bc76:	2001      	movs	r0, #1
 800bc78:	f000 fd1c 	bl	800c6b4 <__kernel_sinf>
 800bc7c:	eeb1 0a40 	vneg.f32	s0, s0
 800bc80:	e7db      	b.n	800bc3a <sinf+0x26>
 800bc82:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc86:	ed9d 0a00 	vldr	s0, [sp]
 800bc8a:	f000 fa29 	bl	800c0e0 <__kernel_cosf>
 800bc8e:	e7f5      	b.n	800bc7c <sinf+0x68>
 800bc90:	3f490fd8 	.word	0x3f490fd8
 800bc94:	00000000 	.word	0x00000000

0800bc98 <sqrt>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	ed2d 8b02 	vpush	{d8}
 800bc9e:	ec55 4b10 	vmov	r4, r5, d0
 800bca2:	f000 f82d 	bl	800bd00 <__ieee754_sqrt>
 800bca6:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <sqrt+0x64>)
 800bca8:	eeb0 8a40 	vmov.f32	s16, s0
 800bcac:	eef0 8a60 	vmov.f32	s17, s1
 800bcb0:	f993 3000 	ldrsb.w	r3, [r3]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	d019      	beq.n	800bcec <sqrt+0x54>
 800bcb8:	4622      	mov	r2, r4
 800bcba:	462b      	mov	r3, r5
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	f7f4 ff3c 	bl	8000b3c <__aeabi_dcmpun>
 800bcc4:	b990      	cbnz	r0, 800bcec <sqrt+0x54>
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7f4 ff0d 	bl	8000aec <__aeabi_dcmplt>
 800bcd2:	b158      	cbz	r0, 800bcec <sqrt+0x54>
 800bcd4:	f7fc ff2c 	bl	8008b30 <__errno>
 800bcd8:	2321      	movs	r3, #33	; 0x21
 800bcda:	6003      	str	r3, [r0, #0]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2300      	movs	r3, #0
 800bce0:	4610      	mov	r0, r2
 800bce2:	4619      	mov	r1, r3
 800bce4:	f7f4 fdba 	bl	800085c <__aeabi_ddiv>
 800bce8:	ec41 0b18 	vmov	d8, r0, r1
 800bcec:	eeb0 0a48 	vmov.f32	s0, s16
 800bcf0:	eef0 0a68 	vmov.f32	s1, s17
 800bcf4:	ecbd 8b02 	vpop	{d8}
 800bcf8:	bd38      	pop	{r3, r4, r5, pc}
 800bcfa:	bf00      	nop
 800bcfc:	200001ec 	.word	0x200001ec

0800bd00 <__ieee754_sqrt>:
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	ec55 4b10 	vmov	r4, r5, d0
 800bd08:	4e56      	ldr	r6, [pc, #344]	; (800be64 <__ieee754_sqrt+0x164>)
 800bd0a:	43ae      	bics	r6, r5
 800bd0c:	ee10 0a10 	vmov	r0, s0
 800bd10:	ee10 3a10 	vmov	r3, s0
 800bd14:	4629      	mov	r1, r5
 800bd16:	462a      	mov	r2, r5
 800bd18:	d110      	bne.n	800bd3c <__ieee754_sqrt+0x3c>
 800bd1a:	ee10 2a10 	vmov	r2, s0
 800bd1e:	462b      	mov	r3, r5
 800bd20:	f7f4 fc72 	bl	8000608 <__aeabi_dmul>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 fab6 	bl	800029c <__adddf3>
 800bd30:	4604      	mov	r4, r0
 800bd32:	460d      	mov	r5, r1
 800bd34:	ec45 4b10 	vmov	d0, r4, r5
 800bd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd3c:	2d00      	cmp	r5, #0
 800bd3e:	dc10      	bgt.n	800bd62 <__ieee754_sqrt+0x62>
 800bd40:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd44:	4330      	orrs	r0, r6
 800bd46:	d0f5      	beq.n	800bd34 <__ieee754_sqrt+0x34>
 800bd48:	b15d      	cbz	r5, 800bd62 <__ieee754_sqrt+0x62>
 800bd4a:	ee10 2a10 	vmov	r2, s0
 800bd4e:	462b      	mov	r3, r5
 800bd50:	ee10 0a10 	vmov	r0, s0
 800bd54:	f7f4 faa0 	bl	8000298 <__aeabi_dsub>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	f7f4 fd7e 	bl	800085c <__aeabi_ddiv>
 800bd60:	e7e6      	b.n	800bd30 <__ieee754_sqrt+0x30>
 800bd62:	1509      	asrs	r1, r1, #20
 800bd64:	d076      	beq.n	800be54 <__ieee754_sqrt+0x154>
 800bd66:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bd6a:	07ce      	lsls	r6, r1, #31
 800bd6c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bd70:	bf5e      	ittt	pl
 800bd72:	0fda      	lsrpl	r2, r3, #31
 800bd74:	005b      	lslpl	r3, r3, #1
 800bd76:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bd7a:	0fda      	lsrs	r2, r3, #31
 800bd7c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bd80:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bd84:	2000      	movs	r0, #0
 800bd86:	106d      	asrs	r5, r5, #1
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	f04f 0e16 	mov.w	lr, #22
 800bd8e:	4684      	mov	ip, r0
 800bd90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd94:	eb0c 0401 	add.w	r4, ip, r1
 800bd98:	4294      	cmp	r4, r2
 800bd9a:	bfde      	ittt	le
 800bd9c:	1b12      	suble	r2, r2, r4
 800bd9e:	eb04 0c01 	addle.w	ip, r4, r1
 800bda2:	1840      	addle	r0, r0, r1
 800bda4:	0052      	lsls	r2, r2, #1
 800bda6:	f1be 0e01 	subs.w	lr, lr, #1
 800bdaa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bdae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bdb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdb6:	d1ed      	bne.n	800bd94 <__ieee754_sqrt+0x94>
 800bdb8:	4671      	mov	r1, lr
 800bdba:	2720      	movs	r7, #32
 800bdbc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bdc0:	4562      	cmp	r2, ip
 800bdc2:	eb04 060e 	add.w	r6, r4, lr
 800bdc6:	dc02      	bgt.n	800bdce <__ieee754_sqrt+0xce>
 800bdc8:	d113      	bne.n	800bdf2 <__ieee754_sqrt+0xf2>
 800bdca:	429e      	cmp	r6, r3
 800bdcc:	d811      	bhi.n	800bdf2 <__ieee754_sqrt+0xf2>
 800bdce:	2e00      	cmp	r6, #0
 800bdd0:	eb06 0e04 	add.w	lr, r6, r4
 800bdd4:	da43      	bge.n	800be5e <__ieee754_sqrt+0x15e>
 800bdd6:	f1be 0f00 	cmp.w	lr, #0
 800bdda:	db40      	blt.n	800be5e <__ieee754_sqrt+0x15e>
 800bddc:	f10c 0801 	add.w	r8, ip, #1
 800bde0:	eba2 020c 	sub.w	r2, r2, ip
 800bde4:	429e      	cmp	r6, r3
 800bde6:	bf88      	it	hi
 800bde8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bdec:	1b9b      	subs	r3, r3, r6
 800bdee:	4421      	add	r1, r4
 800bdf0:	46c4      	mov	ip, r8
 800bdf2:	0052      	lsls	r2, r2, #1
 800bdf4:	3f01      	subs	r7, #1
 800bdf6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bdfa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bdfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be02:	d1dd      	bne.n	800bdc0 <__ieee754_sqrt+0xc0>
 800be04:	4313      	orrs	r3, r2
 800be06:	d006      	beq.n	800be16 <__ieee754_sqrt+0x116>
 800be08:	1c4c      	adds	r4, r1, #1
 800be0a:	bf13      	iteet	ne
 800be0c:	3101      	addne	r1, #1
 800be0e:	3001      	addeq	r0, #1
 800be10:	4639      	moveq	r1, r7
 800be12:	f021 0101 	bicne.w	r1, r1, #1
 800be16:	1043      	asrs	r3, r0, #1
 800be18:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be1c:	0849      	lsrs	r1, r1, #1
 800be1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800be22:	07c2      	lsls	r2, r0, #31
 800be24:	bf48      	it	mi
 800be26:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800be2a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800be2e:	460c      	mov	r4, r1
 800be30:	463d      	mov	r5, r7
 800be32:	e77f      	b.n	800bd34 <__ieee754_sqrt+0x34>
 800be34:	0ada      	lsrs	r2, r3, #11
 800be36:	3815      	subs	r0, #21
 800be38:	055b      	lsls	r3, r3, #21
 800be3a:	2a00      	cmp	r2, #0
 800be3c:	d0fa      	beq.n	800be34 <__ieee754_sqrt+0x134>
 800be3e:	02d7      	lsls	r7, r2, #11
 800be40:	d50a      	bpl.n	800be58 <__ieee754_sqrt+0x158>
 800be42:	f1c1 0420 	rsb	r4, r1, #32
 800be46:	fa23 f404 	lsr.w	r4, r3, r4
 800be4a:	1e4d      	subs	r5, r1, #1
 800be4c:	408b      	lsls	r3, r1
 800be4e:	4322      	orrs	r2, r4
 800be50:	1b41      	subs	r1, r0, r5
 800be52:	e788      	b.n	800bd66 <__ieee754_sqrt+0x66>
 800be54:	4608      	mov	r0, r1
 800be56:	e7f0      	b.n	800be3a <__ieee754_sqrt+0x13a>
 800be58:	0052      	lsls	r2, r2, #1
 800be5a:	3101      	adds	r1, #1
 800be5c:	e7ef      	b.n	800be3e <__ieee754_sqrt+0x13e>
 800be5e:	46e0      	mov	r8, ip
 800be60:	e7be      	b.n	800bde0 <__ieee754_sqrt+0xe0>
 800be62:	bf00      	nop
 800be64:	7ff00000 	.word	0x7ff00000

0800be68 <__ieee754_rem_pio2f>:
 800be68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be6a:	ee10 6a10 	vmov	r6, s0
 800be6e:	4b8e      	ldr	r3, [pc, #568]	; (800c0a8 <__ieee754_rem_pio2f+0x240>)
 800be70:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800be74:	429d      	cmp	r5, r3
 800be76:	b087      	sub	sp, #28
 800be78:	eef0 7a40 	vmov.f32	s15, s0
 800be7c:	4604      	mov	r4, r0
 800be7e:	dc05      	bgt.n	800be8c <__ieee754_rem_pio2f+0x24>
 800be80:	2300      	movs	r3, #0
 800be82:	ed80 0a00 	vstr	s0, [r0]
 800be86:	6043      	str	r3, [r0, #4]
 800be88:	2000      	movs	r0, #0
 800be8a:	e01a      	b.n	800bec2 <__ieee754_rem_pio2f+0x5a>
 800be8c:	4b87      	ldr	r3, [pc, #540]	; (800c0ac <__ieee754_rem_pio2f+0x244>)
 800be8e:	429d      	cmp	r5, r3
 800be90:	dc46      	bgt.n	800bf20 <__ieee754_rem_pio2f+0xb8>
 800be92:	2e00      	cmp	r6, #0
 800be94:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c0b0 <__ieee754_rem_pio2f+0x248>
 800be98:	4b86      	ldr	r3, [pc, #536]	; (800c0b4 <__ieee754_rem_pio2f+0x24c>)
 800be9a:	f025 050f 	bic.w	r5, r5, #15
 800be9e:	dd1f      	ble.n	800bee0 <__ieee754_rem_pio2f+0x78>
 800bea0:	429d      	cmp	r5, r3
 800bea2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bea6:	d00e      	beq.n	800bec6 <__ieee754_rem_pio2f+0x5e>
 800bea8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c0b8 <__ieee754_rem_pio2f+0x250>
 800beac:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800beb0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800beb4:	ed80 0a00 	vstr	s0, [r0]
 800beb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bebc:	2001      	movs	r0, #1
 800bebe:	edc4 7a01 	vstr	s15, [r4, #4]
 800bec2:	b007      	add	sp, #28
 800bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c0bc <__ieee754_rem_pio2f+0x254>
 800beca:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c0c0 <__ieee754_rem_pio2f+0x258>
 800bece:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bed2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bed6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800beda:	edc0 6a00 	vstr	s13, [r0]
 800bede:	e7eb      	b.n	800beb8 <__ieee754_rem_pio2f+0x50>
 800bee0:	429d      	cmp	r5, r3
 800bee2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bee6:	d00e      	beq.n	800bf06 <__ieee754_rem_pio2f+0x9e>
 800bee8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c0b8 <__ieee754_rem_pio2f+0x250>
 800beec:	ee37 0a87 	vadd.f32	s0, s15, s14
 800bef0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bef4:	ed80 0a00 	vstr	s0, [r0]
 800bef8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	edc4 7a01 	vstr	s15, [r4, #4]
 800bf04:	e7dd      	b.n	800bec2 <__ieee754_rem_pio2f+0x5a>
 800bf06:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c0bc <__ieee754_rem_pio2f+0x254>
 800bf0a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c0c0 <__ieee754_rem_pio2f+0x258>
 800bf0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bf12:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bf16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bf1a:	edc0 6a00 	vstr	s13, [r0]
 800bf1e:	e7eb      	b.n	800bef8 <__ieee754_rem_pio2f+0x90>
 800bf20:	4b68      	ldr	r3, [pc, #416]	; (800c0c4 <__ieee754_rem_pio2f+0x25c>)
 800bf22:	429d      	cmp	r5, r3
 800bf24:	dc72      	bgt.n	800c00c <__ieee754_rem_pio2f+0x1a4>
 800bf26:	f000 fc0d 	bl	800c744 <fabsf>
 800bf2a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c0c8 <__ieee754_rem_pio2f+0x260>
 800bf2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bf32:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bf36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf3e:	ee17 0a90 	vmov	r0, s15
 800bf42:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c0b0 <__ieee754_rem_pio2f+0x248>
 800bf46:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bf4a:	281f      	cmp	r0, #31
 800bf4c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c0b8 <__ieee754_rem_pio2f+0x250>
 800bf50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf54:	eeb1 6a47 	vneg.f32	s12, s14
 800bf58:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bf5c:	ee16 2a90 	vmov	r2, s13
 800bf60:	dc1c      	bgt.n	800bf9c <__ieee754_rem_pio2f+0x134>
 800bf62:	495a      	ldr	r1, [pc, #360]	; (800c0cc <__ieee754_rem_pio2f+0x264>)
 800bf64:	1e47      	subs	r7, r0, #1
 800bf66:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800bf6a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800bf6e:	428b      	cmp	r3, r1
 800bf70:	d014      	beq.n	800bf9c <__ieee754_rem_pio2f+0x134>
 800bf72:	6022      	str	r2, [r4, #0]
 800bf74:	ed94 7a00 	vldr	s14, [r4]
 800bf78:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bf7c:	2e00      	cmp	r6, #0
 800bf7e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bf82:	ed84 0a01 	vstr	s0, [r4, #4]
 800bf86:	da9c      	bge.n	800bec2 <__ieee754_rem_pio2f+0x5a>
 800bf88:	eeb1 7a47 	vneg.f32	s14, s14
 800bf8c:	eeb1 0a40 	vneg.f32	s0, s0
 800bf90:	ed84 7a00 	vstr	s14, [r4]
 800bf94:	ed84 0a01 	vstr	s0, [r4, #4]
 800bf98:	4240      	negs	r0, r0
 800bf9a:	e792      	b.n	800bec2 <__ieee754_rem_pio2f+0x5a>
 800bf9c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bfa0:	15eb      	asrs	r3, r5, #23
 800bfa2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800bfa6:	2d08      	cmp	r5, #8
 800bfa8:	dde3      	ble.n	800bf72 <__ieee754_rem_pio2f+0x10a>
 800bfaa:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c0bc <__ieee754_rem_pio2f+0x254>
 800bfae:	eef0 6a40 	vmov.f32	s13, s0
 800bfb2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bfb6:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bfba:	eea6 0a27 	vfma.f32	s0, s12, s15
 800bfbe:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c0c0 <__ieee754_rem_pio2f+0x258>
 800bfc2:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800bfc6:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800bfca:	eef0 7a40 	vmov.f32	s15, s0
 800bfce:	ee15 2a90 	vmov	r2, s11
 800bfd2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bfd6:	1a5b      	subs	r3, r3, r1
 800bfd8:	2b19      	cmp	r3, #25
 800bfda:	dc04      	bgt.n	800bfe6 <__ieee754_rem_pio2f+0x17e>
 800bfdc:	edc4 5a00 	vstr	s11, [r4]
 800bfe0:	eeb0 0a66 	vmov.f32	s0, s13
 800bfe4:	e7c6      	b.n	800bf74 <__ieee754_rem_pio2f+0x10c>
 800bfe6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c0d0 <__ieee754_rem_pio2f+0x268>
 800bfea:	eeb0 0a66 	vmov.f32	s0, s13
 800bfee:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bff2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bff6:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c0d4 <__ieee754_rem_pio2f+0x26c>
 800bffa:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bffe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c002:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c006:	ed84 7a00 	vstr	s14, [r4]
 800c00a:	e7b3      	b.n	800bf74 <__ieee754_rem_pio2f+0x10c>
 800c00c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c010:	db06      	blt.n	800c020 <__ieee754_rem_pio2f+0x1b8>
 800c012:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c016:	edc0 7a01 	vstr	s15, [r0, #4]
 800c01a:	edc0 7a00 	vstr	s15, [r0]
 800c01e:	e733      	b.n	800be88 <__ieee754_rem_pio2f+0x20>
 800c020:	15ea      	asrs	r2, r5, #23
 800c022:	3a86      	subs	r2, #134	; 0x86
 800c024:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c028:	ee07 3a90 	vmov	s15, r3
 800c02c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c030:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c0d8 <__ieee754_rem_pio2f+0x270>
 800c034:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c03c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c040:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c044:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c04c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c050:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c054:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c058:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c060:	edcd 7a05 	vstr	s15, [sp, #20]
 800c064:	d11e      	bne.n	800c0a4 <__ieee754_rem_pio2f+0x23c>
 800c066:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06e:	bf14      	ite	ne
 800c070:	2302      	movne	r3, #2
 800c072:	2301      	moveq	r3, #1
 800c074:	4919      	ldr	r1, [pc, #100]	; (800c0dc <__ieee754_rem_pio2f+0x274>)
 800c076:	9101      	str	r1, [sp, #4]
 800c078:	2102      	movs	r1, #2
 800c07a:	9100      	str	r1, [sp, #0]
 800c07c:	a803      	add	r0, sp, #12
 800c07e:	4621      	mov	r1, r4
 800c080:	f000 f88e 	bl	800c1a0 <__kernel_rem_pio2f>
 800c084:	2e00      	cmp	r6, #0
 800c086:	f6bf af1c 	bge.w	800bec2 <__ieee754_rem_pio2f+0x5a>
 800c08a:	edd4 7a00 	vldr	s15, [r4]
 800c08e:	eef1 7a67 	vneg.f32	s15, s15
 800c092:	edc4 7a00 	vstr	s15, [r4]
 800c096:	edd4 7a01 	vldr	s15, [r4, #4]
 800c09a:	eef1 7a67 	vneg.f32	s15, s15
 800c09e:	edc4 7a01 	vstr	s15, [r4, #4]
 800c0a2:	e779      	b.n	800bf98 <__ieee754_rem_pio2f+0x130>
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e7e5      	b.n	800c074 <__ieee754_rem_pio2f+0x20c>
 800c0a8:	3f490fd8 	.word	0x3f490fd8
 800c0ac:	4016cbe3 	.word	0x4016cbe3
 800c0b0:	3fc90f80 	.word	0x3fc90f80
 800c0b4:	3fc90fd0 	.word	0x3fc90fd0
 800c0b8:	37354443 	.word	0x37354443
 800c0bc:	37354400 	.word	0x37354400
 800c0c0:	2e85a308 	.word	0x2e85a308
 800c0c4:	43490f80 	.word	0x43490f80
 800c0c8:	3f22f984 	.word	0x3f22f984
 800c0cc:	0800d5f0 	.word	0x0800d5f0
 800c0d0:	2e85a300 	.word	0x2e85a300
 800c0d4:	248d3132 	.word	0x248d3132
 800c0d8:	43800000 	.word	0x43800000
 800c0dc:	0800d670 	.word	0x0800d670

0800c0e0 <__kernel_cosf>:
 800c0e0:	ee10 3a10 	vmov	r3, s0
 800c0e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c0ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c0f0:	da05      	bge.n	800c0fe <__kernel_cosf+0x1e>
 800c0f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c0f6:	ee17 2a90 	vmov	r2, s15
 800c0fa:	2a00      	cmp	r2, #0
 800c0fc:	d03d      	beq.n	800c17a <__kernel_cosf+0x9a>
 800c0fe:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c102:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c180 <__kernel_cosf+0xa0>
 800c106:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c184 <__kernel_cosf+0xa4>
 800c10a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c188 <__kernel_cosf+0xa8>
 800c10e:	4a1f      	ldr	r2, [pc, #124]	; (800c18c <__kernel_cosf+0xac>)
 800c110:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c114:	4293      	cmp	r3, r2
 800c116:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c190 <__kernel_cosf+0xb0>
 800c11a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c11e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c194 <__kernel_cosf+0xb4>
 800c122:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c126:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c198 <__kernel_cosf+0xb8>
 800c12a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c12e:	eeb0 7a66 	vmov.f32	s14, s13
 800c132:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c136:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c13a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c13e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c142:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c146:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c14a:	dc04      	bgt.n	800c156 <__kernel_cosf+0x76>
 800c14c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c150:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c154:	4770      	bx	lr
 800c156:	4a11      	ldr	r2, [pc, #68]	; (800c19c <__kernel_cosf+0xbc>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	bfda      	itte	le
 800c15c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c160:	ee06 3a90 	vmovle	s13, r3
 800c164:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c168:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c16c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c174:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c178:	4770      	bx	lr
 800c17a:	eeb0 0a46 	vmov.f32	s0, s12
 800c17e:	4770      	bx	lr
 800c180:	ad47d74e 	.word	0xad47d74e
 800c184:	310f74f6 	.word	0x310f74f6
 800c188:	3d2aaaab 	.word	0x3d2aaaab
 800c18c:	3e999999 	.word	0x3e999999
 800c190:	b493f27c 	.word	0xb493f27c
 800c194:	37d00d01 	.word	0x37d00d01
 800c198:	bab60b61 	.word	0xbab60b61
 800c19c:	3f480000 	.word	0x3f480000

0800c1a0 <__kernel_rem_pio2f>:
 800c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	ed2d 8b04 	vpush	{d8-d9}
 800c1a8:	b0d7      	sub	sp, #348	; 0x15c
 800c1aa:	4616      	mov	r6, r2
 800c1ac:	4698      	mov	r8, r3
 800c1ae:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c1b0:	4bbb      	ldr	r3, [pc, #748]	; (800c4a0 <__kernel_rem_pio2f+0x300>)
 800c1b2:	9001      	str	r0, [sp, #4]
 800c1b4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800c1b8:	1d33      	adds	r3, r6, #4
 800c1ba:	460d      	mov	r5, r1
 800c1bc:	f108 39ff 	add.w	r9, r8, #4294967295
 800c1c0:	db29      	blt.n	800c216 <__kernel_rem_pio2f+0x76>
 800c1c2:	1ef1      	subs	r1, r6, #3
 800c1c4:	bf48      	it	mi
 800c1c6:	1d31      	addmi	r1, r6, #4
 800c1c8:	10c9      	asrs	r1, r1, #3
 800c1ca:	1c4c      	adds	r4, r1, #1
 800c1cc:	00e3      	lsls	r3, r4, #3
 800c1ce:	9302      	str	r3, [sp, #8]
 800c1d0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c1d2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800c4b0 <__kernel_rem_pio2f+0x310>
 800c1d6:	eba1 0009 	sub.w	r0, r1, r9
 800c1da:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800c1de:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800c1e2:	eb07 0c09 	add.w	ip, r7, r9
 800c1e6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	4563      	cmp	r3, ip
 800c1ee:	dd14      	ble.n	800c21a <__kernel_rem_pio2f+0x7a>
 800c1f0:	ab1a      	add	r3, sp, #104	; 0x68
 800c1f2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800c1f6:	46cc      	mov	ip, r9
 800c1f8:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800c1fc:	f1c8 0b01 	rsb	fp, r8, #1
 800c200:	eb0b 020c 	add.w	r2, fp, ip
 800c204:	4297      	cmp	r7, r2
 800c206:	db27      	blt.n	800c258 <__kernel_rem_pio2f+0xb8>
 800c208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c20c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c4b0 <__kernel_rem_pio2f+0x310>
 800c210:	4618      	mov	r0, r3
 800c212:	2200      	movs	r2, #0
 800c214:	e016      	b.n	800c244 <__kernel_rem_pio2f+0xa4>
 800c216:	2100      	movs	r1, #0
 800c218:	e7d7      	b.n	800c1ca <__kernel_rem_pio2f+0x2a>
 800c21a:	42d8      	cmn	r0, r3
 800c21c:	bf5d      	ittte	pl
 800c21e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800c222:	ee07 2a90 	vmovpl	s15, r2
 800c226:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c22a:	eef0 7a47 	vmovmi.f32	s15, s14
 800c22e:	ecea 7a01 	vstmia	sl!, {s15}
 800c232:	3301      	adds	r3, #1
 800c234:	e7da      	b.n	800c1ec <__kernel_rem_pio2f+0x4c>
 800c236:	ecfe 6a01 	vldmia	lr!, {s13}
 800c23a:	ed90 7a00 	vldr	s14, [r0]
 800c23e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c242:	3201      	adds	r2, #1
 800c244:	454a      	cmp	r2, r9
 800c246:	f1a0 0004 	sub.w	r0, r0, #4
 800c24a:	ddf4      	ble.n	800c236 <__kernel_rem_pio2f+0x96>
 800c24c:	ecea 7a01 	vstmia	sl!, {s15}
 800c250:	3304      	adds	r3, #4
 800c252:	f10c 0c01 	add.w	ip, ip, #1
 800c256:	e7d3      	b.n	800c200 <__kernel_rem_pio2f+0x60>
 800c258:	ab06      	add	r3, sp, #24
 800c25a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800c25e:	9304      	str	r3, [sp, #16]
 800c260:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c262:	eddf 8a92 	vldr	s17, [pc, #584]	; 800c4ac <__kernel_rem_pio2f+0x30c>
 800c266:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800c4a8 <__kernel_rem_pio2f+0x308>
 800c26a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c26e:	9303      	str	r3, [sp, #12]
 800c270:	46ba      	mov	sl, r7
 800c272:	ab56      	add	r3, sp, #344	; 0x158
 800c274:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c278:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c27c:	ab06      	add	r3, sp, #24
 800c27e:	4618      	mov	r0, r3
 800c280:	4652      	mov	r2, sl
 800c282:	2a00      	cmp	r2, #0
 800c284:	dc51      	bgt.n	800c32a <__kernel_rem_pio2f+0x18a>
 800c286:	4620      	mov	r0, r4
 800c288:	9305      	str	r3, [sp, #20]
 800c28a:	f000 faa5 	bl	800c7d8 <scalbnf>
 800c28e:	eeb0 8a40 	vmov.f32	s16, s0
 800c292:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c296:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c29a:	f000 fa5b 	bl	800c754 <floorf>
 800c29e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c2a2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c2a6:	2c00      	cmp	r4, #0
 800c2a8:	9b05      	ldr	r3, [sp, #20]
 800c2aa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c2ae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c2b2:	edcd 7a00 	vstr	s15, [sp]
 800c2b6:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c2ba:	dd4b      	ble.n	800c354 <__kernel_rem_pio2f+0x1b4>
 800c2bc:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c2c0:	aa06      	add	r2, sp, #24
 800c2c2:	f1c4 0e08 	rsb	lr, r4, #8
 800c2c6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c2ca:	ee17 1a90 	vmov	r1, s15
 800c2ce:	fa42 f00e 	asr.w	r0, r2, lr
 800c2d2:	4401      	add	r1, r0
 800c2d4:	9100      	str	r1, [sp, #0]
 800c2d6:	fa00 f00e 	lsl.w	r0, r0, lr
 800c2da:	a906      	add	r1, sp, #24
 800c2dc:	1a12      	subs	r2, r2, r0
 800c2de:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c2e2:	f1c4 0007 	rsb	r0, r4, #7
 800c2e6:	fa42 fb00 	asr.w	fp, r2, r0
 800c2ea:	f1bb 0f00 	cmp.w	fp, #0
 800c2ee:	dd43      	ble.n	800c378 <__kernel_rem_pio2f+0x1d8>
 800c2f0:	9a00      	ldr	r2, [sp, #0]
 800c2f2:	f04f 0e00 	mov.w	lr, #0
 800c2f6:	3201      	adds	r2, #1
 800c2f8:	9200      	str	r2, [sp, #0]
 800c2fa:	4670      	mov	r0, lr
 800c2fc:	45f2      	cmp	sl, lr
 800c2fe:	dc6c      	bgt.n	800c3da <__kernel_rem_pio2f+0x23a>
 800c300:	2c00      	cmp	r4, #0
 800c302:	dd04      	ble.n	800c30e <__kernel_rem_pio2f+0x16e>
 800c304:	2c01      	cmp	r4, #1
 800c306:	d079      	beq.n	800c3fc <__kernel_rem_pio2f+0x25c>
 800c308:	2c02      	cmp	r4, #2
 800c30a:	f000 8082 	beq.w	800c412 <__kernel_rem_pio2f+0x272>
 800c30e:	f1bb 0f02 	cmp.w	fp, #2
 800c312:	d131      	bne.n	800c378 <__kernel_rem_pio2f+0x1d8>
 800c314:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c318:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c31c:	b360      	cbz	r0, 800c378 <__kernel_rem_pio2f+0x1d8>
 800c31e:	4620      	mov	r0, r4
 800c320:	f000 fa5a 	bl	800c7d8 <scalbnf>
 800c324:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c328:	e026      	b.n	800c378 <__kernel_rem_pio2f+0x1d8>
 800c32a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c32e:	3a01      	subs	r2, #1
 800c330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c334:	a942      	add	r1, sp, #264	; 0x108
 800c336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c33a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800c33e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c342:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c346:	eca0 0a01 	vstmia	r0!, {s0}
 800c34a:	ed9c 0a00 	vldr	s0, [ip]
 800c34e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c352:	e796      	b.n	800c282 <__kernel_rem_pio2f+0xe2>
 800c354:	d107      	bne.n	800c366 <__kernel_rem_pio2f+0x1c6>
 800c356:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c35a:	a906      	add	r1, sp, #24
 800c35c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c360:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800c364:	e7c1      	b.n	800c2ea <__kernel_rem_pio2f+0x14a>
 800c366:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c36a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c372:	da2f      	bge.n	800c3d4 <__kernel_rem_pio2f+0x234>
 800c374:	f04f 0b00 	mov.w	fp, #0
 800c378:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c380:	f040 8098 	bne.w	800c4b4 <__kernel_rem_pio2f+0x314>
 800c384:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c388:	469c      	mov	ip, r3
 800c38a:	2200      	movs	r2, #0
 800c38c:	45bc      	cmp	ip, r7
 800c38e:	da48      	bge.n	800c422 <__kernel_rem_pio2f+0x282>
 800c390:	2a00      	cmp	r2, #0
 800c392:	d05f      	beq.n	800c454 <__kernel_rem_pio2f+0x2b4>
 800c394:	aa06      	add	r2, sp, #24
 800c396:	3c08      	subs	r4, #8
 800c398:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c39c:	2900      	cmp	r1, #0
 800c39e:	d07d      	beq.n	800c49c <__kernel_rem_pio2f+0x2fc>
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	f000 fa16 	bl	800c7d8 <scalbnf>
 800c3ac:	9b01      	ldr	r3, [sp, #4]
 800c3ae:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800c4ac <__kernel_rem_pio2f+0x30c>
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	f280 80af 	bge.w	800c518 <__kernel_rem_pio2f+0x378>
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	2400      	movs	r4, #0
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	f2c0 80d0 	blt.w	800c564 <__kernel_rem_pio2f+0x3c4>
 800c3c4:	a942      	add	r1, sp, #264	; 0x108
 800c3c6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800c3ca:	4a36      	ldr	r2, [pc, #216]	; (800c4a4 <__kernel_rem_pio2f+0x304>)
 800c3cc:	eddf 7a38 	vldr	s15, [pc, #224]	; 800c4b0 <__kernel_rem_pio2f+0x310>
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	e0bb      	b.n	800c54c <__kernel_rem_pio2f+0x3ac>
 800c3d4:	f04f 0b02 	mov.w	fp, #2
 800c3d8:	e78a      	b.n	800c2f0 <__kernel_rem_pio2f+0x150>
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	b948      	cbnz	r0, 800c3f2 <__kernel_rem_pio2f+0x252>
 800c3de:	b11a      	cbz	r2, 800c3e8 <__kernel_rem_pio2f+0x248>
 800c3e0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f10e 0e01 	add.w	lr, lr, #1
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	e784      	b.n	800c2fc <__kernel_rem_pio2f+0x15c>
 800c3f2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	e7f5      	b.n	800c3e8 <__kernel_rem_pio2f+0x248>
 800c3fc:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c400:	ab06      	add	r3, sp, #24
 800c402:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c40a:	aa06      	add	r2, sp, #24
 800c40c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800c410:	e77d      	b.n	800c30e <__kernel_rem_pio2f+0x16e>
 800c412:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c416:	ab06      	add	r3, sp, #24
 800c418:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c41c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c420:	e7f3      	b.n	800c40a <__kernel_rem_pio2f+0x26a>
 800c422:	a906      	add	r1, sp, #24
 800c424:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800c428:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c42c:	4302      	orrs	r2, r0
 800c42e:	e7ad      	b.n	800c38c <__kernel_rem_pio2f+0x1ec>
 800c430:	3001      	adds	r0, #1
 800c432:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c436:	2a00      	cmp	r2, #0
 800c438:	d0fa      	beq.n	800c430 <__kernel_rem_pio2f+0x290>
 800c43a:	a91a      	add	r1, sp, #104	; 0x68
 800c43c:	eb0a 0208 	add.w	r2, sl, r8
 800c440:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c444:	f10a 0301 	add.w	r3, sl, #1
 800c448:	eb0a 0100 	add.w	r1, sl, r0
 800c44c:	4299      	cmp	r1, r3
 800c44e:	da04      	bge.n	800c45a <__kernel_rem_pio2f+0x2ba>
 800c450:	468a      	mov	sl, r1
 800c452:	e70e      	b.n	800c272 <__kernel_rem_pio2f+0xd2>
 800c454:	9b04      	ldr	r3, [sp, #16]
 800c456:	2001      	movs	r0, #1
 800c458:	e7eb      	b.n	800c432 <__kernel_rem_pio2f+0x292>
 800c45a:	9803      	ldr	r0, [sp, #12]
 800c45c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c460:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c464:	9000      	str	r0, [sp, #0]
 800c466:	ee07 0a90 	vmov	s15, r0
 800c46a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c46e:	2000      	movs	r0, #0
 800c470:	ece2 7a01 	vstmia	r2!, {s15}
 800c474:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c4b0 <__kernel_rem_pio2f+0x310>
 800c478:	4696      	mov	lr, r2
 800c47a:	4548      	cmp	r0, r9
 800c47c:	dd06      	ble.n	800c48c <__kernel_rem_pio2f+0x2ec>
 800c47e:	a842      	add	r0, sp, #264	; 0x108
 800c480:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c484:	edc0 7a00 	vstr	s15, [r0]
 800c488:	3301      	adds	r3, #1
 800c48a:	e7df      	b.n	800c44c <__kernel_rem_pio2f+0x2ac>
 800c48c:	ecfc 6a01 	vldmia	ip!, {s13}
 800c490:	ed3e 7a01 	vldmdb	lr!, {s14}
 800c494:	3001      	adds	r0, #1
 800c496:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c49a:	e7ee      	b.n	800c47a <__kernel_rem_pio2f+0x2da>
 800c49c:	3b01      	subs	r3, #1
 800c49e:	e779      	b.n	800c394 <__kernel_rem_pio2f+0x1f4>
 800c4a0:	0800d9b4 	.word	0x0800d9b4
 800c4a4:	0800d988 	.word	0x0800d988
 800c4a8:	43800000 	.word	0x43800000
 800c4ac:	3b800000 	.word	0x3b800000
 800c4b0:	00000000 	.word	0x00000000
 800c4b4:	9b02      	ldr	r3, [sp, #8]
 800c4b6:	eeb0 0a48 	vmov.f32	s0, s16
 800c4ba:	1b98      	subs	r0, r3, r6
 800c4bc:	f000 f98c 	bl	800c7d8 <scalbnf>
 800c4c0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c4a8 <__kernel_rem_pio2f+0x308>
 800c4c4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4cc:	db1b      	blt.n	800c506 <__kernel_rem_pio2f+0x366>
 800c4ce:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c4ac <__kernel_rem_pio2f+0x30c>
 800c4d2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c4d6:	aa06      	add	r2, sp, #24
 800c4d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4dc:	a906      	add	r1, sp, #24
 800c4de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4e2:	3408      	adds	r4, #8
 800c4e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c4e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c4f0:	ee10 3a10 	vmov	r3, s0
 800c4f4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c4f8:	ee17 2a90 	vmov	r2, s15
 800c4fc:	f10a 0301 	add.w	r3, sl, #1
 800c500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c504:	e74c      	b.n	800c3a0 <__kernel_rem_pio2f+0x200>
 800c506:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c50a:	aa06      	add	r2, sp, #24
 800c50c:	ee10 3a10 	vmov	r3, s0
 800c510:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c514:	4653      	mov	r3, sl
 800c516:	e743      	b.n	800c3a0 <__kernel_rem_pio2f+0x200>
 800c518:	aa42      	add	r2, sp, #264	; 0x108
 800c51a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c51e:	aa06      	add	r2, sp, #24
 800c520:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c524:	9201      	str	r2, [sp, #4]
 800c526:	ee07 2a90 	vmov	s15, r2
 800c52a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c52e:	3901      	subs	r1, #1
 800c530:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c534:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c538:	edc0 7a00 	vstr	s15, [r0]
 800c53c:	e73a      	b.n	800c3b4 <__kernel_rem_pio2f+0x214>
 800c53e:	ecf2 6a01 	vldmia	r2!, {s13}
 800c542:	ecb6 7a01 	vldmia	r6!, {s14}
 800c546:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c54a:	3101      	adds	r1, #1
 800c54c:	42b9      	cmp	r1, r7
 800c54e:	dc01      	bgt.n	800c554 <__kernel_rem_pio2f+0x3b4>
 800c550:	428c      	cmp	r4, r1
 800c552:	daf4      	bge.n	800c53e <__kernel_rem_pio2f+0x39e>
 800c554:	aa56      	add	r2, sp, #344	; 0x158
 800c556:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800c55a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c55e:	3801      	subs	r0, #1
 800c560:	3401      	adds	r4, #1
 800c562:	e72c      	b.n	800c3be <__kernel_rem_pio2f+0x21e>
 800c564:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c566:	2a02      	cmp	r2, #2
 800c568:	dc0a      	bgt.n	800c580 <__kernel_rem_pio2f+0x3e0>
 800c56a:	2a00      	cmp	r2, #0
 800c56c:	dc61      	bgt.n	800c632 <__kernel_rem_pio2f+0x492>
 800c56e:	d03c      	beq.n	800c5ea <__kernel_rem_pio2f+0x44a>
 800c570:	9b00      	ldr	r3, [sp, #0]
 800c572:	f003 0007 	and.w	r0, r3, #7
 800c576:	b057      	add	sp, #348	; 0x15c
 800c578:	ecbd 8b04 	vpop	{d8-d9}
 800c57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c580:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c582:	2a03      	cmp	r2, #3
 800c584:	d1f4      	bne.n	800c570 <__kernel_rem_pio2f+0x3d0>
 800c586:	aa2e      	add	r2, sp, #184	; 0xb8
 800c588:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c58c:	4608      	mov	r0, r1
 800c58e:	461c      	mov	r4, r3
 800c590:	2c00      	cmp	r4, #0
 800c592:	f1a0 0004 	sub.w	r0, r0, #4
 800c596:	dc59      	bgt.n	800c64c <__kernel_rem_pio2f+0x4ac>
 800c598:	4618      	mov	r0, r3
 800c59a:	2801      	cmp	r0, #1
 800c59c:	f1a1 0104 	sub.w	r1, r1, #4
 800c5a0:	dc64      	bgt.n	800c66c <__kernel_rem_pio2f+0x4cc>
 800c5a2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800c4b0 <__kernel_rem_pio2f+0x310>
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	dc70      	bgt.n	800c68c <__kernel_rem_pio2f+0x4ec>
 800c5aa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c5ae:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c5b2:	f1bb 0f00 	cmp.w	fp, #0
 800c5b6:	d172      	bne.n	800c69e <__kernel_rem_pio2f+0x4fe>
 800c5b8:	edc5 6a00 	vstr	s13, [r5]
 800c5bc:	ed85 7a01 	vstr	s14, [r5, #4]
 800c5c0:	edc5 7a02 	vstr	s15, [r5, #8]
 800c5c4:	e7d4      	b.n	800c570 <__kernel_rem_pio2f+0x3d0>
 800c5c6:	aa2e      	add	r2, sp, #184	; 0xb8
 800c5c8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c5cc:	ed91 7a00 	vldr	s14, [r1]
 800c5d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	daf5      	bge.n	800c5c6 <__kernel_rem_pio2f+0x426>
 800c5da:	f1bb 0f00 	cmp.w	fp, #0
 800c5de:	d001      	beq.n	800c5e4 <__kernel_rem_pio2f+0x444>
 800c5e0:	eef1 7a67 	vneg.f32	s15, s15
 800c5e4:	edc5 7a00 	vstr	s15, [r5]
 800c5e8:	e7c2      	b.n	800c570 <__kernel_rem_pio2f+0x3d0>
 800c5ea:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c4b0 <__kernel_rem_pio2f+0x310>
 800c5ee:	e7f2      	b.n	800c5d6 <__kernel_rem_pio2f+0x436>
 800c5f0:	aa2e      	add	r2, sp, #184	; 0xb8
 800c5f2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c5f6:	edd0 7a00 	vldr	s15, [r0]
 800c5fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5fe:	3901      	subs	r1, #1
 800c600:	2900      	cmp	r1, #0
 800c602:	daf5      	bge.n	800c5f0 <__kernel_rem_pio2f+0x450>
 800c604:	f1bb 0f00 	cmp.w	fp, #0
 800c608:	d017      	beq.n	800c63a <__kernel_rem_pio2f+0x49a>
 800c60a:	eef1 7a47 	vneg.f32	s15, s14
 800c60e:	edc5 7a00 	vstr	s15, [r5]
 800c612:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c61a:	a82f      	add	r0, sp, #188	; 0xbc
 800c61c:	2101      	movs	r1, #1
 800c61e:	428b      	cmp	r3, r1
 800c620:	da0e      	bge.n	800c640 <__kernel_rem_pio2f+0x4a0>
 800c622:	f1bb 0f00 	cmp.w	fp, #0
 800c626:	d001      	beq.n	800c62c <__kernel_rem_pio2f+0x48c>
 800c628:	eef1 7a67 	vneg.f32	s15, s15
 800c62c:	edc5 7a01 	vstr	s15, [r5, #4]
 800c630:	e79e      	b.n	800c570 <__kernel_rem_pio2f+0x3d0>
 800c632:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800c4b0 <__kernel_rem_pio2f+0x310>
 800c636:	4619      	mov	r1, r3
 800c638:	e7e2      	b.n	800c600 <__kernel_rem_pio2f+0x460>
 800c63a:	eef0 7a47 	vmov.f32	s15, s14
 800c63e:	e7e6      	b.n	800c60e <__kernel_rem_pio2f+0x46e>
 800c640:	ecb0 7a01 	vldmia	r0!, {s14}
 800c644:	3101      	adds	r1, #1
 800c646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c64a:	e7e8      	b.n	800c61e <__kernel_rem_pio2f+0x47e>
 800c64c:	edd0 7a00 	vldr	s15, [r0]
 800c650:	edd0 6a01 	vldr	s13, [r0, #4]
 800c654:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c658:	3c01      	subs	r4, #1
 800c65a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c65e:	ed80 7a00 	vstr	s14, [r0]
 800c662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c666:	edc0 7a01 	vstr	s15, [r0, #4]
 800c66a:	e791      	b.n	800c590 <__kernel_rem_pio2f+0x3f0>
 800c66c:	edd1 7a00 	vldr	s15, [r1]
 800c670:	edd1 6a01 	vldr	s13, [r1, #4]
 800c674:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c678:	3801      	subs	r0, #1
 800c67a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c67e:	ed81 7a00 	vstr	s14, [r1]
 800c682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c686:	edc1 7a01 	vstr	s15, [r1, #4]
 800c68a:	e786      	b.n	800c59a <__kernel_rem_pio2f+0x3fa>
 800c68c:	aa2e      	add	r2, sp, #184	; 0xb8
 800c68e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c692:	ed91 7a00 	vldr	s14, [r1]
 800c696:	3b01      	subs	r3, #1
 800c698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c69c:	e783      	b.n	800c5a6 <__kernel_rem_pio2f+0x406>
 800c69e:	eef1 6a66 	vneg.f32	s13, s13
 800c6a2:	eeb1 7a47 	vneg.f32	s14, s14
 800c6a6:	edc5 6a00 	vstr	s13, [r5]
 800c6aa:	ed85 7a01 	vstr	s14, [r5, #4]
 800c6ae:	eef1 7a67 	vneg.f32	s15, s15
 800c6b2:	e785      	b.n	800c5c0 <__kernel_rem_pio2f+0x420>

0800c6b4 <__kernel_sinf>:
 800c6b4:	ee10 3a10 	vmov	r3, s0
 800c6b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c6c0:	da04      	bge.n	800c6cc <__kernel_sinf+0x18>
 800c6c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c6c6:	ee17 3a90 	vmov	r3, s15
 800c6ca:	b35b      	cbz	r3, 800c724 <__kernel_sinf+0x70>
 800c6cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c6d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c728 <__kernel_sinf+0x74>
 800c6d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c72c <__kernel_sinf+0x78>
 800c6d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c6dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c730 <__kernel_sinf+0x7c>
 800c6e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6e4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c734 <__kernel_sinf+0x80>
 800c6e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c6ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c738 <__kernel_sinf+0x84>
 800c6f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c6f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6f8:	b930      	cbnz	r0, 800c708 <__kernel_sinf+0x54>
 800c6fa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c73c <__kernel_sinf+0x88>
 800c6fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c702:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c706:	4770      	bx	lr
 800c708:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c70c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c710:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c714:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c718:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c740 <__kernel_sinf+0x8c>
 800c71c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c720:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	2f2ec9d3 	.word	0x2f2ec9d3
 800c72c:	b2d72f34 	.word	0xb2d72f34
 800c730:	3638ef1b 	.word	0x3638ef1b
 800c734:	b9500d01 	.word	0xb9500d01
 800c738:	3c088889 	.word	0x3c088889
 800c73c:	be2aaaab 	.word	0xbe2aaaab
 800c740:	3e2aaaab 	.word	0x3e2aaaab

0800c744 <fabsf>:
 800c744:	ee10 3a10 	vmov	r3, s0
 800c748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c74c:	ee00 3a10 	vmov	s0, r3
 800c750:	4770      	bx	lr
	...

0800c754 <floorf>:
 800c754:	ee10 3a10 	vmov	r3, s0
 800c758:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c75c:	3a7f      	subs	r2, #127	; 0x7f
 800c75e:	2a16      	cmp	r2, #22
 800c760:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c764:	dc2a      	bgt.n	800c7bc <floorf+0x68>
 800c766:	2a00      	cmp	r2, #0
 800c768:	da11      	bge.n	800c78e <floorf+0x3a>
 800c76a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c7cc <floorf+0x78>
 800c76e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c772:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77a:	dd05      	ble.n	800c788 <floorf+0x34>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	da23      	bge.n	800c7c8 <floorf+0x74>
 800c780:	4a13      	ldr	r2, [pc, #76]	; (800c7d0 <floorf+0x7c>)
 800c782:	2900      	cmp	r1, #0
 800c784:	bf18      	it	ne
 800c786:	4613      	movne	r3, r2
 800c788:	ee00 3a10 	vmov	s0, r3
 800c78c:	4770      	bx	lr
 800c78e:	4911      	ldr	r1, [pc, #68]	; (800c7d4 <floorf+0x80>)
 800c790:	4111      	asrs	r1, r2
 800c792:	420b      	tst	r3, r1
 800c794:	d0fa      	beq.n	800c78c <floorf+0x38>
 800c796:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c7cc <floorf+0x78>
 800c79a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c79e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a6:	ddef      	ble.n	800c788 <floorf+0x34>
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	bfbe      	ittt	lt
 800c7ac:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c7b0:	fa40 f202 	asrlt.w	r2, r0, r2
 800c7b4:	189b      	addlt	r3, r3, r2
 800c7b6:	ea23 0301 	bic.w	r3, r3, r1
 800c7ba:	e7e5      	b.n	800c788 <floorf+0x34>
 800c7bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c7c0:	d3e4      	bcc.n	800c78c <floorf+0x38>
 800c7c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7c6:	4770      	bx	lr
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e7dd      	b.n	800c788 <floorf+0x34>
 800c7cc:	7149f2ca 	.word	0x7149f2ca
 800c7d0:	bf800000 	.word	0xbf800000
 800c7d4:	007fffff 	.word	0x007fffff

0800c7d8 <scalbnf>:
 800c7d8:	ee10 3a10 	vmov	r3, s0
 800c7dc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c7e0:	d025      	beq.n	800c82e <scalbnf+0x56>
 800c7e2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c7e6:	d302      	bcc.n	800c7ee <scalbnf+0x16>
 800c7e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7ec:	4770      	bx	lr
 800c7ee:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c7f2:	d122      	bne.n	800c83a <scalbnf+0x62>
 800c7f4:	4b2a      	ldr	r3, [pc, #168]	; (800c8a0 <scalbnf+0xc8>)
 800c7f6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c8a4 <scalbnf+0xcc>
 800c7fa:	4298      	cmp	r0, r3
 800c7fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c800:	db16      	blt.n	800c830 <scalbnf+0x58>
 800c802:	ee10 3a10 	vmov	r3, s0
 800c806:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c80a:	3a19      	subs	r2, #25
 800c80c:	4402      	add	r2, r0
 800c80e:	2afe      	cmp	r2, #254	; 0xfe
 800c810:	dd15      	ble.n	800c83e <scalbnf+0x66>
 800c812:	ee10 3a10 	vmov	r3, s0
 800c816:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c8a8 <scalbnf+0xd0>
 800c81a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c8ac <scalbnf+0xd4>
 800c81e:	2b00      	cmp	r3, #0
 800c820:	eeb0 7a67 	vmov.f32	s14, s15
 800c824:	bfb8      	it	lt
 800c826:	eef0 7a66 	vmovlt.f32	s15, s13
 800c82a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c82e:	4770      	bx	lr
 800c830:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c8b0 <scalbnf+0xd8>
 800c834:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c838:	4770      	bx	lr
 800c83a:	0dd2      	lsrs	r2, r2, #23
 800c83c:	e7e6      	b.n	800c80c <scalbnf+0x34>
 800c83e:	2a00      	cmp	r2, #0
 800c840:	dd06      	ble.n	800c850 <scalbnf+0x78>
 800c842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c846:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c84a:	ee00 3a10 	vmov	s0, r3
 800c84e:	4770      	bx	lr
 800c850:	f112 0f16 	cmn.w	r2, #22
 800c854:	da1a      	bge.n	800c88c <scalbnf+0xb4>
 800c856:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c85a:	4298      	cmp	r0, r3
 800c85c:	ee10 3a10 	vmov	r3, s0
 800c860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c864:	dd0a      	ble.n	800c87c <scalbnf+0xa4>
 800c866:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c8a8 <scalbnf+0xd0>
 800c86a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c8ac <scalbnf+0xd4>
 800c86e:	eef0 7a40 	vmov.f32	s15, s0
 800c872:	2b00      	cmp	r3, #0
 800c874:	bf18      	it	ne
 800c876:	eeb0 0a47 	vmovne.f32	s0, s14
 800c87a:	e7db      	b.n	800c834 <scalbnf+0x5c>
 800c87c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c8b0 <scalbnf+0xd8>
 800c880:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c8b4 <scalbnf+0xdc>
 800c884:	eef0 7a40 	vmov.f32	s15, s0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	e7f3      	b.n	800c874 <scalbnf+0x9c>
 800c88c:	3219      	adds	r2, #25
 800c88e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c892:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c896:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c8b8 <scalbnf+0xe0>
 800c89a:	ee07 3a10 	vmov	s14, r3
 800c89e:	e7c4      	b.n	800c82a <scalbnf+0x52>
 800c8a0:	ffff3cb0 	.word	0xffff3cb0
 800c8a4:	4c000000 	.word	0x4c000000
 800c8a8:	7149f2ca 	.word	0x7149f2ca
 800c8ac:	f149f2ca 	.word	0xf149f2ca
 800c8b0:	0da24260 	.word	0x0da24260
 800c8b4:	8da24260 	.word	0x8da24260
 800c8b8:	33000000 	.word	0x33000000

0800c8bc <_init>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	bf00      	nop
 800c8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c2:	bc08      	pop	{r3}
 800c8c4:	469e      	mov	lr, r3
 800c8c6:	4770      	bx	lr

0800c8c8 <_fini>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	bf00      	nop
 800c8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ce:	bc08      	pop	{r3}
 800c8d0:	469e      	mov	lr, r3
 800c8d2:	4770      	bx	lr
